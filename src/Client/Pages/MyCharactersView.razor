@inject ApiClient Api
@inject IDialogService DialogService
@inject NavigationManager Nav

<MudCard Class="ma-5" Elevation="5">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">My Characters</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                            Color="Color.Primary"
                            OnClick="CreateClickedAsync" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudList Dense="true" Clickable="true">
        @foreach (var character in _characters.OrderBy(c => c.Name))
        {
            <MudListItem Href="@("characters/" + character.Name)">
                <div class="d-flex">
                    <MudAvatar Class="mr-1" Size="Size.Small">
                        <RaceIcon Race="character.Race" Gender="character.Gender" Size="IconSize.Small" width="24" height="24" />
                    </MudAvatar>
                    <MudAvatar Class="mr-1" Size="Size.Small">
                        <ClassIcon PlayerClass="character.Class" Size="IconSize.Small" width="24" height="24" />
                    </MudAvatar>
                    <MudText Inline="false">@character.Name</MudText>
                </div>
            </MudListItem>
        }
    </MudList>
</MudCard>

@code {
    private readonly List<CharacterDto> _characters = new();

    [Parameter] public System.Security.Claims.ClaimsPrincipal User { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (User is null) throw new ArgumentNullException(nameof(User));
    }

    protected override Task OnInitializedAsync()
    {
        var tasks = new List<Task>();

        foreach (var claim in User.FindAll(AppClaimTypes.Character))
        {
            if (long.TryParse(claim.Value, out var characterId))
            {
                tasks.Add(Api.Characters.Get(characterId)
                    .OnSuccess(character =>
                    {
                        _characters.Add(character);
                        StateHasChanged();
                    })
                    .ExecuteAsync());
            }
        }

        return Task.WhenAll(tasks);
    }

    private async Task CreateClickedAsync()
    {
        var character = await DialogService.ShowAsync<Pages.Characters.Create, CharacterDto>(
            "Create Character",
            parameters: new()
            {
                [nameof(Pages.Characters.Create.AllowSubmitNonOwned)] = User.IsAdmin(),
                [nameof(Pages.Characters.Create.DefaultSenderIsOwner)] = true
            },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (character is not null)
        {
            Nav.NavigateTo("/characters/" + character.Name);
        }
    }
}
