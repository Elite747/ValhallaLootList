@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PermissionManager Permissions

<MudPaper Elevation="5" Class="mt-3">
    <ApiExecutor Operation="() => Api.Teams.GetLeaders(Team.Id)" Context="leaders" @ref="_executor" BackgroundRefresh="true">
        <MudList Dense="true">
            <AuthorizeView Policy="@AppPolicies.Administrator">
                <MudListItem Class="mud-list-item-clickable mud-ripple"
                             Icon="@Icons.Material.Filled.AddCircle"
                             IconColor="Color.Success"
                             Text="Add Leader"
                             OnClick="() => AddLeaderAsync(leaders, context)" />
            </AuthorizeView>
            @foreach (var leader in leaders)
            {
                <MudListItem Class="mud-list-item-clickable" Style="cursor: auto" @key="leader.Id">
                    <div class="d-flex align-center">
                        <MudAvatar Class="mr-2">
                            <GuildMemberAvatar Member="leader" Size="40" />
                        </MudAvatar>
                        <div class="mr-auto">
                            <MudText Typo="Typo.h6" Inline="false">
                                <GuildMemberDisplay Member="leader" />
                            </MudText>
                            <div class="d-flex">
                                @if (leader.AppRoles.Contains(AppRoles.RaidLeader))
                                {
                                    <MudChip Size="Size.Small" Label="true" Class="mr-2">Raid Leader</MudChip>
                                }
                                @if (leader.AppRoles.Contains(AppRoles.LootMaster))
                                {
                                    <MudChip Size="Size.Small" Label="true" Class="mr-2">Loot Master</MudChip>
                                }
                                @if (leader.AppRoles.Contains(AppRoles.Recruiter))
                                {
                                    <MudChip Size="Size.Small" Label="true" Class="mr-2">Recruiter</MudChip>
                                }
                            </div>
                        </div>
                        <AuthorizeView Policy="@AppPolicies.Administrator">
                            <MudTooltip Text="Remove">
                                <MudIconButton OnClick="() => RemoveLeaderAsync(leaders, leader, context)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                            </MudTooltip>
                        </AuthorizeView>
                    </div>
                </MudListItem>
            }
        </MudList>
    </ApiExecutor>
</MudPaper>

@code {
    private IApiExecutor? _executor;
    private TeamDto _team = null!;
    private bool _teamChanged;

    [Parameter]
#pragma warning disable BL0007 // Component parameters should be auto properties
    public TeamDto Team
#pragma warning restore BL0007 // Component parameters should be auto properties
    {
        get => _team;
        set
        {
            if (_team != value)
            {
                _team = value;
                _teamChanged = true;
            }
        }
    }

    public Task RefreshAsync() => _executor?.RestartAsync() ?? Task.CompletedTask;

    protected override Task OnParametersSetAsync()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));

        if (_teamChanged)
        {
            _teamChanged = false;
            if (_executor is not null)
            {
                return _executor.RestartAsync();
            }
        }

        return Task.CompletedTask;
    }

    private async Task AddLeaderAsync(IList<GuildMemberDto> leaders, AuthenticationState auth)
    {
        Func<GuildMemberDto, bool> filter = member => !leaders.Any(m2 => m2.Id == member.Id);
        var result = await DialogService.ShowAsync<AddLeaderDialog, AddLeaderDto>(
            "Add Leader",
            new() { [nameof(AddLeaderDialog.Filter)] = filter },
            new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (result is not null)
        {
            await Api.Teams.AddLeader(Team.Id, result)
                .OnSuccess((member, ct) =>
                {
                    leaders.Add(member);
                    if (member.Id == auth.User.GetDiscordId())
                    {
                        return Permissions.RefreshAsync(ct);
                    }
                    return Task.CompletedTask;
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private Task RemoveLeaderAsync(IList<GuildMemberDto> leaders, GuildMemberDto leader, AuthenticationState auth)
    {
        return Api.Teams.RemoveLeader(Team.Id, leader.Id)
            .OnSuccess((_, ct) =>
            {
                leaders.Remove(leader);
                if (leader.Id == auth.User.GetDiscordId())
                {
                    return Permissions.RefreshAsync(ct);
                }
                return Task.CompletedTask;
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}