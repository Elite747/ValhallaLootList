@namespace ValhallaLootList.Client.Shared

<MudAutocomplete Label="Add Member"
                 T="CharacterDto"
                 SearchFunc="Search"
                 Value="SelectedCharacter"
                 ValueChanged="SelectedCharacterChanged"
                 ResetValueOnEmptyText="true"
                 ToStringFunc="c => c.Name"
                 CoerceText="true">
    <ItemTemplate Context="character">
        <ClassIcon Size="IconSize.Tiny" PlayerClass="character.Class" /> <span>@character.Name</span>
    </ItemTemplate>
</MudAutocomplete>

@code {
    [Parameter] public IList<CharacterDto> Characters { get; set; } = null!;
    [Parameter] public CharacterDto? SelectedCharacter { get; set; }
    [Parameter] public EventCallback<CharacterDto?> SelectedCharacterChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Characters is null) throw new ArgumentNullException(nameof(Characters));
    }

    private Task<IEnumerable<CharacterDto>> Search(string? text)
    {
        IEnumerable<CharacterDto> results = Characters;

        if (text?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            results = results.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, text, compareOptions) >= 0);
        }

        return Task.FromResult(results.OrderBy(c => c.Name).AsEnumerable());
    }
}
