@inject ApiClient Api

<EditForm OnValidSubmit="OnSubmitAsync" Model="_model">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <MudDialog>
        <DialogContent>
            <ApiExecutor Operation="Api.Characters.GetUnrostered" Context="characters">
                <MudAutocomplete Label="Character"
                                 T="CharacterDto"
                                 SearchFunc="text => Search(text, characters)"
                                 Value="characters.FirstOrDefault(c => c.Id == _model.CharacterId)"
                                 ValueChanged="c => _model.CharacterId = c?.Id"
                                 ResetValueOnEmptyText="true"
                                 ToStringFunc="c => c.Name"
                                 CoerceText="true"
                                 Variant="Variant.Filled">
                    <ItemTemplate Context="character">
                        <ClassIcon Size="IconSize.Tiny" PlayerClass="character.Class" /> <span>@character.Name</span>
                    </ItemTemplate>
                </MudAutocomplete>
            </ApiExecutor>

            <MudSelect @bind-Value="_model.MemberStatus"
                       For="() => _model.MemberStatus"
                       Label="Member Status"
                       Variant="Variant.Filled">
                <MudSelectItem Value="RaidMemberStatus.FullTrial">Full Trial (-18 prio)</MudSelectItem>
                <MudSelectItem Value="RaidMemberStatus.HalfTrial">Half Trial (-9 prio)</MudSelectItem>
                <MudSelectItem Value="RaidMemberStatus.Member">Member (no penalty)</MudSelectItem>
            </MudSelect>

            <MudValidationSummary />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private readonly AddTeamMemberDto _model = new() { MemberStatus = RaidMemberStatus.FullTrial };
    private ProblemValidator? _problemValidator;

    [Parameter] public TeamDto Team { get; set; } = null!;
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
    }

    private Task OnSubmitAsync()
    {
        return Api.Teams.AddMember(Team.Id, _model)
            .OnSuccess(character => Dialog.Close(DialogResult.Ok(character)))
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }

    private Task<IEnumerable<CharacterDto>> Search(string? text, IEnumerable<CharacterDto> characters)
    {
        var results = characters;
        if (text?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            results = results.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, text, compareOptions) >= 0);
        }
        return Task.FromResult(results);
    }
}
