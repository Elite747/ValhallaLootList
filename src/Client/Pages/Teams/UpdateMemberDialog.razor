@inject ApiClient Api

<EditForm OnValidSubmit="OnSubmitAsync" Model="_model">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <MudDialog>
        <TitleContent>
            Update Status for @Character.Name
        </TitleContent>
        <DialogContent>
            <MudSelect @bind-Value="_model.MemberStatus"
                       For="() => _model.MemberStatus"
                       Label="Member Status">
                <MudSelectItem Value="RaidMemberStatus.FullTrial">Full Trial (-18 prio)</MudSelectItem>
                <MudSelectItem Value="RaidMemberStatus.HalfTrial">Half Trial (-9 prio)</MudSelectItem>
                <MudSelectItem Value="RaidMemberStatus.Member">Member (no penalty)</MudSelectItem>
            </MudSelect>

            <MudValidationSummary />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private readonly UpdateTeamMemberDto _model = new();
    private ProblemValidator? _problemValidator;

    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public TeamCharacterDto Character { get; set; } = null!;
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (Character is null) throw new ArgumentNullException(nameof(Character));
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));

        _model.MemberStatus = Character.MemberStatus;
    }

    private Task OnSubmitAsync()
    {
        return Api.Teams.UpdateMember(Team.Id, Character.Id, _model)
            .OnSuccess(_ => Dialog.Close(DialogResult.Ok(_model.MemberStatus)))
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}
