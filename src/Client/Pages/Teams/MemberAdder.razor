@inject ApiClient Api

<Dropdown Toggled="OnToggledAsync" @ref="_dropdown">
    <DropdownToggle Color="Color.Primary">Add Member</DropdownToggle>
    <DropdownMenu>
        <div class="input-group input-group-sm p-2">
            <input type="text" class="form-control" @bind-value="_searchText" @bind-value:event="oninput" @ref="_searchInput" />
            <div class="input-group-append">
                <button type="button" class="btn btn-outline-primary" @onclick="() => _executor?.RestartAsync()">
                    <span class="fas fa-sync"></span>
                    <span class="sr-only" aria-hidden="true">Refresh</span>
                </button>
            </div>
        </div>
        <ApiExecutor Operation="Api.Characters.GetUnrostered" Context="characters" @ref="_executor">
            @foreach (var character in EnumerateCharacters(characters))
            {
                <DropdownItem Clicked="() => SubmitAsync(character)" Style="cursor: pointer">
                    <ClassIcon Size="IconSize.Tiny" PlayerClass="character.Class" /> <span>@character.Name</span>
                </DropdownItem>
            }
        </ApiExecutor>
    </DropdownMenu>
</Dropdown>

@code {
    private IApiExecutor? _executor;
    private ElementReference _searchInput;
    private Dropdown? _dropdown;
    private string? _searchText;

    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public EventCallback MemberAdded { get; set; }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
    }

    private async Task OnToggledAsync(bool open)
    {
        if (open)
        {
            if (_executor is not null)
            {
                await _executor.StartAsync();
            }
            await _searchInput.FocusAsync();
        }
    }

    private Task SubmitAsync(CharacterDto character)
    {
        return Api.Teams.AddMember(Team.Id, character.Id)
            .OnSuccess(_ =>
            {
                _dropdown?.Hide();
                _executor?.Reset();
                MemberAdded.InvokeAsync();
            })
            .ExecuteAsync();
    }

    private IEnumerable<CharacterDto> EnumerateCharacters(IEnumerable<CharacterDto> characters)
    {
        var results = characters;
        if (_searchText?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            results = results.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
        }
        return results;
    }
}
