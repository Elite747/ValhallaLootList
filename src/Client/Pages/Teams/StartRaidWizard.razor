@inject ApiClient Api
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService  

<MudDialogScrollFix FixedFooter="true" />
<WizardDialog Title="Start Raid" OnFinish="OnFinishAsync">
    <ApiExecutor Operation="Api.GetPhaseConfiguration" Context="phaseConfig">
        @{ State.Phase = State.Phase == 0 ? phaseConfig.CurrentPhase : State.Phase; }
        <WizardSection Name="Select Phase" CanContinue="() => phaseConfig.Phases.Contains(State.Phase)">
            <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
                <MudList Clickable="true" Dense="true">
                    @foreach (var p in phaseConfig.Phases)
                    {
                        var phase = p;
                        <MudListItem Icon="@(phase == State.Phase ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"
                                     OnClick="() => State.Phase = phase">
                            Phase @phase (@string.Join(", ", instances.Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name)))
                        </MudListItem>
                    }
                </MudList>
            </ApiExecutor>
        </WizardSection>
        <WizardSection Name="Roster" CanContinue="() => State.Attendees.Any(a => a.Value.TeamId == Team.Id)">
            <div>
                @foreach (var roleGroup in Team.Roster.GroupBy(a => (a.LootLists.Find(ll => ll.Phase == State.Phase)?.MainSpec).GetValueOrDefault().GetRole()).OrderBy(g => g.Key))
                {
                    <MudText Typo="Typo.subtitle2" Class="mt-1">@roleGroup.Key.GetDisplayName()</MudText>
                    @foreach (var member in roleGroup.OrderBy(a => a.Character.Class.GetLowercaseName()).ThenBy(a => a.Character.Name))
                    {
                        <MemberChip Member="member"
                                    Spec="member.LootLists.Find(ll => ll.Phase == State.Phase)?.MainSpec ?? Specializations.None"
                                    IsSelected="State.Attendees.ContainsKey(member.Character.Id)"
                                    IsSelectedChanged="selected => SetAttending(member.Character, selected)" />
                    }
                }
            </div>
        </WizardSection>
        <WizardSection Name="Additional Attendees">
            <ApiExecutor Operation="Api.Characters.GetActive" Context="characters">
                <div>
                    @foreach (var character in State.Attendees.Values.Where(c => c.TeamId != Team.Id).OrderBy(c => c.Name))
                    {
                        <CharacterChip Character="character"
                                       Closeable="true"
                                       OnClose="() => SetAttending(character, false)" />
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                   Color="Color.Success"
                                   Size="Size.Small"
                                   OnClick="AddAttendeeAsync" />
                </div>
            </ApiExecutor>
        </WizardSection>
    </ApiExecutor>
</WizardDialog>

@code {
    [Parameter] public TeamDto Team { get; set; } = null!;
    private StartRaidState State { get; } = new();

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        foreach (var attendee in Team.Roster)
        {
            State.Attendees[attendee.Character.Id] = attendee.Character;
        }
    }

    private void SetAttending(CharacterDto character, bool attending)
    {
        if (State.Attendees.ContainsKey(character.Id))
        {
            if (!attending)
            {
                State.Attendees.Remove(character.Id);
            }
        }
        else if (attending)
        {
            State.Attendees[character.Id] = character;
        }
    }

    private Task OnFinishAsync(System.ComponentModel.CancelEventArgs arg)
    {
        var dto = new RaidSubmissionDto
        {
            Attendees = State.Attendees.Values.Select(a => a.Id).ToList(),
            Phase = State.Phase,
            TeamId = Team.Id
        };
        return Api.Raids.Create(dto)
            .OnSuccess(raid => Nav.NavigateTo("/raids/" + raid.Id))
            .OnFailure(_ => arg.Cancel = true)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private async Task AddAttendeeAsync()
    {
        var character = await DialogService.ShowAsync<Raids.PickCharacterDialog, CharacterDto>(
            string.Empty,
            new() {
                [nameof(Raids.PickCharacterDialog.Operation)] = (Func<IApiClientOperation<IList<CharacterDto>>>)Api.Characters.GetActive,
                [nameof(Raids.PickCharacterDialog.Filter)] = (Func<CharacterDto, bool>)(c => c.TeamId != Team.Id),
                [nameof(Raids.PickCharacterDialog.ShowAdd)] = true
            },
            new() { NoHeader = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (character is not null)
        {
            State.Attendees[character.Id] = character;
        }
    }
}
