@using MudBlazor.Extensions;

<div class="@Classname" style="@ChipStyle" @onclick="OnClick">
    @if (!HideIcon)
    {
        <MudAvatar Style="margin-left: -12px; margin-right: 4px" Size="Size.Small">
            @if (Spec != Specializations.None)
            {
                <SpecIcon Spec="Spec" Size="IconSize.Medium" Width="24" Height="24" />
            }
            else
            {
                <ClassIcon PlayerClass="Character.Class" Size="IconSize.Medium" Width="24" Height="24" />
            }
        </MudAvatar>
    }
    <span class="mud-chip-content">
        @if (ChildContent is null)
        {
            @Character.Name
        }
        else
        {
            @ChildContent
        }
        @if (Closeable)
        {
            <MudIconButton Class="mud-chip-close-button" Style="margin-right: -10px" Icon="@Icons.Material.Filled.Cancel" OnClick="OnClose" Size="Size.Small" />
        }
    </span>
</div>

@code {
    [Parameter] public CharacterDto Character { get; set; } = null!;
    [Parameter] public Size Size { get; set; }
    [Parameter] public Specializations Spec { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public bool Clickable { get; set; }
    [Parameter] public bool Closeable { get; set; }
    [Parameter] public bool HideIcon { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected string ChipStyle => new MudBlazor.Utilities.StyleBuilder()
        .AddStyle(Style)
        .AddStyle("--mud-palette-lines-inputs", $"var(--classcolor-{Character.Class.GetLowercaseName()})", Character.Class != Classes.Priest)
        .Build();

    protected string Classname => new MudBlazor.Utilities.CssBuilder("mud-chip")
        .AddClass($"mud-chip-size-{Size.ToDescriptionString()}")
        .AddClass("mud-chip-outlined")
        .AddClass("mud-clickable", Clickable || OnClick.HasDelegate)
        .AddClass($"mud-ripple", Clickable || OnClick.HasDelegate)
        .AddClass(Class)
        .Build();

    protected override void OnParametersSet()
    {
        if (Character is null) throw new ArgumentNullException(nameof(Character));
        base.OnParametersSet();
    }
}
