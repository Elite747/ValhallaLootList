@foreach (var row in _rows.OrderByDescending(g => g.Key))
{
    <MudDivider />
    <MudListItem Class="mud-list-item-clickable" Style="cursor: auto">
        <MudGrid>
            <MudItem xs="12" md="3" lg="2">
                <MudText Typo="Typo.h6" GutterBottom="false">Rank @row.Key</MudText>
            </MudItem>
            @foreach (var entry in row)
            {
                <MudItem xs="12" md="9 / _rowSize" lg="10 / _rowSize" Class="d-flex align-center">
                    @if (entry.ItemId > 0)
                    {
                        <CascadingItemContext Id="entry.ItemId">
                            @if (entry.Won)
                            {
                                <MudBadge Icon="@Icons.Material.Filled.Check" Color="Color.Success" Overlap="true">
                                    <MudAvatar Rounded="true" Class="mr-2">
                                        <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                                    </MudAvatar>
                                </MudBadge>
                            }
                            else if (entry.Rank != 0)
                            {
                                var context = new ValhallaLootList.Client.Pages.Teams.Standings.StandingContext(LootList, entry);
                                <MudTooltip>
                                    <TooltipContent>
                                        <div>
                                            Rank @entry.Rank
                                        </div>
                                        @foreach (var bonus in context.Bonuses)
                                        {
                                            <div>
                                                +@bonus.Value (@bonus.Description)
                                            </div>
                                        }
                                    </TooltipContent>
                                    <ChildContent>
                                        <MudBadge Content="context.Prio.GetValueOrDefault()" Color="Color.Info" Overlap="true">
                                            <MudAvatar Rounded="true" Class="mr-2">
                                                <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                                            </MudAvatar>
                                        </MudBadge>
                                    </ChildContent>
                                </MudTooltip>
                            }
                            else
                            {
                                <MudAvatar Rounded="true" Class="mr-2">
                                    <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                                </MudAvatar>
                            }
                            <ItemLink Colorize="true" Bracketize="true" LinkEnabled="true" PlaceholderText="@entry.ItemName" />
                        </CascadingItemContext>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudListItem>
}

@code {
    private IEnumerable<IGrouping<int, LootListEntryDto>> _rows = Enumerable.Empty<IGrouping<int, LootListEntryDto>>();
    private int _rowSize;

    [Parameter] public LootListDto LootList { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
        _rows = LootList.Entries.GroupBy(e => e.Rank);
        _rowSize = _rows.Select(row => row.Count()).Max();
    }
}
