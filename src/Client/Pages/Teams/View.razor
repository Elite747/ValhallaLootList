@page "/Teams/{teamName}"
@inject ApiClient Api
@inject IDialogService DialogService
@inject TeamsSource TeamsSource
@inject NavigationManager Nav

<ApiExecutor Operation="Api.GetPhaseConfiguration" Context="phaseConfig">
    <ApiExecutor Operation="() => Api.Teams.Get(TeamName)" Context="team" @ref="_executor" BackgroundRefresh="true">
        <div class="d-flex align-center mb-3">
            <MudText Typo="Typo.h4" GutterBottom="false">@team.Name</MudText>
            <AuthorizeView Policy="@AppPolicies.Administrator">
                <MudTooltip Text="Edit" Class="ml-2">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditAsync(team)" />
                </MudTooltip>
            </AuthorizeView>
        </div>

        @foreach (var schedule in team.Schedules.OrderBy(s => s.Day >= DayOfWeek.Tuesday ? s.Day : (s.Day + 7)))
        {
            <ScheduleDisplay Schedule="schedule" Typo="Typo.h6" ShowIcon="true" />
        }

        <MudGrid>
            <MudItem xs="12" md="6">
                <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
                    <Success>
                        <MudSelect T="byte"
                                   Value="_phase ?? phaseConfig.CurrentPhase"
                                   ValueChanged="OnPhaseChanged"
                                   Label="Phase"
                                   Variant="Variant.Filled"
                                   OffsetX="false"
                                   OffsetY="false"
                                   Dense="true"
                                   ToStringFunc="@(phase => $"Phase {phase} ({string.Join(", ", instances.Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name))})")">
                            @foreach (var phase in phaseConfig.Phases.OrderBy(p => p))
                            {
                                <MudSelectItem T="byte" Value="phase">
                                    Phase @phase (@string.Join(", ", instances.Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name)))
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </Success>
                    <Failure>
                        <MudSelect T="byte"
                                   Value="_phase ?? phaseConfig.CurrentPhase"
                                   ValueChanged="OnPhaseChanged"
                                   Label="Phase"
                                   Variant="Variant.Filled"
                                   OffsetX="false"
                                   OffsetY="false"
                                   Dense="true"
                                   ToStringFunc="@(phase => $"Phase {phase}")">
                            @foreach (var phase in phaseConfig.Phases.OrderBy(p => p))
                            {
                                <MudSelectItem T="byte" Value="phase">Phase @phase</MudSelectItem>
                            }
                        </MudSelect>
                    </Failure>
                </ApiExecutor>
            </MudItem>

            <MudItem xs="12" Class="mb-5" />

            <MudItem xs="12">
                <LeadersView Team="team" />
            </MudItem>

            <MudItem xs="12" md="_reviewMode ? 12 : 6">
                @if (_reviewMode)
                {
                    <AuthorizeView Policy="@AppPolicies.RaidLeader" Resource="team.Id">
                        <Review Phase="_phase ?? phaseConfig.CurrentPhase"
                                Team="team"
                                OnSwitchViewClicked="() => _reviewMode = false"
                                User="context.User"
                                StatusUpdated="arg => OnReviewStatusUpdated(arg, team, context.User)"
                                RosterChanged="StateHasChanged" />
                    </AuthorizeView>
                }
                else
                {
                    <TeamMembers Team="team"
                                 SelectedPhase="_phase"
                                 CurrentPhase="phaseConfig.CurrentPhase"
                                 OnSwitchViewClicked="() => _reviewMode = true"
                                 OnRefreshClicked="() => _executor?.RestartAsync() ?? Task.CompletedTask" />
                }
            </MudItem>

            <MudItem xs="12" md="_reviewMode ? 12 : 6">
                <TeamRaids Team="team" />
            </MudItem>

            <MudItem xs="12">
                <ValhallaLootList.Client.Pages.Teams.Standings.Standings ShowExternalLink="true" Team="team" />
            </MudItem>
        </MudGrid>
    </ApiExecutor>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;
    private string? _teamName;
    private bool _teamChanged, _reviewMode;
    private byte? _phase;

    [Parameter]
    public string TeamName
    {
        get => _teamName ?? string.Empty;
        set
        {
            if (_teamName != value)
            {
                _teamName = value;
                _teamChanged = true;
            }
        }
    }

    protected override Task OnParametersSetAsync()
    {
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(Nav.ToAbsoluteUri(Nav.Uri).Query).TryGetValue("phase", out var phaseStrings)
            && phaseStrings.Count == 1
            && byte.TryParse(phaseStrings[0], out var phase))
        {
            _phase = phase;
        }
        else
        {
            _phase = null;
        }

        if (_teamChanged)
        {
            _teamChanged = false;
            if (_executor is not null)
            {
                return _executor.RestartAsync();
            }
        }
        return Task.CompletedTask;
    }

    private void OnPhaseChanged(byte phase)
    {
        if (_phase != phase)
        {
            Nav.NavigateTo($"teams/{TeamName}?phase={phase}");
        }
    }

    private async Task EditAsync(TeamDto team)
    {
        var dto = await DialogService.ShowAsync<Create, TeamDto>("Edit Team", new() { [nameof(Create.EditingTeam)] = team });

        if (dto is not null)
        {
            team.Name = dto.Name;
            team.Schedules = dto.Schedules;
            await TeamsSource.RefreshAsync(Api);
        }
    }

    private void OnReviewStatusUpdated(LootListDto arg, TeamDto team, System.Security.Claims.ClaimsPrincipal user)
    {
        var lootList = team.Roster.Find(m => m.Character.Id == arg.CharacterId)?.LootLists.Find(l => l.Phase == arg.Phase);

        if (lootList is not null)
        {
            lootList.Status = arg.Status;

            if (arg.ApprovedBy.HasValue)
            {
                lootList.Approved = true;
                var guildMember = user.CreateGuildMemberFromClient();
                if (guildMember?.Id == arg.ApprovedBy)
                {
                    lootList.ApprovedBy = guildMember;
                }
            }
            else
            {
                lootList.Approved = false;
                lootList.ApprovedBy = null;
            }
        }
    }
}
