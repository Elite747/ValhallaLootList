@page "/Teams/{team}"
@inject ApiClient Api
@inject IDialogService DialogService 

<ApiExecutor Operation="() => Api.Teams.Get(Team)" Context="team" @ref="_executor">
    <h1>@team.Name</h1>

    @foreach (var schedule in team.Schedules)
    {
        var startDate = new DateTime(schedule.RealmTimeStart.Ticks);
        <h4>@(schedule.Day)s from @(startDate.ToString("t", CultureInfo.CurrentCulture)) to @(startDate.Add(schedule.Duration).ToString("t", CultureInfo.CurrentCulture))</h4>
    }

    <p>
        <a href="Teams/@team.Name/Standings">View Loot Standings</a>
    </p>

    <AuthorizeView Roles="@AppRoles.RaidLeader">
        <button type="button" class="btn btn-primary" @onclick="() => StartRaid(team)">Start Raid</button>
    </AuthorizeView>

    <div class="row my-5">
        <div class="col-lg-6 col-xl-4">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Roster</h4>
                    <AuthorizeView Roles="@AppRoles.RaidLeader">
                        <MemberAdder Team="team" />
                    </AuthorizeView>
                </div>
                <div class="list-group list-group-flush">
                    @foreach (var character in team.Roster.OrderByRoleThenClassThenName())
                    {
                        var localCharacter = character;
                        <div class="list-group-item d-flex justify-content-between align-items-center bg-pc-@character.Class.GetLowercaseName()">
                            <a href="characters/@character.Name">@character.Name</a>
                            <span>
                                <RaceIcon Size="IconSize.Small" Race="character.Race" Gender="character.Gender" />
                                @if (character.CurrentPhaseMainspec.HasValue)
                                {
                                    <SpecIcon Size="IconSize.Small" Spec="character.CurrentPhaseMainspec.Value" />
                                }
                                else
                                {
                                    <ClassIcon Size="IconSize.Small" PlayerClass="character.Class" />
                                }
                                <AuthorizeView Roles="@AppRoles.RaidLeader">
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveMemberAsync(team, localCharacter)">
                                        <span class="fas fa-minus" aria-hidden="true"></span>
                                        <span class="sr-only">Remove Member</span>
                                    </button>
                                </AuthorizeView>
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <RaidCalendar Team="team" />
</ApiExecutor>

@code {
    private IApiExecutor? _executor;

    [Parameter] public string Team { get; set; } = string.Empty;
    [CascadingParameter] public IErrorHandler? ErrorHandler { get; set; }

    private async Task RemoveMemberAsync(TeamDto team, TeamCharacterDto character)
    {
        if (await DialogService.ShowAsync<RemoveMemberDialog, bool>("Remove Member", new() { [nameof(RemoveMemberDialog.CharacterName)] = character.Name }))
        {
            await Api.Teams.RemoveMember(team.Id, character.Id)
                .OnSuccess(_ =>
                {
                    team.Roster.Remove(character);
                    StateHasChanged();
                })
                .SendErrorTo(ErrorHandler)
                .ExecuteAsync();
        }
    }

    private void StartRaid(TeamDto team)
    {
        DialogService.Show<RaidStarter>("Start Raid", parameters: new() { [nameof(RaidStarter.Team)] = team });
    }
}
