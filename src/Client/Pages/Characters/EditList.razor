@attribute [Authorize]
@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<EditForm OnValidSubmit="OnSubmit" Model="_lootList" class="m-4">
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <CustomValidator @ref="_bracketValidator" />
    <MudSelect Label="Main Spec"
               For="() => _lootList.MainSpec"
               ValueChanged="(Func<Specializations?, Task>)MainSpecChanged"
               Value="@_lootList.MainSpec">
        @if (_classSpecializations is not null)
        {
            foreach (var spec in _classSpecializations.Where(spec => spec.Spec != _lootList.OffSpec))
            {
                <MudSelectItem T="Specializations?" Value="spec.Spec">@spec.DisplayName</MudSelectItem>
            }
        }
    </MudSelect>
    <MudSelect Label="Off Spec"
               For="() => _lootList.OffSpec"
               ValueChanged="(Func<Specializations?, Task>)OffSpecChanged"
               Value="@_lootList.OffSpec">
        @if (_classSpecializations is not null)
        {
            foreach (var spec in _classSpecializations.Where(spec => spec.Spec != _lootList.MainSpec))
            {
                <MudSelectItem T="Specializations?" Value="spec.Spec">@spec.DisplayName</MudSelectItem>
            }
        }
    </MudSelect>
    @if (_items is null)
    {
        <LoadingIndicator />
    }
    else if (_items.Count == 0)
    {
        <div>Select a specialization.</div>
    }
    else
    {
        foreach (var bracket in _lootList.Brackets)
        {
            <CreateListBracket Bracket="bracket"
                               Items="_items"
                               Model="_lootList"
                               SelectionRequested="OnSelectionRequestedAsync" />
        }

        <div>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Submit</MudButton>
            <MudButton OnClick="OnCancel" Variant="Variant.Text">Cancel</MudButton>
        </div>
    }
</EditForm>

@code {
    [Parameter] public CharacterDto Character { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public EventCallback<LootListDto> OnLootListCreated { get; set; }
    [Parameter] public LootListDto? ExistingList { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private ProblemValidator? _problemValidator;
    private CustomValidator? _bracketValidator;
}