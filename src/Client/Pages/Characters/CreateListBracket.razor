<MudCard Elevation="3" Class="my-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Bracket @(Model.Brackets.IndexOf(Bracket) + 1)</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <ul>
            <li>
                Up to @(Bracket.Template.MaxItems == 1 ? "1 item" : $"{Bracket.Template.MaxItems} items") per rank allowed
            </li>
            @if (Bracket.Template.AllowOffSpec)
            {
                <li>Offspec items allowed</li>
            }
            else
            {
                <li>No offspec items</li>
            }
            @if (!Bracket.Template.AllowTypeDuplicates)
            {
                <li>Only one item per category allowed</li>
            }
        </ul>
    </MudCardContent>
    <MudList Dense="true">
        @foreach (var row in Bracket.Items.OrderByDescending(r => r.Key))
        {
            <MudDivider />
            <MudListItem>
                <MudGrid>
                    <MudItem md="3" lg="2"><b>Rank @row.Key</b></MudItem>
                    @for (int col = 0; col < row.Value.Length; col++)
                    {
                        int column = col;
                        uint id = row.Value[col];
                        var item = id == 0 ? null : Items.FirstOrDefault(x => x.Id == id);

                        <MudItem xs="12" md="9 / Bracket.Template.MaxItems" lg="10 / Bracket.Template.MaxItems">
                            @if (id > 0)
                            {
                                <div class="d-flex align-center py-1">
                                    <MudAvatar Class="mr-2" Rounded="true" Size="Size.Medium">
                                        <ItemIcon ItemId="id" Size="IconSize.Medium" width="40" height="40" />
                                    </MudAvatar>
                                    <div class="mr-auto">
                                        <div>
                                            <ItemLink Id="id" LinkEnabled="true">
                                                <ItemLinkText Colorize="true" OverrideText="@item?.Name" Bracketize="true" />
                                            </ItemLink>
                                        </div>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="() => InvokeSelectionAsync(column, row.Key)">
                                            Change Item
                                        </MudButton>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="() => InvokeSelectionAsync(column, row.Key)">
                                    Select Item
                                </MudButton>
                            }
                            @if (item is not null)
                            {
                                var restrictions = item.Restrictions.Where(r => (r.Specs & Model.MainSpec) != 0);

                                if (Bracket.Template.AllowOffSpec && Model.OffSpec.HasValue)
                                {
                                    var offspecRestrictions = item.Restrictions.Where(r => (r.Specs & Model.OffSpec) != 0);

                                    if (restrictions.Any() ^ offspecRestrictions.Any())
                                    {
                                        restrictions = Array.Empty<RestrictionDto>();
                                    }
                                }
                                <ul>
                                    @foreach (var restriction in restrictions)
                                    {
                                        <li>
                                            <MudText Color="restriction.Level == ItemRestrictionLevel.ManualReview ? Color.Warning : Color.Error">
                                                @restriction.Reason
                                            </MudText>
                                        </li>
                                    }
                                </ul>
                            }
                        </MudItem>
                    }
                </MudGrid>
            </MudListItem>
        }
    </MudList>
</MudCard>

@code {
    [Parameter] public IList<ItemDto> Items { get; set; } = null!;
    [Parameter] public LootListSubmissionBracket Bracket { get; set; } = null!;
    [Parameter] public LootListSubmissionModel Model { get; set; } = null!;
    [Parameter] public EventCallback<ItemSelectionContext> SelectionRequested { get; set; }

    protected override void OnParametersSet()
    {
        if (Bracket is null) throw new ArgumentNullException(nameof(Bracket));
        if (Items is null) throw new ArgumentNullException(nameof(Items));
        if (Model is null) throw new ArgumentNullException(nameof(Model));
    }

    private Task InvokeSelectionAsync(int column, int rank)
    {
        return SelectionRequested.InvokeAsync(new() { Bracket = Bracket, Column = column, Rank = rank });
    }
}
