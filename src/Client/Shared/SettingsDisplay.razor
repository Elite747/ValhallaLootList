@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Nav
@inject SignOutSessionStateManager SignOutManager

<MudMenu Direction="Direction.Left" OffsetX="true" OffsetY="true" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" IconColor="Color.Inherit" Class="ml-1">
    <MudListSubheader>
        Theme
    </MudListSubheader>
    @foreach (var tuple in _themes)
    {
        var (themeId, themeName) = tuple;
        <MudMenuItem OnClick="() => SetThemeAsync(themeId)">
            <div class="d-flex align-center">
                <MudIcon Class="mr-2" Icon="@(themeId == (SelectedTheme ?? string.Empty) ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
                <div>@themeName</div>
            </div>
        </MudMenuItem>
    }
    <MudDivider />
    <TimeZoneMenuItems />
    <AuthorizeView>
        <MudDivider />
        <MudMenuItem OnClick="BeginSignOut">Log out</MudMenuItem>
    </AuthorizeView>
</MudMenu>

@code {
    [Parameter] public string? SelectedTheme { get; set; } = string.Empty;
    [Parameter] public EventCallback<string?> SelectedThemeChanged { get; set; }

    private static readonly List<(string, string)> _themes = new()
    {
        (string.Empty, "System Default"),
        ("light", "Light"),
        ("dark", "Dark")
    };

    private Task SetThemeAsync(string? theme)
    {
        if (SelectedTheme != theme)
        {
            SelectedTheme = theme;
            return SelectedThemeChanged.InvokeAsync(theme);
        }
        return Task.CompletedTask;
    }

    private async Task BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        Nav.NavigateTo("authentication/logout");
    }
}
