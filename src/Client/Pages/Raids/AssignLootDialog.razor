@inject ApiClient Api

<MudDialogScrollFix />
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <ApiExecutor Operation="() => Api.Drops.GetPriorityRankings(Drop.Id)" Context="prios">
            <MudList Clickable="true">
                @foreach (var prioGroup in prios.OrderByDescending(e => e.Priority ?? int.MinValue).GroupBy(e => e.Priority))
                {
                    var highlight = prioGroup.Key.HasValue && prioGroup.Count() > 1;
                    foreach (var entry in prioGroup)
                    {
                        var characterId = entry.CharacterId;
                        var characterName = Raid.Attendees.Find(c => c.Character?.Id == characterId)?.Character?.Name ?? characterId.ToString();
                        <MudListItem OnClick="() => Dialog.Close(DialogResult.Ok(characterId))" IconColor="Color.Error" Icon="@(highlight ? Icons.Material.Filled.Error : null)">
                            <div>@(entry.Priority.HasValue ? string.Format(CultureInfo.CurrentCulture,"({0:N0})", entry.Priority.Value) : "") @characterName</div>
                            @if (entry.Details?.Length > 0)
                            {
                                <div>@entry.Details</div>
                            }
                        </MudListItem>
                    }
                }
            </MudList>
        </ApiExecutor>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public EncounterDropDto Drop { get; set; } = null!;

    [Parameter] public RaidDto Raid { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Drop is null) throw new ArgumentNullException(nameof(Drop));
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
    }
}