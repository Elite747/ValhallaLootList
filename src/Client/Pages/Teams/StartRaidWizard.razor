@using ValhallaLootList.Client.Data.Import
@inject ApiClient Api
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<WizardDialog Title="Start Raid" OnFinish="OnFinishAsync">
    <ApiView Operations="new IApiClientOperation[] { _instancesOperation, _charactersOperation }">
        <WizardSection Name="Import" CanContinue="ImportValid" ContinueText="@(string.IsNullOrWhiteSpace(_importString) ? "Skip" : "Next")">
            <MudTextField T="string"
                          Value="_importString"
                          ValueChanged="ImportOrClear"
                          FullWidth="true"
                          Immediate="true"
                          Label="Import Code"
                          Variant="Variant.Filled" />
            @if (_importString?.Length > 0 && ImportValid())
            {
                <MudAlert Severity="Severity.Success">
                    <div>Imported!</div>
                    <br />
                    @if (_roster.Any(x => x.SelectionState == MemberSelectionState.Unselected))
                    {
                        <MudText Color="Color.Warning">
                            Absent: @GetNames(MemberSelectionState.Unselected)
                        </MudText>
                    }
                    else
                    {
                        <div>All Raiders Present</div>
                    }
                    @if (_roster.Any(x => x.SelectionState == MemberSelectionState.Standby))
                    {
                        <MudText Color="Color.Info">
                            Standby: @GetNames(MemberSelectionState.Standby)
                        </MudText>
                    }
                    @if (_unrostered.Count != 0)
                    {
                        <br />
                        <div>Unrostered: @string.Join(", ", _unrostered.Values.OrderBy(c => c.Name).Select(c => c.Name))</div>
                    }
                </MudAlert>
            }

            @if (_importError?.Length > 0)
            {
                <MudAlert Severity="Severity.Error">Import failed. @_importError</MudAlert>
            }

            @foreach (var warning in _importWarnings)
            {
                <MudAlert Severity="Severity.Warning">@warning</MudAlert>
            }

            @if (_nonExistantCharacters.Count != 0)
            {
                <MudList Dense="true">
                    <MudListSubheader>
                        The following characters were imported but do not exist yet. Add or remove these characters to continue.
                    </MudListSubheader>
                    @foreach (var character in _nonExistantCharacters)
                    {
                        <MudListItem>
                            <div class="d-flex align-center">
                                <PlayerIcon Gender="character.Gender"
                                            PlayerClass="character.Class"
                                            Race="character.Race"
                                            ShowTooltip="true"
                                            Size="Size.Small" />
                                <MudText Class="mx-3">
                                    @character.Name
                                </MudText>
                                <MudTooltip Class="mr-1" Text="Add">
                                    <MudIconButton OnClick="() => AddNonExistantAsync(character)" Color="Color.Success" Icon="@Icons.Material.Filled.AddCircleOutline" />
                                </MudTooltip>
                                <MudTooltip Text="Remove">
                                    <MudIconButton OnClick="() => RemoveNonExistant(character)" Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircleOutline" />
                                </MudTooltip>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            }
        </WizardSection>
        <WizardSection Name="Roster" CanContinue="() => _roster.Any(x => x.SelectionState == MemberSelectionState.Selected)">
            @if (_roster.Any(x => x.SelectionState == MemberSelectionState.Unselected))
            {
                <MudText Color="Color.Warning">
                    Absent: @GetNames(MemberSelectionState.Unselected)
                </MudText>
            }
            @if (_roster.Any(x => x.SelectionState == MemberSelectionState.Standby))
            {
                <MudText Color="Color.Info">
                    Standby: @GetNames(MemberSelectionState.Standby)
                </MudText>
            }
            <div>
                @foreach (var classGroup in _roster.GroupBy(x => x.Member.Character.Class).OrderBy(g => g.Key.GetSortingIndex()))
                {
                    <MudText Typo="Typo.subtitle2" Class="mt-1">@classGroup.Key.GetDisplayName()</MudText>

                    @foreach (var rosterState in classGroup.OrderBy(x => x.Member.Character.Name))
                    {
                        <MemberChip Member="rosterState.Member"
                                    Phase="Phase"
                                    @bind-SelectionState="rosterState.SelectionState" />
                    }
                }
            </div>
        </WizardSection>
        <WizardSection Name="Additional Attendees">
            <div>
                @foreach (var character in _unrostered.Values.OrderBy(c => c.Name))
                {
                    <CharacterChip Closeable Character="character" OnClose="() => _unrostered.Remove(character.Id)" />
                }
                <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                               Color="Color.Success"
                               Size="Size.Small"
                               OnClick="AddAttendeeAsync" />
            </div>
        </WizardSection>
    </ApiView>
</WizardDialog>

@code {
    private class RosterState
    {
        public RosterState(MemberDto member, MemberSelectionState selectionState)
        {
            Member = member;
            SelectionState = selectionState;
        }

        public MemberDto Member { get; set; }
        public MemberSelectionState SelectionState { get; set; }
    }

    private IApiClientOperation<IList<InstanceDto>> _instancesOperation = null!;
    private IApiClientOperation<IList<CharacterDto>> _charactersOperation = null!;
    private readonly List<ImportCharacter> _nonExistantCharacters = new();
    private readonly List<string> _importWarnings = new();
    private string? _importString, _importError;
    private readonly List<RosterState> _roster = new();
    private readonly Dictionary<long, CharacterDto> _unrostered = new();

    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }

    protected override void OnInitialized()
    {
        _instancesOperation = Api.Instances.GetAll();
        _charactersOperation = Api.Characters.GetActive();
    }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));

        _roster.Clear();
        foreach (var member in Team.Roster)
        {
            _roster.Add(new(member, member.Bench ? MemberSelectionState.Standby : MemberSelectionState.Selected));
        }
    }

    private bool ImportValid() => _nonExistantCharacters.Count == 0 && string.IsNullOrEmpty(_importError);

    private void ImportOrClear(string importString)
    {
        _importString = importString;
        _importError = null;
        _importWarnings.Clear();
        _nonExistantCharacters.Clear();

        if (importString?.Length > 0)
        {
            ImportRaidStartModel? model;
            try
            {
                model = System.Text.Json.JsonSerializer.Deserialize<ImportRaidStartModel>(importString);
            }
            catch (System.Text.Json.JsonException ex)
            {
                _importError = ex.Message;
                return;
            }
            if (model is not null)
            {
                if (model.Characters?.Count > 0)
                {
                    var allCharacters = _charactersOperation.GetResult();
                    _unrostered.Clear();

                    // When importing, default all main roster members as absent.
                    foreach (var state in _roster)
                    {
                        state.SelectionState = state.Member.Bench ? MemberSelectionState.Standby : MemberSelectionState.Unselected;
                    }

                    foreach (var importCharacter in model.Characters)
                    {
                        if (string.IsNullOrEmpty(importCharacter.Name))
                        {
                            _importError = "One or more characters does not have a name specified.";
                            return;
                        }

                        var character = allCharacters.FirstOrDefault(c => c.Name == importCharacter.Name);

                        if (character is null)
                        {
                            if (importCharacter.Class == Classes.None || !Enum.IsDefined(importCharacter.Class))
                            {
                                _importError = $"One or more characters does not have a valid class.";
                                return;
                            }

                            if (!Enum.IsDefined(importCharacter.Gender))
                            {
                                _importError = $"One or more characters does not have a valid gender.";
                                return;
                            }

                            if (!Enum.IsDefined(importCharacter.Race))
                            {
                                _importError = $"One or more characters does not have a valid race.";
                                return;
                            }

                            _nonExistantCharacters.Add(importCharacter);
                        }
                        else
                        {
                            if (importCharacter.Class != character.Class || importCharacter.Gender != character.Gender || importCharacter.Race != character.Race)
                            {
                                _importWarnings.Add($"{character.Name} was imported as a {importCharacter.Gender} {importCharacter.Race.GetDisplayName()} {importCharacter.Class.GetDisplayName()}, " +
                                    $"but is supposed to be a {character.Gender} {character.Race.GetDisplayName()} {character.Class.GetDisplayName()}.");
                            }

                            SetState(character, MemberSelectionState.Selected);
                        }
                    }
                }
            }
            else
            {
                _importError = "Import text is not valid.";
            }
        }
    }

    private Task AddNonExistantAsync(ImportCharacter character)
    {
        return Api.Characters.Create(new() { Class = character.Class, Gender = character.Gender, Race = character.Race, Name = character.Name, SenderIsOwner = false })
            .OnSuccess(c =>
            {
                _nonExistantCharacters.Remove(character);
                _charactersOperation.GetResult().Add(c);
                _unrostered[c.Id] = c;
                StateHasChanged();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private void RemoveNonExistant(ImportCharacter character)
    {
        _nonExistantCharacters.Remove(character);
    }

    private void SetState(CharacterDto character, MemberSelectionState state)
    {
        var memberState = _roster.Find(x => x.Member.Character.Id == character.Id);

        if (memberState is not null)
        {
            memberState.SelectionState = state;
            StateHasChanged();
        }
        else if (state == MemberSelectionState.Selected)
        {
            _unrostered[character.Id] = character;
            StateHasChanged();
        }
        else if (state == MemberSelectionState.Unselected)
        {
            _unrostered.Remove(character.Id);
            StateHasChanged();
        }
    }

    private async Task OnFinishAsync(System.ComponentModel.CancelEventArgs arg)
    {
        var attendees = new List<long>();
        var standby = new List<long>();

        foreach (var state in _roster)
        {
            if (state.SelectionState == MemberSelectionState.Selected)
            {
                attendees.Add(state.Member.Character.Id);
            }
            else if (state.SelectionState == MemberSelectionState.Standby)
            {
                standby.Add(state.Member.Character.Id);
            }
        }

        attendees.AddRange(_unrostered.Keys);

        var dto = new RaidSubmissionDto
        {
            Attendees = attendees,
            Standby = standby,
            Phase = Phase,
            TeamId = Team.Id
        };

        await Api.Raids.Create(dto)
            .OnSuccess(raid => Nav.NavigateTo("/raids/" + raid.Id))
            .OnFailure(_ => arg.Cancel = true)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private async Task AddAttendeeAsync()
    {
        var character = await DialogService.ShowAsync<Raids.PickCharacterDialog, CharacterDto>(
            string.Empty,
            new() {
                [nameof(Raids.PickCharacterDialog.Operation)] = _charactersOperation,
                [nameof(Raids.PickCharacterDialog.Filter)] = (Func<CharacterDto, bool>)(c => !c.Teams.Contains(Team.Id)),
                [nameof(Raids.PickCharacterDialog.ShowAdd)] = true
            },
            new() { NoHeader = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (character is not null)
        {
            SetState(character, MemberSelectionState.Selected);
        }
    }

    private string GetNames(MemberSelectionState state) => string.Join(
        ", ",
        _roster.Where(x => x.SelectionState == state)
            .OrderBy(x => x.Member.Character.Name)
            .Select(x => x.Member.Character.Name)
        );
}
