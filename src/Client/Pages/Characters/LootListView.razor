@inject ApiClient Api

@if (_createList)
{
    <EditList Character="@Character" Phase="@Phase" OnLootListCreated="OnLootListCreated" ExistingList="_lootList" OnCancel="() => _createList = false" />
}
else if (_lootList is not null)
{
    <div class="mt-4 ml-3">
        @if (_lootList.Locked)
        {
            <AuthorizeView Roles="@AppRoles.Administrator">
                <button class="btn btn-danger btn-sm" type="button" @onclick="UnlockAsync">Unlock List</button>
            </AuthorizeView>
        }
        else
        {
            if (_lootList.Owned)
            {
                <button class="btn btn-primary btn-sm" type="button" @onclick="() => _createList = true">Edit</button>
            }
            <AuthorizeView Roles="@AppRoles.RaidLeader">
                <button class="btn btn-danger btn-sm" type="button" @onclick="LockAsync">Lock List</button>
            </AuthorizeView>
        }
    </div>
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    <ul class="list-group list-group-flush">
        @if (_lootList.Owned || _lootList.Locked)
        {
            @foreach (var row in _lootList.Entries.GroupBy(e => e.Rank).OrderByDescending(g => g.Key))
            {
                <li class="list-group-item p-1">
                    <div class="row mx-0">
                        <div class="col-md-3 col-lg-2 font-weight-bold">Rank @row.Key</div>
                        @foreach (var entry in row)
                        {
                            <div class="col-md">
                                @if (entry.ItemId > 0)
                                {
                                    <ItemLink Id="entry.ItemId" LinkEnabled="true" Colorize="true" Bracketize="true" OverrideText="@entry.ItemName" />
                                }
                                @if (entry.Prio.HasValue)
                                {
                                    @: Prio: @entry.Prio
                                }
                                else if (entry.Won)
                                {
                                    <span class="fas fa-check text-success" aria-hidden="true"></span>
                                    <span class="sr-only">Won</span>
                                }
                            </div>
                        }
                    </div>
                </li>
            }
        }
        else
        {
            @foreach (var entry in _lootList.Entries.OrderBy(e => e.ItemName))
            {
                <li class="list-group-item p-1">
                    <ItemLink Id="entry.ItemId" LinkEnabled="true" Colorize="true" Bracketize="true" OverrideText="@entry.ItemName" />
                    @if (entry.Won)
                    {
                        <span class="fas fa-check text-success" aria-hidden="true"></span>
                        <span class="sr-only">Won</span>
                    }
                </li>
            }
        }
    </ul>
}
else
{
    <div class="m-4">
        <p>No Phase @Phase loot list was created.</p>
        @if (Character?.Editable == true)
        {
            <MudButton OnClick="() => _createList = true" Color="Color.Primary">Create List</MudButton>
        }
    </div>
}

@code {
    [Parameter] public byte Phase { get; set; }
    [Parameter] public CharacterDto? Character { get; set; }
    [Parameter] public IList<LootListDto> LootLists { get; set; } = null!;
    [CascadingParameter] public IErrorHandler? ErrorHandler { get; set; }
    private LootListDto? _lootList;
    private bool _createList;

    protected override void OnParametersSet()
    {
        if (LootLists is null) throw new ArgumentNullException(nameof(LootLists));
        _lootList = LootLists.FirstOrDefault(ll => ll.Phase == Phase);
    }

    private void OnLootListCreated(LootListDto lootList)
    {
        if (_lootList is not null)
        {
            LootLists.Remove(_lootList);
        }
        LootLists.Add(lootList);
        _lootList = lootList;
        _createList = false;
        StateHasChanged();
    }

    private Task LockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Lock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess(_ => _lootList.Locked = true)
            .SendErrorTo(ErrorHandler)
            .ExecuteAsync();
    }

    private Task UnlockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Unlock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess(_ => _lootList.Locked = false)
            .SendErrorTo(ErrorHandler)
            .ExecuteAsync();
    }
}