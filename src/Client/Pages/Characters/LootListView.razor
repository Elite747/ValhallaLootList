@inject ApiClient Api
@inject ISnackbar Snackbar

@if (_createList)
{
    <EditList Character="@Character" Phase="@Phase" OnLootListCreated="OnLootListCreated" ExistingList="_lootList" OnCancel="() => _createList = false" />
}
else if (_lootList is not null)
{
    <MudList>
        <MudListSubheader>
            @if (_lootList.Locked)
            {
                <AuthorizeView Roles="@AppRoles.Administrator">
                    <MudButton OnClick="UnlockAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LockOpen" Color="Color.Error">Unlock List</MudButton>
                </AuthorizeView>
            }
            else
            {
                if (_lootList.Owned)
                {
                    <MudButton OnClick="() => _createList = true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit List</MudButton>
                }
                <AuthorizeLeaderView TeamId="@_lootList.TeamId">
                    <MudButton OnClick="LockAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Lock" Color="Color.Error">Lock List</MudButton>
                </AuthorizeLeaderView>
            }
        </MudListSubheader>
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />

        @if (_lootList.Owned || _lootList.Locked)
        {
            @foreach (var row in _lootList.Entries.GroupBy(e => e.Rank).OrderByDescending(g => g.Key))
            {
                <MudListItem>
                    <div class="row mx-0">
                        <div class="col-md-3 col-lg-2 font-weight-bold">Rank @row.Key</div>
                        @foreach (var entry in row)
                        {
                            <div class="col-md">
                                @if (entry.ItemId > 0)
                                {
                                    <ItemLink Id="entry.ItemId" LinkEnabled="true" Colorize="true" Bracketize="true" OverrideText="@entry.ItemName" />
                                }
                                @if (entry.Prio.HasValue)
                                {
                                    @: Prio: @entry.Prio
                                }
                                else if (entry.Won)
                                {
                                    <MudTooltip Text="Won">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                    </MudTooltip>
                                }
                            </div>
                        }
                    </div>
                </MudListItem>
            }
        }
        else
        {
            @foreach (var entry in _lootList.Entries.OrderBy(e => e.ItemName))
            {
                <MudListItem>
                    <ItemLink Id="entry.ItemId" LinkEnabled="true" Colorize="true" Bracketize="true" OverrideText="@entry.ItemName" />
                    @if (entry.Won)
                    {
                        <MudTooltip Text="Won">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                        </MudTooltip>
                    }
                </MudListItem>
            }
        }
    </MudList>
}
else
{
    <div class="m-4">
        <p>No Phase @Phase loot list was created.</p>
        @if (Character?.Editable == true)
        {
            <MudButton OnClick="() => _createList = true" Color="Color.Primary" Variant="Variant.Filled">Create List</MudButton>
        }
    </div>
}

@code {
    [Parameter] public byte Phase { get; set; }
    [Parameter] public CharacterDto? Character { get; set; }
    [Parameter] public IList<LootListDto> LootLists { get; set; } = null!;
    private LootListDto? _lootList;
    private bool _createList;

    protected override void OnParametersSet()
    {
        if (LootLists is null) throw new ArgumentNullException(nameof(LootLists));
        _lootList = LootLists.FirstOrDefault(ll => ll.Phase == Phase);
    }

    private void OnLootListCreated(LootListDto lootList)
    {
        if (_lootList is not null)
        {
            LootLists.Remove(_lootList);
        }
        LootLists.Add(lootList);
        _lootList = lootList;
        _createList = false;
        StateHasChanged();
    }

    private Task LockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Lock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess(_ => _lootList.Locked = true)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task UnlockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Unlock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess(_ => _lootList.Locked = false)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}