@using ValhallaLootList.Client.Data.Import
@inject ApiClient Api
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<WizardDialog Title=@(ModifyingKill is null ? "Add Kill" : "Edit Kill") OnFinish="OnFinishAsync">
    <ApiView Operations="_apiOperations">
        @if (ModifyingKill is null)
        {
            <WizardSection Name="Import" CanContinue="ImportValid" ContinueText="@(string.IsNullOrWhiteSpace(_importString) ? "Skip" : "Next")">
                <MudTextField T="string"
                              Value="_importString"
                              ValueChanged="ImportOrClear"
                              FullWidth="true"
                              Immediate="true"
                              Label="Import Code"
                              Variant="Variant.Filled" />
                @if (_importString?.Length > 0 && ImportValid())
                {
                    <MudAlert Severity="Severity.Success">
                        @if (_encounter is not null)
                        {
                            <div>Imported @_encounter.Name</div>
                        }
                        else
                        {
                            <div>Imported!</div>
                        }
                        <br />
                        @foreach ((uint itemId, int count) in _drops.Where(d => d.Value > 0))
                        {
                            <div>
                                <ItemLink Colorize Bracketize Id="itemId" />
                                @if (count > 1)
                                {
                                    @($" x{count}")
                                }
                            </div>
                        }
                        <br />
                        @if (_attendees.Count == Raid.Attendees.Count)
                        {
                            <div>All Raiders Present</div>
                        }
                        else
                        {
                            <div>Not Present: @GetNotPresent()</div>
                        }
                    </MudAlert>
                }

                @if (_importError?.Length > 0)
                {
                    <MudAlert Severity="Severity.Error">Import failed. @_importError</MudAlert>
                }

                @foreach (var warning in _importWarnings)
                {
                    <MudAlert Severity="Severity.Warning">@warning</MudAlert>
                }

                @if (_nonExistantCharacters.Count != 0)
                {
                    <MudList Dense="true" Class="my-2">
                        <MudListSubheader>
                            The following characters were imported but are not part of this raid. Add or remove these characters to continue.
                        </MudListSubheader>
                        @foreach (var character in _nonExistantCharacters)
                        {
                            <MudListItem>
                                <div class="d-flex align-center">
                                    <PlayerIcon Gender="character.Gender"
                                                PlayerClass="character.Class"
                                                Race="character.Race"
                                                ShowTooltip="true"
                                                Size="Size.Small" />
                                    <MudText Class="mx-3">
                                        @character.Name
                                    </MudText>
                                    <MudTooltip Class="mr-1" Text="Add">
                                        <MudIconButton OnClick="() => AddNonExistantAsync(character)" Color="Color.Success" Icon="@Icons.Material.Filled.AddCircleOutline" />
                                    </MudTooltip>
                                    <MudTooltip Text="Remove">
                                        <MudIconButton OnClick="() => RemoveNonExistant(character)" Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircleOutline" />
                                    </MudTooltip>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }

                @if (_importEncounters.Count != 0)
                {
                    <MudList Dense="true" Clickable="true">
                        <MudListSubheader>
                            More than one kill was imported. Select the kill you would like to add.
                        </MudListSubheader>
                        @foreach (var encounter in _importEncounters)
                        {
                            <MudListItem OnClick="() => SetEncounter(encounter)" Disabled="encounter.Encounter is null">
                                <MudText Typo="Typo.h6">
                                    @if (encounter.Encounter is not null)
                                    {
                                        @encounter.Encounter.Name
                                    }
                                    else
                                    {
                                        @:Unknown Items
                                    }
                                </MudText>
                                @foreach (var item in encounter.Items)
                                {
                                    <div>
                                        <ItemLink Id="item" Bracketize="true" Colorize="true" />
                                    </div>
                                }
                            </MudListItem>
                        }
                    </MudList>
                }
            </WizardSection>
            <WizardSection Name="Encounter" CanContinue="() => _encounter is not null">
                <MudList Clickable Dense>
                    @foreach (var instance in _instancesOperation.GetResult()
                        .Where(IsInActivePhase)
                        .OrderByDescending(i => i.Phase)
                        .ThenBy(i => i.Name))
                    {
                        <MudListSubheader @key="instance.Id">
                            @instance.Name
                        </MudListSubheader>
                        @foreach (var encounter in instance.Encounters.Where(IsInActivePhase))
                        {
                            <MudListItem Icon="@(_encounter?.Id == encounter.Id ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"
                                         OnClick="() => SetEncounter(encounter)"
                                         Text="@encounter.Name"
                                         Disabled='!encounter.IsTrash && Raid.Kills.Any(k => k.EncounterId == encounter.Id)'
                                         @key="encounter.Id" />
                        }
                    }
                </MudList>
            </WizardSection>
        }

        <WizardSection Name="Attendees" CanContinue="() => _attendees.Count != 0">
            @if (_attendees.Count != Raid.Attendees.Count)
            {
                <MudAlert Severity="Severity.Warning">
                    <div>
                        The following raiders are not listed as present for this kill:
                    </div>
                    <div>
                        @GetNotPresent()
                    </div>
                    <div>
                        Ensure that this is correct before proceeding!
                    </div>
                    <br />
                    <small>
                        Characters who are not present will not recieve loss bonuses for loot that drops.
                    </small>
                </MudAlert>
            }

            <div class="mt-1">
                @foreach (var classGroup in Raid.Attendees.GroupBy(m => m.Character.Class).OrderBy(g => g.Key.GetSortingIndex()))
                {
                    <MudText Typo="Typo.subtitle2" Class="mt-1">@classGroup.Key.GetDisplayName()</MudText>
                    @foreach (var attendance in classGroup.OrderBy(a => a.Character.Name))
                    {
                        <KillerChip Attendance="attendance"
                                    Raid="Raid"
                                    IsSelected="_attendees.ContainsKey(attendance.Character.Id)"
                                    IsSelectedChanged="selected => SetPresent(attendance.Character, selected)" />
                    }
                }
            </div>
        </WizardSection>
        <WizardSection Name="Drops" CanContinue="() => _drops.Count != 0 && _drops.Values.Sum() > 0">
            <ApiExecutor Operation="() => Api.Items.Get(_encounter?.Phase ?? 1, (byte)Raid.TeamSize, includeTokens: true)" Context="items">
                @foreach (var item in _drops.Keys.Select(id => new { Id = id, Name = items.Find(i => i.Id == id)?.Name ?? string.Empty }).OrderBy(i => i.Name))
                {
                    <div class="d-flex align-center py-1" @key="item.Id">
                        <CascadingItemContext Id="item.Id">
                            <MudIconButton OnClick="() => _drops[item.Id] = Math.Max(0, _drops[item.Id] - 1)"
                                       Disabled="_drops[item.Id] <= (ModifyingKill?.Drops.Count(d => d.ItemId == item.Id && d.WinnerId.HasValue) ?? 0)"
                                       Icon="@Icons.Material.Filled.RemoveCircle"
                                       Size="Size.Small"
                                       Color="Color.Error" />

                            <MudText Typo="Typo.h6" Class="mx-2">@_drops[item.Id]</MudText>

                            <MudIconButton OnClick="() => _drops[item.Id] = Math.Min(3, _drops[item.Id] + 1)"
                                       Disabled="_drops[item.Id] >= 3"
                                       Icon="@Icons.Material.Filled.AddCircle"
                                       Size="Size.Small"
                                       Color="Color.Success" />

                            <MudAvatar Rounded Size="Size.Small" Class="mx-1">
                                <ItemIcon Size="IconSize.Small" Width="24" Height="24" />
                            </MudAvatar>
                            <ItemLink Colorize Bracketize Class="mr-1" PlaceholderText="@item.Name" />
                        </CascadingItemContext>
                    </div>
                    <MudDivider DividerType="DividerType.Middle" />
                }
            </ApiExecutor>
        </WizardSection>
    </ApiView>
</WizardDialog>

@code {
    private readonly Dictionary<long, CharacterDto> _attendees = new();
    private readonly Dictionary<uint, int> _drops = new();
    private readonly List<ImportCharacter> _nonExistantCharacters = new();
    private readonly List<ImportEncounter> _importEncounters = new();
    private readonly List<string> _importWarnings = new();
    private IApiClientOperation<IList<InstanceDto>> _instancesOperation = null!;
    private IApiClientOperation<PhaseConfigDto> _phaseConfigOperation = null!;
    private IApiClientOperation[] _apiOperations = null!;
    private string? _importString, _importError;
    private EncounterDto? _encounter;

    [Parameter] public RaidDto Raid { get; set; } = null!;
    [Parameter] public EncounterKillDto? ModifyingKill { get; set; }

    protected override void OnInitialized()
    {
        _instancesOperation = Api.Instances.GetAll();
        _phaseConfigOperation = Api.GetPhaseConfiguration();
        _apiOperations = new IApiClientOperation[] { _instancesOperation, _phaseConfigOperation };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
        await ResetState();
    }

    private async Task ResetState()
    {
        await _instancesOperation.ExecuteOrWaitAsync();

        SetEncounter(ModifyingKill is null ? null : _instancesOperation.GetResult().SelectMany(i => i.Encounters).FirstOrDefault(e => e.Id == ModifyingKill.EncounterId));

        var lastKill = Raid.Kills.Count == 0 ? null : Raid.Kills[^1];
        foreach (var attendee in Raid.Attendees)
        {
            if (ModifyingKill is null)
            {
                // Unless importing, default characters as present if: 1. is standby, 2. they were present for the last raid encounter kill, or 3. this is the first raid encounter.
                SetPresent(attendee.Character, attendee.Standby || lastKill?.Characters.Contains(attendee.Character.Id) != false);
            }
            else
            {
                SetPresent(attendee.Character, ModifyingKill.Characters.Contains(attendee.Character.Id));
            }
        }
    }

    private bool ImportValid() => _nonExistantCharacters.Count == 0 && _importEncounters.Count == 0 && string.IsNullOrEmpty(_importError);

    private async Task ImportOrClear(string importString)
    {
        _importString = importString;
        _importError = null;
        _importWarnings.Clear();
        _nonExistantCharacters.Clear();
        _importEncounters.Clear();
        await ResetState();

        if (importString?.Length > 0)
        {
            ImportKillModel? model;
            try
            {
                model = System.Text.Json.JsonSerializer.Deserialize<ImportKillModel>(importString);
            }
            catch (System.Text.Json.JsonException ex)
            {
                _importError = ex.Message;
                return;
            }
            if (model is not null)
            {
                if (model.Items?.Count > 0)
                {
                    _importEncounters.AddRange(ImportEncounter.CreateFromItems(model.Items, _instancesOperation.GetResult()));

                    if (_importEncounters.Count == 1)
                    {
                        var singleEncounter = _importEncounters[0];
                        SetEncounter(singleEncounter);

                        if (singleEncounter.Encounter is null)
                        {
                            _importError = "No imported items were valid for importing.";
                            return;
                        }
                    }
                }

                if (model.Characters?.Count > 0)
                {
                    // When importing, default all non-standby raiders as absent, and all standby raiders as present.
                    foreach (var attendee in Raid.Attendees)
                    {
                        SetPresent(attendee.Character, attendee.Standby);
                    }

                    foreach (var importCharacter in model.Characters)
                    {
                        if (string.IsNullOrEmpty(importCharacter.Name))
                        {
                            _importError = "One or more characters does not have a name specified.";
                            return;
                        }

                        var character = Raid.Attendees.Find(a => a.Character.Name == importCharacter.Name)?.Character;

                        if (character is null)
                        {
                            if (importCharacter.Class == Classes.None || !Enum.IsDefined(importCharacter.Class))
                            {
                                _importError = $"One or more characters does not have a valid class.";
                                return;
                            }

                            if (!Enum.IsDefined(importCharacter.Gender))
                            {
                                _importError = $"One or more characters does not have a valid gender.";
                                return;
                            }

                            if (!Enum.IsDefined(importCharacter.Race))
                            {
                                _importError = $"One or more characters does not have a valid race.";
                                return;
                            }

                            _nonExistantCharacters.Add(importCharacter);
                        }
                        else
                        {
                            if (importCharacter.Class != character.Class || importCharacter.Gender != character.Gender || importCharacter.Race != character.Race)
                            {
                                _importWarnings.Add($"{character.Name} was imported as a {importCharacter.Gender} {importCharacter.Race.GetDisplayName()} {importCharacter.Class.GetDisplayName()}, " +
                                    $"but is supposed to be a {character.Gender} {character.Race.GetDisplayName()} {character.Class.GetDisplayName()}.");
                            }

                            SetPresent(character, true);
                        }
                    }
                }
            }
            else
            {
                _importError = "Import text is not valid.";
            }
        }
    }

    private async Task AddNonExistantAsync(ImportCharacter character)
    {
        System.Diagnostics.Debug.Assert(character.Name?.Length > 0);

        CharacterDto? characterDto = null;
        bool notFound = false;

        await Api.Characters.Get(character.Name!)
            .OnSuccess(c => characterDto = c)
            .OnFailure(problem =>
            {
                if (problem.Status == 404)
                {
                    notFound = true;
                }
                else
                {
                    Snackbar.Add(problem.GetDisplayString(), Severity.Error);
                }
            })
            .ExecuteAsync();

        if (notFound)
        {
            await Api.Characters.Create(new() { Name = character.Name, Class = character.Class, Gender = character.Gender, Race = character.Race, SenderIsOwner = false })
                .OnSuccess(c => characterDto = c)
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }

        if (characterDto is not null)
        {
            await Api.Raids.AddAttendee(Raid.Id, characterDto.Id, false)
                .OnSuccess(a =>
                {
                    Raid.Attendees.Add(a);
                    SetPresent(a.Character, true);
                    RemoveNonExistant(character);
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private void RemoveNonExistant(ImportCharacter character)
    {
        _nonExistantCharacters.Remove(character);
    }

    private void SetEncounter(ImportEncounter encounter)
    {
        _importEncounters.Clear();
        SetEncounter(encounter.Encounter);

        if (encounter.Encounter is not null)
        {
            foreach (var item in encounter.Items)
            {
                if (_drops.TryGetValue(item, out int count))
                {
                    _drops[item] = count + 1;
                }
            }
        }
    }

    private void SetEncounter(EncounterDto? encounter)
    {
        _encounter = encounter;
        _drops.Clear();

        if (encounter is not null)
        {
            foreach (var variant in encounter.Variants.Where(v => v.Size == Raid.TeamSize))
            {
                foreach (var itemId in variant.Items)
                {
                    _drops[itemId] = ModifyingKill?.Drops.Count(d => d.ItemId == itemId) ?? 0;
                }
            }
        }
    }

    private void SetPresent(CharacterDto character, bool present)
    {
        if (_attendees.ContainsKey(character.Id))
        {
            if (!present)
            {
                _attendees.Remove(character.Id);
            }
        }
        else if (present)
        {
            _attendees.Add(character.Id, character);
        }
    }

    private Task OnFinishAsync(System.ComponentModel.CancelEventArgs arg)
    {
        if (_encounter is null)
        {
            arg.Cancel = true;
            return Task.CompletedTask;
        }

        var kill = new KillSubmissionDto
        {
            Characters = _attendees.Keys.ToList(),
            EncounterId = _encounter.Id
        };

        foreach (var (id, count) in _drops)
        {
            for (int i = 0; i < count; i++)
            {
                kill.Drops.Add(id);
            }
        }

        return (ModifyingKill is null ? Api.Raids.AddKill(Raid.Id, kill) : Api.Raids.ModifyKill(Raid.Id, ModifyingKill.TrashIndex, kill))
            .OnSuccess(kill =>
            {
                if (ModifyingKill is not null)
                {
                    ModifyingKill.Drops = kill.Drops;
                    ModifyingKill.Characters = kill.Characters;
                }
                else
                {
                    Raid.Kills.Add(kill);
                }
            })
            .OnFailure(_ => arg.Cancel = true)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private string GetNotPresent()
    {
        return string.Join(", ", Raid.Attendees.Where(a => !_attendees.ContainsKey(a.Character.Id)).OrderBy(a => a.Character.Name).Select(a => a.Character.Name));
    }

    private bool IsInActivePhase(InstanceDto instance)
    {
        if (instance.Phase is null)
        {
            return true;
        }

        var phaseConfig = _phaseConfigOperation.GetResult();
        return instance.Phase.Value <= phaseConfig.CurrentPhase && phaseConfig.Phases.Contains(instance.Phase.Value);
    }

    private bool IsInActivePhase(EncounterDto encounter)
    {
        var phaseConfig = _phaseConfigOperation.GetResult();
        return encounter.Phase <= phaseConfig.CurrentPhase && phaseConfig.Phases.Contains(encounter.Phase);
    }
}
