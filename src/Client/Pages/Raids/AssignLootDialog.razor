@inject ApiClient Api

<MudDialogScrollFix />
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <ApiExecutor Operation="() => Api.Drops.GetPriorityRankings(Drop.Id)" Context="prios">
            <MudList Clickable="true" Dense="true">
                @foreach (var context in EnumerateRows(prios))
                {
                    <AssignLootDialogRow Context="context" />
                }
            </MudList>
        </ApiExecutor>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public EncounterDropDto Drop { get; set; } = null!;

    [Parameter] public RaidDto Raid { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Drop is null) throw new ArgumentNullException(nameof(Drop));
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
    }

    private IEnumerable<AssignEntryContext> EnumerateRows(IList<ItemPrioDto> prios)
    {
        var contexts = new List<AssignEntryContext>();

        foreach (var character in Raid.Attendees.Where(a => a.Character is not null).Select(a => a.Character!))
        {
            contexts.Add(new AssignEntryContext(Raid, Drop, character, prios.FirstOrDefault(p => p.CharacterId == character.Id)));
        }

        foreach (var group in contexts.Where(e => e.Prio.HasValue).GroupBy(e => e.Prio))
        {
            if (group.Count() > 1)
            {
                foreach (var entry in group)
                {
                    entry.SetTied();
                }
            }
        }

        return contexts.OrderByDescending(c => c.Prio ?? int.MinValue).ThenBy(e => e.Character.Name);
    }
}