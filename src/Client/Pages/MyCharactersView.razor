@inject ApiClient Api
@inject IDialogService DialogService
@inject NavigationManager Nav

<MudCard Class="my-5" Elevation="5">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">My Characters</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                            Color="Color.Primary"
                            OnClick="CreateClickedAsync" />
        </CardHeaderActions>
    </MudCardHeader>
    <ApiExecutor Operation="Api.Characters.GetMine" Context="myCharacters">
        <MudList Dense="true" Clickable="true">
            @foreach (var character in myCharacters)
            {
                <MudListItem Href="@("characters/" + character.Name)" @key="character.Id">
                    <ValhallaLootList.Client.Pages.Characters.CharacterRow Character="character" />
                </MudListItem>
            }
        </MudList>
    </ApiExecutor>
</MudCard>

@code {
    [Parameter] public System.Security.Claims.ClaimsPrincipal User { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (User is null) throw new ArgumentNullException(nameof(User));
    }

    private async Task CreateClickedAsync()
    {
        var character = await DialogService.ShowAsync<Pages.Characters.Create, CharacterDto>(
            "Create Character",
            parameters: new()
            {
                [nameof(Pages.Characters.Create.AllowSubmitNonOwned)] = User.IsAdmin(),
                [nameof(Pages.Characters.Create.DefaultSenderIsOwner)] = true
            },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (character is not null)
        {
            Nav.NavigateTo("/characters/" + character.Name);
        }
    }
}
