@inject ApiClient Api
@inject ISnackbar Snackbar

<ApiExecutor Operation="Api.Characters.GetUnrostered" Context="characters" @ref="_executor">
    <div class="d-flex align-baseline">
        <MudAutocomplete Label="Add Member"
                         T="CharacterDto"
                         SearchFunc="text => Search(text, characters)"
                         Value="_selectedCharacter"
                         ValueChanged="OnCharacterChangedAsync"
                         ResetValueOnEmptyText="true"
                         CoerceText="true">
            <ItemTemplate Context="character">
                <ClassIcon Size="IconSize.Tiny" PlayerClass="character.Class" /> <span>@character.Name</span>
            </ItemTemplate>
        </MudAutocomplete>
        <MudIconButton OnClick="() => _executor?.RestartAsync()" Icon="@Icons.Material.Filled.Refresh" />
    </div>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;
    private CharacterDto? _selectedCharacter;

    [Parameter] public TeamDto Team { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
    }

    private Task OnCharacterChangedAsync(CharacterDto character)
    {
        _selectedCharacter = character;
        StateHasChanged();

        return Api.Teams.AddMember(Team.Id, character.Id)
            .OnSuccess((_, _) =>
            {
                _selectedCharacter = null;
                StateHasChanged();
                return _executor?.RestartAsync().AsTask() ?? Task.CompletedTask;
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task<IEnumerable<CharacterDto>> Search(string? text, IEnumerable<CharacterDto> characters)
    {
        var results = characters;
        if (text?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            results = results.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, text, compareOptions) >= 0);
        }
        return Task.FromResult(results);
    }
}
