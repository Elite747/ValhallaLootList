@page "/characters"
@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService

<div class="d-flex align-center mb-3">
    <MudText Typo="Typo.h4" GutterBottom="false">Characters</MudText>

    <AuthorizeView Context="auth">
        <MudTooltip Text="Add Character">
            <MudIconButton OnClick="() => CreateClickedAsync(auth)" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />
        </MudTooltip>
    </AuthorizeView>

    <MudTooltip Text="Refresh">
        <MudIconButton OnClick="() => _executor?.RestartAsync() ?? Task.CompletedTask" Icon="@Icons.Material.Filled.Refresh" />
    </MudTooltip>
</div>


<ApiExecutor Operation="Api.Characters.GetAll" @ref="_executor" Context="characters">
    <MudPaper Elevation="5">
        <MudList Clickable="true">
            <MudListSubheader>
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudTextField @bind-Value="_searchText"
                                      Immediate="true"
                                      Label="Find Character"
                                      Variant="Variant.Filled"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Filled.Search" />

                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect @bind-SelectedValues="_searchClasses"
                                   MultiSelection="true"
                                   Variant="Variant.Filled"
                                   Label="Class"
                                   ToStringFunc="ClassesExtensions.GetDisplayName"
                                   T="Classes">
                            @foreach (var c in _allClasses)
                            {
                                <MudSelectItem T="Classes" Value="@c">
                                    <div class="d-flex align-center">
                                        <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                                            <ClassIcon PlayerClass="c" Size="IconSize.Medium" Width="24" Height="24" />
                                        </MudAvatar>
                                        <span>@c.GetDisplayName()</span>
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>

                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect @bind-SelectedValues="_searchTeams"
                                   MultiSelection="true"
                                   Variant="Variant.Filled"
                                   Label="Team"
                                   T="string">
                            @foreach (var team in characters.Select(c => c.TeamName).Distinct().Where(str => str?.Length > 0).OrderBy(str => str))
                            {
                                <MudSelectItem T="string" Value="@team" @key="team">@team</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudListSubheader>
            @foreach (var ch in EnumerateCharacters(characters))
            {
                <MudListItem Href="@("characters/" + ch.Name)" @key="ch.Id">
                    <div class="d-flex">
                        <PlayerIcon Race="ch.Race"
                                    Gender="ch.Gender"
                                    PlayerClass="ch.Class"
                                    Size="Size.Small"
                                    Class="mr-1" />
                        <MudText Inline="false">@ch.Name</MudText>
                    </div>
                </MudListItem>
            }
        </MudList>
    </MudPaper>
</ApiExecutor>

@code {
    private ApiExecutor<IList<CharacterDto>>? _executor;
    private string _searchText = string.Empty;
    private HashSet<Classes> _searchClasses = new();
    private HashSet<string> _searchTeams = new();
    private static readonly Classes[] _allClasses = new[] {
        Classes.Druid,
        Classes.Hunter,
        Classes.Mage,
        Classes.Paladin,
        Classes.Priest,
        Classes.Rogue,
        Classes.Shaman,
        Classes.Warlock,
        Classes.Warrior
    };

    private IEnumerable<CharacterDto> EnumerateCharacters(IList<CharacterDto> characters)
    {
        if (characters.Count > 0)
        {
            IEnumerable<CharacterDto> en = characters;

            if (_searchText?.Length > 0)
            {
                const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
                en = en.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
            }

            if (_searchClasses?.Count > 0)
            {
                en = en.Where(ch => _searchClasses.Contains(ch.Class));
            }

            if (_searchTeams?.Count > 0)
            {
                en = en.Where(ch => ch.TeamName?.Length > 0 && _searchTeams.Contains(ch.TeamName));
            }

            return en;
        }
        return characters;
    }

    private async Task CreateClickedAsync(AuthenticationState auth)
    {
        var character = await DialogService.ShowAsync<Create, CharacterDto>(
            "Create Character",
            parameters: new()
            {
                [nameof(Create.AllowSubmitNonOwned)] = auth.User.IsAdmin(),
                [nameof(Create.DefaultSenderIsOwner)] = true
            },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (character is not null)
        {
            Nav.NavigateTo("/characters/" + character.Name);
        }
    }
}
