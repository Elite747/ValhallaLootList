@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<ApiExecutor Operation="() => Api.Items.Get(LootList.Phase)" Context="items">
    <LootListLayout LootList="LootList" ShowBracketRules="true">
        <HeaderContent>
            <MudButton OnClick="SubmitAsync" Color="Color.Primary" Variant="Variant.Filled" Class="ma-1">
                @if (LootList.TeamId.HasValue)
                {
                    <span>Submit to @(string.IsNullOrEmpty(LootList.TeamName) ? "your team" : LootList.TeamName)</span>
                }
                else
                {
                    <span>Submit Application</span>
                }
            </MudButton>
            <MudButton OnClick="ChangeSpecAsync" Color="Color.Primary" Variant="Variant.Filled" Class="ma-1">Change Specialization</MudButton>
        </HeaderContent>
        <EntryTemplate Context="entry">
            <LootListEditorEntry Entry="entry" Editor="this" Items="items" />
        </EntryTemplate>
    </LootListLayout>
</ApiExecutor>

@code {
    [Parameter] public LootListDto LootList { get; set; } = null!;
    [Parameter] public EventCallback OnSubmit { get; set; }

    public LootListEntryDto? DraggingEntry { get; set; }

    public void NotifyStateChanged() => StateHasChanged();

    protected override void OnParametersSet()
    {
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
    }

    private Task SubmitAsync()
    {
        if (LootList.TeamId.HasValue)
        {
            return SendSubmissionAsync(new() { LootList.TeamId.Value });
        }
        return SubmitNewAsync();
    }

    private async Task SubmitNewAsync()
    {
        int? collapsibleBracket = GetCollapsibleBracket();
        if (collapsibleBracket.HasValue)
        {
            if (await DialogService.ShowMessageBox(
                $"Unfilled Ranks in Bracket {collapsibleBracket}",
                $"Your loot list has higher ranks in bracket {collapsibleBracket} that could be used for items you have listed within it. " +
                "Submitting this list would be voluntarily accepting lower priority on these items with no benefit. " +
                "Are you sure you want to continue to submit this list?",
                "Continue",
                "Cancel") != true)
            {
                return;
            }
        }

        var teams = await DialogService.ShowAsync<PickTeamDialog, List<long>?>(
            string.Empty,
            parameters: new()
            {
                [nameof(PickTeamDialog.SelectedTeams)] = LootList.SubmittedTo.ToList()
            });

        if (teams is not null)
        {
            await SendSubmissionAsync(teams);
        }
    }

    private Task SendSubmissionAsync(List<long> teams)
    {
        return Api.LootLists.Submit(LootList, teams)
            .OnSuccess((_, _) =>
            {
                return OnSubmit.InvokeAsync();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private int? GetCollapsibleBracket()
    {
        foreach (var bracket in LootList.Entries.Where(e => !e.Won).GroupBy(e => e.Bracket))
        {
            bool hasUnselected = false;

            foreach (var entry in bracket.OrderByDescending(e => e.Rank))
            {
                if (entry.ItemId.HasValue)
                {
                    if (hasUnselected)
                    {
                        // higher rank is not filled.
                        return bracket.Key + 1;
                    }
                    else
                    {
                        hasUnselected = false;
                    }
                }
                else
                {
                    hasUnselected = true;
                }
            }
        }

        return null;
    }

    private Task ChangeSpecAsync()
    {
        return Api.Characters.GetSpecs(LootList.CharacterId)
            .OnSuccess(async (specs, _) =>
            {
                if (specs.Count == 1)
                {
                    await DialogService.ShowMessageBox("Change Specialization", "Your class only has one role.");
                    return;
                }

                var response = await DialogService.ShowAsync<CreateListDialog, LootListSubmissionDto?>(
                    string.Empty,
                    new()
                    {
                        [nameof(CreateListDialog.CharacterId)] = LootList.CharacterId,
                        [nameof(CreateListDialog.Phase)] = LootList.Phase,
                        [nameof(CreateListDialog.Specializations)] = specs,
                        [nameof(CreateListDialog.UpdateExisting)] = true,
                        [nameof(CreateListDialog.DefaultMainSpec)] = LootList.MainSpec,
                        [nameof(CreateListDialog.DefaultOffSpec)] = LootList.MainSpec != LootList.OffSpec ? LootList.OffSpec : default,
                    });

                if (response is not null)
                {
                    LootList.MainSpec = response.MainSpec;
                    LootList.OffSpec = response.OffSpec;
                    StateHasChanged();
                }
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}