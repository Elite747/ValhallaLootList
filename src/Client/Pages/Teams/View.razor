@page "/Teams/{team}"
@inject ApiClient Api
@inject IDialogService DialogService
@inject TeamsSource TeamsSource 

<ApiExecutor Operation="() => Api.Teams.Get(Team)" Context="team" @ref="_executor">
    <div class="d-flex align-center mb-3">
        <MudText Typo="Typo.h4" GutterBottom="false" Class="mr-2">@team.Name</MudText>
        <AuthorizeView Roles="@AppRoles.Administrator">
            <MudTooltip Text="Edit">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Edit" OnClick="() => EditAsync(team)" />
            </MudTooltip>
        </AuthorizeView>
    </div>

    @foreach (var schedule in team.Schedules)
    {
        var startDate = new DateTime(schedule.RealmTimeStart.Ticks);
        <MudText Typo="Typo.h6">
            @(schedule.Day)s from @(startDate.ToString("t", CultureInfo.CurrentCulture)) to @(startDate.Add(schedule.Duration).ToString("t", CultureInfo.CurrentCulture))
        </MudText>
    }

    <div class="d-flex">
        <MudButton Link="@($"teams/{team.Name}/standings")" Variant="Variant.Filled" Color="Color.Primary" Class="mr-3">View Loot Standings</MudButton>
        <AuthorizeLeaderView TeamId="@team.Id">
            <MudButton OnClick="() => StartRaid(team)" Variant="Variant.Filled" Color="Color.Primary">Start Raid</MudButton>
        </AuthorizeLeaderView>
    </div>

    <MudGrid Class="mt-5">
        <AuthorizeView Roles="@AppRoles.Administrator" Context="auth">
            <MudItem xs="12">
                <AdminView Team="team" User="auth.User" />
            </MudItem>
        </AuthorizeView>
        <MudItem xs="12" md="6">
            <TeamMembers Team="team" />
        </MudItem>
        <MudItem xs="12" md="6">
            <TeamRaids Team="team" />
        </MudItem>
    </MudGrid>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;

    [Parameter] public string Team { get; set; } = string.Empty;

    private void StartRaid(TeamDto team)
    {
        DialogService.Show<RaidStarter>("Start Raid", parameters: new() { [nameof(RaidStarter.Team)] = team });
    }

    private async Task EditAsync(TeamDto team)
    {
        var dto = await DialogService.ShowAsync<Create, TeamDto>("Edit Team", new() { [nameof(Create.EditingTeam)] = team });

        if (dto is not null)
        {
            team.Name = dto.Name;
            team.Schedules = dto.Schedules;
            await TeamsSource.RefreshAsync(Api);
        }
    }

    protected override Task OnParametersSetAsync() => _executor?.RestartAsync() ?? Task.CompletedTask;
}
