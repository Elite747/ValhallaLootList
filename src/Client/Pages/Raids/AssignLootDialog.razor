@inject ApiClient Api

@*<MudDialogScrollFix />*@
<MudDialog DisableSidePadding="true">
    <TitleContent>
        Assigning <ItemLink Id="Drop.ItemId" Bracketize="true" Colorize="true" LinkEnabled="true" PlaceholderText="Drop" />
    </TitleContent>
    <DialogContent>
        <ApiView Operation="_prioOperation" ExecuteImmediately="true">
            <SimpleTableEx Dense="true" Hover="true">
                <thead>
                    <tr>
                        <th>Priority</th>
                        <th>Characters</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prioGroup in _prioGroups)
                    {
                        <tr>
                            <td>
                                @(prioGroup.Key?.ToString() ?? "None")
                                @if (prioGroup.Key.HasValue && prioGroup.Count() > 1)
                                {
                                    <MudTooltip Text="Tied Priority!">
                                        <MudIcon Style="font-size: 1rem" Color="Color.Warning" Icon="@Icons.Material.Filled.Error" />
                                    </MudTooltip>
                                }
                            </td>
                            <td>
                                @foreach (var context in prioGroup)
                                {
                                    <AssignLootDialogChip Context="context" />
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </SimpleTableEx>
        </ApiView>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private readonly List<IGrouping<int?, AssignEntryContext>> _prioGroups = new();
    private IApiClientOperation<IList<ItemPrioDto>> _prioOperation = null!;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public EncounterDropDto Drop { get; set; } = null!;

    [Parameter] public RaidDto Raid { get; set; } = null!;

    protected override void OnInitialized()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Drop is null) throw new ArgumentNullException(nameof(Drop));
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
        _prioOperation = Api.Drops.GetPriorityRankings(Drop.Id).OnSuccess(ConfigureRows);
    }

    private void ConfigureRows(IList<ItemPrioDto> prios)
    {
        _prioGroups.Clear();
        _prioGroups.AddRange(Raid.Attendees
            .Select(attendee => new AssignEntryContext(Raid, Drop, attendee.Character, prios.FirstOrDefault(p => p.CharacterId == attendee.Character.Id)))
            .GroupBy(context => context.Prio)
            .OrderByDescending(g => g.Key));
    }
}