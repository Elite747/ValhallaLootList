// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValhallaLootList.Server.Data;

namespace ValhallaLootList.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210419032357_AddUniqueAndQuestIdToItems")]
    partial class AddUniqueAndQuestIdToItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Bracket", b =>
                {
                    b.Property<byte>("Phase")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint");

                    b.Property<bool>("AllowOffspec")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowTypeDuplicates")
                        .HasColumnType("bit");

                    b.Property<byte>("MaxItems")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MaxRank")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinRank")
                        .HasColumnType("tinyint");

                    b.HasKey("Phase", "Index");

                    b.ToTable("Brackets");

                    b.HasData(
                        new
                        {
                            Phase = (byte)1,
                            Index = (byte)0,
                            AllowOffspec = false,
                            AllowTypeDuplicates = false,
                            MaxItems = (byte)1,
                            MaxRank = (byte)18,
                            MinRank = (byte)15
                        },
                        new
                        {
                            Phase = (byte)1,
                            Index = (byte)1,
                            AllowOffspec = false,
                            AllowTypeDuplicates = false,
                            MaxItems = (byte)1,
                            MaxRank = (byte)14,
                            MinRank = (byte)11
                        },
                        new
                        {
                            Phase = (byte)1,
                            Index = (byte)2,
                            AllowOffspec = false,
                            AllowTypeDuplicates = false,
                            MaxItems = (byte)2,
                            MaxRank = (byte)10,
                            MinRank = (byte)7
                        },
                        new
                        {
                            Phase = (byte)1,
                            Index = (byte)3,
                            AllowOffspec = true,
                            AllowTypeDuplicates = true,
                            MaxItems = (byte)2,
                            MaxRank = (byte)6,
                            MinRank = (byte)1
                        });
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Character", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<bool>("IsFemale")
                        .HasColumnType("bit");

                    b.Property<int>("MemberStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VerifiedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.CharacterEncounterKill", b =>
                {
                    b.Property<long>("EncounterKillRaidId")
                        .HasColumnType("bigint");

                    b.Property<string>("EncounterKillEncounterId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.HasKey("EncounterKillRaidId", "EncounterKillEncounterId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EncounterKillEncounterId", "EncounterKillRaidId");

                    b.ToTable("CharacterEncounterKill");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.CharacterLootList", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Phase")
                        .HasColumnType("tinyint");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("MainSpec")
                        .HasColumnType("int");

                    b.Property<int>("OffSpec")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CharacterId", "Phase");

                    b.ToTable("CharacterLootLists");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Donation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CopperAmount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DonatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("EnteredById")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RemovalId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Drop", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("AwardedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("AwardedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EncounterKillEncounterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("EncounterKillRaidId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WinnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WinnerId");

                    b.HasIndex("EncounterKillEncounterId", "EncounterKillRaidId");

                    b.ToTable("Drops");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.DropPass", b =>
                {
                    b.Property<long>("DropId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LootListEntryId")
                        .HasColumnType("bigint");

                    b.Property<int>("RelativePriority")
                        .HasColumnType("int");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WonEntryId")
                        .HasColumnType("bigint");

                    b.HasKey("DropId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LootListEntryId");

                    b.HasIndex("RemovalId");

                    b.ToTable("DropPasses");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Encounter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.EncounterKill", b =>
                {
                    b.Property<string>("EncounterId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("RaidId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("KilledAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EncounterId", "RaidId");

                    b.HasIndex("RaidId");

                    b.ToTable("EncounterKills");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Instance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Phase")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Item", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("ArmorPenetration")
                        .HasColumnType("int");

                    b.Property<int>("BlockRating")
                        .HasColumnType("int");

                    b.Property<int>("BlockValue")
                        .HasColumnType("int");

                    b.Property<double>("DPS")
                        .HasColumnType("float");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Dodge")
                        .HasColumnType("int");

                    b.Property<string>("EncounterId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Expertise")
                        .HasColumnType("int");

                    b.Property<bool>("HasOnUse")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProc")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSpecial")
                        .HasColumnType("bit");

                    b.Property<int>("Haste")
                        .HasColumnType("int");

                    b.Property<int>("HealingPower")
                        .HasColumnType("int");

                    b.Property<int>("HealthPer5")
                        .HasColumnType("int");

                    b.Property<int>("Intellect")
                        .HasColumnType("int");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("int");

                    b.Property<int>("ManaPer5")
                        .HasColumnType("int");

                    b.Property<int>("MeleeAttackPower")
                        .HasColumnType("int");

                    b.Property<int>("MeleeCrit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<int>("Parry")
                        .HasColumnType("int");

                    b.Property<byte>("Phase")
                        .HasColumnType("tinyint");

                    b.Property<int>("PhysicalHit")
                        .HasColumnType("int");

                    b.Property<long>("QuestId")
                        .HasColumnType("bigint");

                    b.Property<int>("RangedAttackPower")
                        .HasColumnType("int");

                    b.Property<int>("RangedCrit")
                        .HasColumnType("int");

                    b.Property<int>("Resilience")
                        .HasColumnType("int");

                    b.Property<long?>("RewardFromId")
                        .HasColumnType("bigint");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<int>("Sockets")
                        .HasColumnType("int");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.Property<int>("SpellCrit")
                        .HasColumnType("int");

                    b.Property<int>("SpellHaste")
                        .HasColumnType("int");

                    b.Property<int>("SpellHit")
                        .HasColumnType("int");

                    b.Property<int>("SpellPenetration")
                        .HasColumnType("int");

                    b.Property<int>("SpellPower")
                        .HasColumnType("int");

                    b.Property<int>("Spirit")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("TopEndDamage")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UsableClasses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.HasIndex("RewardFromId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.ItemRestriction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Automated")
                        .HasColumnType("bit");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RestrictionLevel")
                        .HasColumnType("int");

                    b.Property<int>("Specializations")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RestrictionLevel", "Specializations");

                    b.ToTable("ItemRestrictions");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.LootListEntry", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DropId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Justification")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("LootListCharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("LootListPhase")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DropId")
                        .IsUnique()
                        .HasFilter("[DropId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.HasIndex("LootListCharacterId", "LootListPhase");

                    b.ToTable("LootListEntries");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.LootListTeamSubmission", b =>
                {
                    b.Property<long>("LootListCharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("LootListPhase")
                        .HasColumnType("tinyint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("LootListCharacterId", "LootListPhase", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("LootListTeamSubmissions");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.PhaseDetails", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("PhaseDetails");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            StartsAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Raid", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<byte>("Phase")
                        .HasColumnType("tinyint");

                    b.Property<long>("RaidTeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RaidTeamId");

                    b.ToTable("Raids");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.RaidAttendee", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("RaidId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IgnoreAttendance")
                        .HasColumnType("bit");

                    b.Property<string>("IgnoreReason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("CharacterId", "RaidId");

                    b.HasIndex("RaidId");

                    b.HasIndex("RemovalId");

                    b.ToTable("RaidAttendees");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.RaidTeam", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RaidTeams");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.RaidTeamSchedule", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<long>("RaidTeamId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("RealmTimeStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RaidTeamId");

                    b.ToTable("RaidTeamSchedules");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.TeamRemoval", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("RemovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamRemovals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Character", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.RaidTeam", "Team")
                        .WithMany("Roster")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.CharacterEncounterKill", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Character", "Character")
                        .WithMany("EncounterKills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.EncounterKill", "EncounterKill")
                        .WithMany("Characters")
                        .HasForeignKey("EncounterKillEncounterId", "EncounterKillRaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("EncounterKill");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.CharacterLootList", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Character", "Character")
                        .WithMany("CharacterLootLists")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Donation", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Character", "Character")
                        .WithMany("Donations")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.TeamRemoval", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Character");

                    b.Navigation("Removal");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Drop", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Item", "Item")
                        .WithMany("Drops")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.Character", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ValhallaLootList.Server.Data.EncounterKill", "EncounterKill")
                        .WithMany("Drops")
                        .HasForeignKey("EncounterKillEncounterId", "EncounterKillRaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncounterKill");

                    b.Navigation("Item");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.DropPass", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.Drop", "Drop")
                        .WithMany("Passes")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.LootListEntry", "LootListEntry")
                        .WithMany("Passes")
                        .HasForeignKey("LootListEntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ValhallaLootList.Server.Data.TeamRemoval", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Character");

                    b.Navigation("Drop");

                    b.Navigation("LootListEntry");

                    b.Navigation("Removal");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Encounter", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Instance", "Instance")
                        .WithMany("Encounters")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.EncounterKill", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Encounter", "Encounter")
                        .WithMany()
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.Raid", "Raid")
                        .WithMany("Kills")
                        .HasForeignKey("RaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");

                    b.Navigation("Raid");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Item", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Encounter", "Encounter")
                        .WithMany("Items")
                        .HasForeignKey("EncounterId");

                    b.HasOne("ValhallaLootList.Server.Data.Item", "RewardFrom")
                        .WithMany()
                        .HasForeignKey("RewardFromId");

                    b.Navigation("Encounter");

                    b.Navigation("RewardFrom");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.ItemRestriction", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Item", "Item")
                        .WithMany("Restrictions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.LootListEntry", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Drop", "Drop")
                        .WithOne("WinningEntry")
                        .HasForeignKey("ValhallaLootList.Server.Data.LootListEntry", "DropId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ValhallaLootList.Server.Data.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("ValhallaLootList.Server.Data.CharacterLootList", "LootList")
                        .WithMany("Entries")
                        .HasForeignKey("LootListCharacterId", "LootListPhase")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drop");

                    b.Navigation("Item");

                    b.Navigation("LootList");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.LootListTeamSubmission", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.RaidTeam", "Team")
                        .WithMany("Submissions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.CharacterLootList", "LootList")
                        .WithMany("Submissions")
                        .HasForeignKey("LootListCharacterId", "LootListPhase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LootList");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Raid", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.RaidTeam", "RaidTeam")
                        .WithMany("Raids")
                        .HasForeignKey("RaidTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RaidTeam");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.RaidAttendee", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Character", "Character")
                        .WithMany("Attendances")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.Raid", "Raid")
                        .WithMany("Attendees")
                        .HasForeignKey("RaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.TeamRemoval", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Character");

                    b.Navigation("Raid");

                    b.Navigation("Removal");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.RaidTeamSchedule", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.RaidTeam", "RaidTeam")
                        .WithMany("Schedules")
                        .HasForeignKey("RaidTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaidTeam");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.TeamRemoval", b =>
                {
                    b.HasOne("ValhallaLootList.Server.Data.Character", "Character")
                        .WithMany("Removals")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ValhallaLootList.Server.Data.RaidTeam", "Team")
                        .WithMany("Removals")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Character", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CharacterLootLists");

                    b.Navigation("Donations");

                    b.Navigation("EncounterKills");

                    b.Navigation("Removals");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.CharacterLootList", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Drop", b =>
                {
                    b.Navigation("Passes");

                    b.Navigation("WinningEntry");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Encounter", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.EncounterKill", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Drops");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Instance", b =>
                {
                    b.Navigation("Encounters");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Item", b =>
                {
                    b.Navigation("Drops");

                    b.Navigation("Restrictions");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.LootListEntry", b =>
                {
                    b.Navigation("Passes");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.Raid", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Kills");
                });

            modelBuilder.Entity("ValhallaLootList.Server.Data.RaidTeam", b =>
                {
                    b.Navigation("Raids");

                    b.Navigation("Removals");

                    b.Navigation("Roster");

                    b.Navigation("Schedules");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
