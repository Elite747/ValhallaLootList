@inject ApiClient Api

<MudDialogScrollFix />
<EditForm OnValidSubmit="OnSubmitAsync" Model="Input">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <MudDialog>
        <DialogContent>
            <MudSelect Label="Encounter"
                        @bind-Value="Input.EncounterId"
                        For="() => Input.EncounterId">
                @foreach (var instance in Input.Instances)
                {
                    <MudText Typo="Typo.h6">@instance.Name</MudText>
                    @foreach (var encounter in instance.Encounters)
                    {
                        <MudSelectItem Value="encounter.Id">@encounter.Name</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudGrid Class="mt-3">
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2">Drops</MudText>
                    @foreach (var itemId in Input.Drops.Keys)
                    {
                        var localItemId = itemId;
                        <div class="d-flex align-center py-1">
                            <CascadingItemContext Id="itemId">
                                <MudAvatar Class="mr-2" Rounded="true" Size="Size.Large">
                                    <ItemIcon Size="IconSize.Large" Width="56" Height="56" />
                                </MudAvatar>
                                <div class="mr-auto">
                                    <div>
                                        <ItemLink Colorize="true" />
                                    </div>
                                    <MudChipSet SelectedChipChanged="chip => Input.Drops[localItemId] = ((int?)chip?.Tag) ?? 0">
                                        <MudChip Tag="@(0)" Default="true">0</MudChip>
                                        <MudChip Tag="@(1)">1</MudChip>
                                        <MudChip Tag="@(2)">2</MudChip>
                                        <MudChip Tag="@(3)">3</MudChip>
                                    </MudChipSet>
                                </div>
                            </CascadingItemContext>
                        </div>
                    }
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2">Present Raiders</MudText>
                    <MudList Clickable="true" Dense="true">
                        @foreach (var character in Input.Raid.Attendees.Select(a => a.Character!))
                        {
                            var id = character.Id;
                            <MudListItem Icon="@(Input.Attendees.Contains(id) ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)"
                                         OnClick="() => Input.ToggleAttendee(id)"
                                         Text="@character.Name" />
                        }
                    </MudList>
                </MudItem>
            </MudGrid>

            <MudValidationSummary />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private ProblemValidator? _problemValidator;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public AddKillInputModel Input { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Input is null) throw new ArgumentNullException(nameof(Input));
    }

    private async Task OnSubmitAsync()
    {
        var kill = new KillSubmissionDto
        {
            Characters = Input.Attendees.ToList(),
            EncounterId = Input.EncounterId
        };

        foreach (var (id, count) in Input.Drops)
        {
            for (int i = 0; i < count; i++)
            {
                kill.Drops.Add(id);
            }
        }

        await Api.Raids
            .AddKill(Input.Raid.Id, kill)
            .OnSuccess(kill =>
            {
                Input.Raid.Kills.Add(kill);
                Dialog.Close(DialogResult.Ok(true));
            })
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}