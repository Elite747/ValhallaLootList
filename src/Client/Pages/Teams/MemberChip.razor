<CharacterChip Character="Member.Character" Spec="_spec" OnClick="ToggleSelected" Disabled="Disabled">
    <div class="d-flex align-center">
        @Member.Character.Name
        @if (SelectionState == MemberSelectionState.Selected)
        {
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Success" Style="margin-left: 4px; margin-right: -12px" />
        }
        else if (SelectionState == MemberSelectionState.Standby)
        {
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ModeStandby" Color="Color.Info" Style="margin-left: 4px; margin-right: -12px" />
        }
    </div>
</CharacterChip>

@code {
    private Specializations _spec = Specializations.None;

    [Parameter] public MemberDto Member { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public MemberSelectionState SelectionState { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback<MemberSelectionState> SelectionStateChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Member is null) throw new ArgumentNullException(nameof(Member));

        var lootList = Member.LootLists.Find(ll => ll.Phase == Phase) ??
            Member.LootLists.Where(ll => ll.Status == LootListStatus.Locked).OrderByDescending(ll => ll.Phase).FirstOrDefault() ??
            Member.LootLists.OrderByDescending(ll => ll.Phase).FirstOrDefault();

        _spec = lootList?.MainSpec ?? Specializations.None;
    }

    private Task ToggleSelected()
    {
        SelectionState = SelectionState switch
        {
            MemberSelectionState.Selected => MemberSelectionState.Standby,
            MemberSelectionState.Standby => MemberSelectionState.Unselected,
            _ => MemberSelectionState.Selected
        };
        return SelectionStateChanged.InvokeAsync(SelectionState);
    }
}
