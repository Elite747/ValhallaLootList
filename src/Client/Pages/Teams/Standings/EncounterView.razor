<MudList Dense="true" Class="flex-grow-1">
    <MudListSubheader>
        <MudText Typo="Typo.h6">@Encounter.Name</MudText>
    </MudListSubheader>
    @foreach (var itemId in Encounter.Items)
    {
        if (Standings.TryGetValue(itemId, out var itemStandings) && itemStandings.Count != 0 && (ShowWon || itemStandings.Any(s => !s.Entry.Won)))
        {
            <MudDivider />
            <MudListItem>
                <div class="d-flex">
                    <div class="mr-3">
                        <CascadingItemContext Id="itemId">
                            <ItemIcon Size="IconSize.Small" />
                            <ItemLink LinkEnabled="true" Bracketize="true" Colorize="true" />
                        </CascadingItemContext>
                    </div>
                    <div class="mr-auto">
                        @foreach (var entry in itemStandings.Where(e => ShowWon || !e.Entry.Won).OrderByDescending(e => e.Prio).ThenBy(e => e.CharacterName))
                        {
                            <MudText Color="entry.Entry.Won ? Color.Success : Color.Default">
                                @if (entry.Prio.HasValue && !entry.Entry.Won)
                                {
                                    <MudTooltip>
                                        <TooltipContent>
                                            <div>
                                                Rank @entry.Entry.Rank
                                            </div>
                                            @foreach (var bonus in entry.Bonuses)
                                            {
                                                <div>
                                                    <PriorityBonusDisplay Bonus="bonus" />
                                                </div>
                                            }
                                        </TooltipContent>
                                        <ChildContent>
                                            @entry.CharacterName (@entry.Prio.Value)
                                        </ChildContent>
                                    </MudTooltip>
                                }
                                else
                                {
                                    @entry.CharacterName
                                }
                            </MudText>
                        }
                    </div>
                </div>
            </MudListItem>
        }
    }
</MudList>

@code {
    [Parameter] public EncounterDto Encounter { get; set; } = null!;
    [Parameter] public Dictionary<uint, List<StandingContext>> Standings { get; set; } = null!;
    [Parameter] public bool ShowWon { get; set; }

    protected override void OnParametersSet()
    {
        if (Encounter is null) throw new ArgumentNullException(nameof(Encounter));
        if (Standings is null) throw new ArgumentNullException(nameof(Standings));
    }
}