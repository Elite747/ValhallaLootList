@page "/characters"
@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject TeamsSource TeamsSource

<PageTitle Title="Characters" />
<div class="layout-container content">
    <div class="d-flex align-center mb-3">
        <MudText Typo="Typo.h4" GutterBottom="false">Characters</MudText>

        <AuthorizeView Context="auth">
            <MudTooltip Text="Add Character">
                <MudIconButton OnClick="() => CreateClickedAsync(auth)" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />
            </MudTooltip>
        </AuthorizeView>

        <MudTooltip Text="Refresh">
            <MudIconButton OnClick="() => _executor?.RestartAsync() ?? Task.CompletedTask" Icon="@Icons.Material.Filled.Refresh" />
        </MudTooltip>
    </div>

    <ApiExecutor Operation="Api.Characters.GetAll" @ref="_executor" Context="characters">
        <MudPaper Elevation="5" Class="layout-container content">
            <MudList DisablePadding Clickable Class="layout-container content">
                <MudListSubheader>
                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <MudTextField @bind-Value="_searchText"
                                          Immediate="true"
                                          Label="Find Character"
                                          Variant="Variant.Filled"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Filled.Search" />

                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect @bind-SelectedValues="_searchClasses"
                                       MultiSelection="true"
                                       Variant="Variant.Filled"
                                       Label="Class"
                                       ToStringFunc="ClassesExtensions.GetDisplayName"
                                       T="Classes">
                                @foreach (var c in _allClasses)
                                {
                                    <MudSelectItem T="Classes" Value="@c">
                                        <div class="d-flex align-center">
                                            <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                                                <ClassIcon PlayerClass="c" Size="IconSize.Medium" Width="24" Height="24" />
                                            </MudAvatar>
                                            <span>@c.GetDisplayName()</span>
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>

                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect @bind-SelectedValues="_searchTeams"
                                       MultiSelection="true"
                                       Variant="Variant.Filled"
                                       Label="Team"
                                       ToStringFunc='team => team?.Name ?? "No Team"'
                                       T="TeamNameDto">
                                <MudSelectItem T="TeamNameDto" Value="null">No Team</MudSelectItem>
                                @foreach (var team in TeamsSource.Teams)
                                {
                                    <MudSelectItem T="TeamNameDto" Value="team" @key="team.Id">@team.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudCheckBox Label="Show Deactivated" @bind-Checked="_showDeactivated" />
                        </MudItem>
                        <AuthorizeView Policy="@AppPolicies.Administrator">
                            <MudItem xs="12" md="4">
                                <MudCheckBox Label="Only Unverified" @bind-Checked="_onlyUnverified" />
                            </MudItem>
                        </AuthorizeView>
                    </MudGrid>
                </MudListSubheader>
                <div class="content">
                    <Virtualize TItem="CharacterDto" Items="EnumerateCharacters(characters)" Context="character">
                        <MudListItem Href="@("characters/" + character.Name)" @key="character.Id">
                            <CharacterRow Character="character" />
                        </MudListItem>
                    </Virtualize>
                </div>
            </MudList>
        </MudPaper>
    </ApiExecutor>
</div>


@code {
    private readonly List<CharacterDto> _filteredList = new();
    private ApiExecutor<IList<CharacterDto>>? _executor;
    private string _searchText = string.Empty;
    private HashSet<Classes> _searchClasses = new();
    private HashSet<TeamNameDto?> _searchTeams = new();
    private bool _showDeactivated, _onlyUnverified;
    private static readonly Classes[] _allClasses = new[] {
        Classes.Druid,
        Classes.Hunter,
        Classes.Mage,
        Classes.Paladin,
        Classes.Priest,
        Classes.Rogue,
        Classes.Shaman,
        Classes.Warlock,
        Classes.Warrior
    };

    protected override async Task OnInitializedAsync()
    {
        await TeamsSource.EnsureStartedAsync(Api);
    }

    private ICollection<CharacterDto> EnumerateCharacters(IList<CharacterDto> characters)
    {
        if (characters.Count > 0)
        {
            IEnumerable<CharacterDto> en = characters;

            if (_searchText?.Length > 0)
            {
                const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
                en = en.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
            }

            if (_searchClasses?.Count > 0)
            {
                en = en.Where(ch => _searchClasses.Contains(ch.Class));
            }

            if (_searchTeams?.Count > 0)
            {
                en = en.Where(ch => _searchTeams.Any(team => team?.Id == ch.TeamId));
            }

            if (!_showDeactivated)
            {
                en = en.Where(ch => !ch.Deactivated);
            }

            if (_onlyUnverified)
            {
                en = en.Where(ch => !ch.Verified);
            }

            if (en != characters)
            {
                _filteredList.Clear();
                if (_filteredList.Capacity < characters.Count)
                {
                    _filteredList.Capacity = characters.Count;
                }
                _filteredList.AddRange(en);
                return _filteredList;
            }
        }
        return characters;
    }

    private async Task CreateClickedAsync(AuthenticationState auth)
    {
        var character = await DialogService.ShowAsync<Create, CharacterDto>(
            "Create Character",
            parameters: new()
            {
                [nameof(Create.AllowSubmitNonOwned)] = auth.User.IsAdmin(),
                [nameof(Create.DefaultSenderIsOwner)] = true
            },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (character is not null)
        {
            Nav.NavigateTo("/characters/" + character.Name);
        }
    }
}
