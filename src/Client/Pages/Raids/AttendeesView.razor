@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudCard Elevation="3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Attendees</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudList>
        @foreach (var attendance in Raid.Attendees.OrderBy(a => a.Character.Name))
        {
            var character = attendance.Character;
            <MudDivider />
            <MudListItem Class="mud-list-item-clickable" Style="cursor: auto" @key="character.Id">
                <div class="d-flex">
                    <PlayerIcon Race="character.Race"
                                Gender="character.Gender"
                                PlayerClass="character.Class"
                                Spec="attendance.MainSpec ?? Specializations.None"
                                ShowTooltip="true"
                                Class="mr-5" />
                    <div class="mr-auto">
                        <MudText Inline="false">@character.Name</MudText>
                        @if (attendance.IgnoreAttendance)
                        {
                            <MudText Typo="Typo.caption" Inline="false" Color="Color.Error">Attendance Ignored: @attendance.IgnoreReason</MudText>
                        }
                    </div>
                    <AuthorizeView Policy="@AppPolicies.LootMasterOrAdmin" Context="auth">
                        @if (Raid.LocksAt > DateTimeOffset.UtcNow || auth.User.IsAdmin())
                        {
                            <MudTooltip Text="Edit">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Inherit" OnClick="() => OnEditClickedAsync(attendance)" />
                            </MudTooltip>
                        }
                        @if (Raid.LocksAt > DateTimeOffset.UtcNow && !Raid.Kills.Any(kill => kill.Characters.Contains(character.Id)))
                        {
                            <MudTooltip Text="Remove">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnRemoveClickedAsync(character)" />
                            </MudTooltip>
                        }
                    </AuthorizeView>
                </div>
            </MudListItem>
        }
        <MudDivider />
    </MudList>
    <MudCardActions>
        @if (Raid.LocksAt > DateTimeOffset.UtcNow)
        {
            <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                <MudButton OnClick="AddRosteredAsync" Variant="Variant.Text" Color="Color.Primary" Class="mr-2">Add Rostered Member</MudButton>
                <MudButton OnClick="AddUnrosteredAsync" Variant="Variant.Text" Color="Color.Primary">Add Unrostered Member</MudButton>
            </AuthorizeView>
        }
    </MudCardActions>
</MudCard>


@code {

    [Parameter] public RaidDto Raid { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
    }

    private Task OnRemoveClickedAsync(CharacterDto character)
    {
        return Api.Raids.RemoveAttendee(Raid.Id, character.Id)
            .OnSuccess(_ =>
            {
                Raid.Attendees.RemoveAll(c => c.Character.Id == character.Id);
                StateHasChanged();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task OnEditClickedAsync(AttendanceDto attendance)
    {
        return DialogService.Show<UpdateAttendanceDialog>(
            "Update Attendance",
            new() { [nameof(UpdateAttendanceDialog.Attendance)] = attendance, [nameof(UpdateAttendanceDialog.Raid)] = Raid },
            new() { MaxWidth = MaxWidth.ExtraSmall }).Result;
    }

    private Task AddRosteredAsync()
    {
        return AddAttendeeAsync(() => Api.Characters.GetByTeam(Raid.TeamId), FilterCharacters, showAdd: false);
    }

    private Task AddUnrosteredAsync()
    {
        return AddAttendeeAsync(Api.Characters.GetAll, c => c.TeamId != Raid.TeamId && FilterCharacters(c), showAdd: true);
    }

    private async Task AddAttendeeAsync(Func<IApiClientOperation<IList<CharacterDto>>> operation, Func<CharacterDto, bool> filter, bool showAdd)
    {
        var character = await DialogService.ShowAsync<PickCharacterDialog, CharacterDto>(
            string.Empty,
            new() { [nameof(PickCharacterDialog.Operation)] = operation, [nameof(PickCharacterDialog.Filter)] = filter, [nameof(PickCharacterDialog.ShowAdd)] = showAdd },
            new() { NoHeader = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (character is not null)
        {
            await Api.Raids.AddAttendee(Raid.Id, character.Id)
                .OnSuccess(attendance =>
                {
                    attendance.Character = character;
                    Raid.Attendees.Add(attendance);
                    StateHasChanged();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private bool FilterCharacters(CharacterDto character)
    {
        return Raid.Attendees.Find(a => a.Character.Id == character.Id) is null;
    }
}
