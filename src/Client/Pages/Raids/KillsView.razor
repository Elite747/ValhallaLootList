@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Nav

@foreach (var kill in Raid.Kills)
{
    var localKill = kill;
    <MudCard Class="my-4" Elevation="3" @key="kill">
        <MudCardContent>
            <MudText Typo="Typo.h6">@kill.EncounterName</MudText>
            <MudText Typo="Typo.subtitle1">Killed by: @string.Join(", ", kill.Characters.Select(id => Raid.Attendees.Find(a => a.Character.Id == id)?.Character.Name).Where(str => str?.Length > 0).OrderBy(str => str))</MudText>
            <MudText Typo="Typo.subtitle1" GutterBottom="true">Recorded at <DateTimeDisplay Date="kill.KilledAt" Format="t" /></MudText>
            @if (Raid.LocksAt > DateTimeOffset.UtcNow && kill.Drops.All(drop => drop.WinnerId is null))
            {
                <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                    <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => DeleteAsync(localKill.EncounterId)">Delete</MudButton>
                </AuthorizeView>
            }
        </MudCardContent>
        <MudList>
            @foreach (var d in kill.Drops)
            {
                var drop = d;
                <MudDivider />
                <MudListItem Class="mud-list-item-clickable" Style="cursor: auto" @key="drop.Id">
                    <div class="d-flex">
                        <CascadingItemContext Id="drop.ItemId">
                            <MudAvatar Class="mr-5" Rounded="true">
                                <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                            </MudAvatar>
                            <div class="mr-auto">
                                <ItemLink LinkEnabled="true" Colorize="true" Bracketize="true" />
                                <MudText Color="drop.WinnerId is null ? Color.Error : Color.Success" Inline="false">Awarded to @GetWinnerName(drop.WinnerId).</MudText>
                            </div>
                        </CascadingItemContext>
                        @if (Raid.LocksAt > DateTimeOffset.UtcNow)
                        {
                            <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                                @if (drop.WinnerId is null)
                                {
                                    <MudButton OnClick="() => BeginAssignAsync(drop)" Variant="Variant.Text" Color="Color.Primary">Assign</MudButton>
                                }
                                else
                                {
                                    <MudButton OnClick="() => AssignAsync(drop, null)" Variant="Variant.Text" Color="Color.Error">Unassign</MudButton>
                                }
                            </AuthorizeView>
                        }
                    </div>
                </MudListItem>
            }
        </MudList>
    </MudCard>
}

@if (Raid.LocksAt > DateTimeOffset.UtcNow)
{
    <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
        <MudButton OnClick="AddClickedAsync"
                   StartIcon="@Icons.Material.Filled.Add"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="@(Raid.Kills.Count == 0 ? "mt-3" : null)">
            Add Kill
        </MudButton>

        @if (Raid.Kills.Count == 0)
        {
            <MudButton OnClick="DeleteRaidAsync"
                       StartIcon="@Icons.Material.Filled.Delete"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       Class="mt-3 ml-3">
                Delete Raid
            </MudButton>
        }
    </AuthorizeView>
}


@code {
    [Parameter] public RaidDto Raid { get; set; } = null!;
}
