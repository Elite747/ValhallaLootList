@page "/Teams/{teamName}"
@page "/Teams/{teamName}/Phase/{Phase:int}/{Tab?}"
@inject ApiClient Api
@inject IDialogService DialogService
@inject TeamsSource TeamsSource
@inject NavigationManager Nav

<ApiExecutor Operation="Api.GetPhaseConfiguration" Context="phaseConfig">
    <ApiExecutor Operation="() => Api.Teams.Get(TeamName)" Context="team" @ref="_executor" BackgroundRefresh="true">
        <AppPageTitle Title="@GetTitle(team)" />
        <MudGrid>
            <MudItem xs="12" md="6">
                <div class="d-flex align-center mb-3">
                    <MudText Typo="Typo.h4" GutterBottom="false" Color="team.Inactive ? Color.Error : default">@team.Name</MudText>
                    <AuthorizeView Policy="@AppPolicies.Administrator">
                        <MudTooltip Text="Edit" Class="ml-2">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditAsync(team)" />
                        </MudTooltip>
                    </AuthorizeView>
                </div>
                @foreach (var schedule in team.Schedules.OrderBy(s => s.Day >= DayOfWeek.Tuesday ? s.Day : (s.Day + 7)))
                {
                    <ScheduleDisplay Schedule="schedule" Typo="Typo.h6" ShowIcon="true" />
                }
            </MudItem>

            <MudItem xs="12" md="6">
                <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
                    <Success>
                        <MudSelect T="byte"
                                   Value="GetDisplayPhase(phaseConfig)"
                                   ValueChanged="OnPhaseChanged"
                                   Label="Phase"
                                   Variant="Variant.Outlined"
                                   OffsetX="false"
                                   OffsetY="false"
                                   Dense="true"
                                   ToStringFunc="@(phase => $"Phase {phase} ({string.Join(", ", instances.Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name))})")">
                            @foreach (var phase in phaseConfig.Phases.OrderBy(p => p))
                            {
                                <MudSelectItem T="byte" Value="phase">
                                    Phase @phase (@string.Join(", ", instances.Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name)))
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </Success>
                    <Failure>
                        <MudSelect T="byte"
                                   Value="GetDisplayPhase(phaseConfig)"
                                   ValueChanged="OnPhaseChanged"
                                   Label="Phase"
                                   Variant="Variant.Filled"
                                   OffsetX="false"
                                   OffsetY="false"
                                   Dense="true"
                                   ToStringFunc="@(phase => $"Phase {phase}")">
                            @foreach (var phase in phaseConfig.Phases.OrderBy(p => p))
                            {
                                <MudSelectItem T="byte" Value="phase">Phase @phase</MudSelectItem>
                            }
                        </MudSelect>
                    </Failure>
                </ApiExecutor>
            </MudItem>
        </MudGrid>

        <MudTabs Class="my-5" KeepPanelsAlive="false" Elevation="5" Rounded ActivePanelIndex="GetTabIndex()" ActivePanelIndexChanged="i => OnTabChanged(i, phaseConfig)">
            <Header>
                <MudTooltip Text="Refresh">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="OnRefreshClickedAsync" />
                </MudTooltip>
            </Header>
            <ChildContent>
                <MudTabPanel Text=@($"Roster ({team.Roster.Count}/{team.Size})")>
                </MudTabPanel>
                <MudTabPanel Text="Leaders">
                </MudTabPanel>
                <MudTabPanel Text="Charts">
                </MudTabPanel>
                <MudTabPanel Text="Standings">
                </MudTabPanel>
                <MudTabPanel Text="Recent Raids">
                </MudTabPanel>
                <AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="team.Id">
                    <MudTabPanel Text="Loot List Review">
                    </MudTabPanel>
                </AuthorizeView>
            </ChildContent>
        </MudTabs>

        <div class="content layout-container">
            @switch (GetTabIndex())
            {
                case 0:
                    <TeamMembers Team="team" SelectedPhase="GetSelectedPhase()" CurrentPhase="phaseConfig.CurrentPhase" />
                    break;
                case 1:
                    <LeadersView Team="team" @ref="_leadersView" />
                    break;
                case 2:
                    <ChartsView Team="team" Phase="GetDisplayPhase(phaseConfig)" />
                    break;
                case 3:
                    <StandingsView Team="team" Phase="GetDisplayPhase(phaseConfig)" @ref="_standings" />
                    break;
                case 4:
                    <TeamRaids Team="team" Phase="GetDisplayPhase(phaseConfig)" @ref="_teamRaids" />
                    break;
                case 5:
                    <AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="team.Id">
                        <Review Team="team"
                                StatusUpdated="arg => OnReviewStatusUpdated(arg, team, context.User)"
                                RosterChanged="StateHasChanged"
                                Phase="GetDisplayPhase(phaseConfig)"
                                @ref="_review" />
                    </AuthorizeView>
                    break;
            }
        </div>
    </ApiExecutor>
</ApiExecutor>

@code {
    private StandingsView? _standings;
            private IApiExecutor? _executor;
            private TeamRaids? _teamRaids;
            private Review? _review;
            private LeadersView? _leadersView;
            private string? _teamName;
            private bool _teamChanged;

    [Parameter]
#pragma warning disable BL0007 // Component parameters should be auto properties
            public string TeamName
#pragma warning restore BL0007 // Component parameters should be auto properties
            {
                get => _teamName ?? string.Empty;
                set
                {
                    if (_teamName != value)
                    {
                        _teamName = value;
                        _teamChanged = true;
                    }
                }
            }

            [Parameter]
            public int? Phase { get; set; }

            [Parameter]
            public string? Tab { get; set; }

            protected override Task OnParametersSetAsync()
            {
                if (_teamChanged)
                {
                    _teamChanged = false;
                    if (_executor is not null)
                    {
                        return _executor.RestartAsync(false);
                    }
                }
                return Task.CompletedTask;
            }

            private string GetTitle(TeamDto team)
            {
                if (Tab?.Length > 0)
                {
                    string? tabName = null;
                    if (string.Equals(Tab, "roster", StringComparison.OrdinalIgnoreCase))
                    {
                        tabName = "Roster";
                    }
                    else if (string.Equals(Tab, "leaders", StringComparison.OrdinalIgnoreCase))
                    {
                        tabName = "Leaders";
                    }
                    else if (string.Equals(Tab, "charts", StringComparison.OrdinalIgnoreCase))
                    {
                        tabName = "Charts";
                    }
                    else if (string.Equals(Tab, "standings", StringComparison.OrdinalIgnoreCase))
                    {
                        tabName = "Standings";
                    }
                    else if (string.Equals(Tab, "raids", StringComparison.OrdinalIgnoreCase))
                    {
                        tabName = "Raids";
                    }
                    else if (string.Equals(Tab, "review", StringComparison.OrdinalIgnoreCase))
                    {
                        tabName = "Review";
                    }
                    if (tabName?.Length > 0)
                    {
                        return $"{tabName} - {team.Name}";
                    }
                }
                return team.Name;
            }

            private int GetTabIndex()
            {
                if (string.Equals(Tab, "leaders", StringComparison.OrdinalIgnoreCase))
                {
                    return 1;
                }
                if (string.Equals(Tab, "charts", StringComparison.OrdinalIgnoreCase))
                {
                    return 2;
                }
                if (string.Equals(Tab, "standings", StringComparison.OrdinalIgnoreCase))
                {
                    return 3;
                }
                if (string.Equals(Tab, "raids", StringComparison.OrdinalIgnoreCase))
                {
                    return 4;
                }
                if (string.Equals(Tab, "review", StringComparison.OrdinalIgnoreCase))
                {
                    return 5;
                }
                return 0;
            }

            private string GetTabFromIndex(int index) => index switch
            {
                1 => "leaders",
                2 => "charts",
                3 => "standings",
                4 => "raids",
                5 => "review",
                _ => "roster"
            };

            private void OnTabChanged(int index, PhaseConfigDto phaseConfig)
            {
                string tabName = GetTabFromIndex(index);

                if (!string.Equals(tabName, Tab, StringComparison.OrdinalIgnoreCase))
                {
                    Tab = tabName;
                    Nav.NavigateTo($"teams/{TeamName}/phase/{GetSelectedPhase() ?? phaseConfig.CurrentPhase}/{GetTabFromIndex(index)}");
                }
            }

            private byte GetDisplayPhase(PhaseConfigDto phaseConfig)
            {
                var phase = GetSelectedPhase();
                if (phase.HasValue)
                {
                    if (phaseConfig.Phases.Contains(phase.Value))
                    {
                        return phase.Value;
                    }
                }
                return phaseConfig.CurrentPhase;
            }

            private byte? GetSelectedPhase()
            {
                return Phase is > 0 and <= byte.MaxValue ? (byte)Phase : null;
            }

    private void OnPhaseChanged(byte phase)
    {
        Nav.NavigateTo($"teams/{TeamName}/phase/{phase}/{Tab}");
    }

    private async Task OnRefreshClickedAsync()
    {
        if (_executor is not null)
        {
            await _executor.RestartAsync();
        }
        if (_leadersView is not null)
        {
            await _leadersView.RefreshAsync();
        }
        //if (_standings is not null)
        //{
            //await _standings.RefreshAsync();
        //}
        if (_teamRaids is not null)
        {
            await _teamRaids.RefreshAsync();
        }
        if (_review is not null)
        {
            await _review.RefreshAsync();
        }
    }

    private async Task EditAsync(TeamDto team)
    {
        var dto = await DialogService.ShowAsync<Create, TeamDto>("Edit Team", new() { [nameof(Create.EditingTeam)] = team });

        if (dto is not null)
        {
            team.Name = dto.Name;
            team.Schedules = dto.Schedules;
            await TeamsSource.RefreshAsync(Api);
        }
    }

    private void OnReviewStatusUpdated(LootListDto arg, TeamDto team, System.Security.Claims.ClaimsPrincipal user)
    {
        var lootList = team.Roster.Find(m => m.Character.Id == arg.CharacterId)?.LootLists.Find(l => l.Phase == arg.Phase);

        if (lootList is not null)
        {
            lootList.Status = arg.Status;

            if (arg.ApprovedBy.HasValue)
            {
                lootList.Approved = true;
                var guildMember = user.CreateGuildMember();
                if (guildMember?.Id == arg.ApprovedBy)
                {
                    lootList.ApprovedBy = guildMember.GetDisplayName();
                }
            }
            else
            {
                lootList.Approved = false;
                lootList.ApprovedBy = null;
            }
        }
    }
}
