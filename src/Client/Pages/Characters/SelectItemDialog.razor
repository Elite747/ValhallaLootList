<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 70vh; overflow-y: scroll">
            @if (Context.Items is not null)
            {
                @foreach (var itemTypeGroup in Context.Items.Where(item => !DisallowedItems.Contains(item.Id)).GroupBy(item => new ItemGroup(item.Type, item.Slot)).OrderBy(g => g.Key))
                {
                    <div class="card mb-2 shadow">
                        <div class="card-body font-weight-bold">@itemTypeGroup.Key.Name</div>
                        <div class="list-group list-group-flush">
                            @foreach (var item in itemTypeGroup.OrderBy(item => item.Name))
                            {
                                <ItemLink Id="item.Id"
                                          @onclick="() => Dialog.Close(DialogResult.Ok(item.Id))"
                                          class="list-group-item list-group-item-action d-flex justify-content-between align-items-center p-1 pl-4">
                                    <span>
                                        <ItemLinkIcon Size="IconSize.Small" />
                                        <ItemLinkText OverrideText="@item.Name" Colorize="true" />
                                    </span>
                                    <span>
                                        @if (LootList.MainSpec.HasValue)
                                        {
                                            <RestrictionStatus Restrictions="item.Restrictions.Where(r => (r.Specs & LootList.MainSpec.Value) != 0)"
                                                               SpecPrefix="@(LootList.OffSpec.HasValue ? "mainspec" : null)" />
                                        }

                                        @if (LootList.OffSpec.HasValue)
                                        {
                                            <RestrictionStatus Restrictions="item.Restrictions.Where(r => (r.Specs & LootList.OffSpec.Value) != 0)"
                                                               SpecPrefix="offspec" />
                                        }
                                    </span>
                                </ItemLink>
                            }
                        </div>
                    </div>
                }
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => Dialog.Close(DialogResult.Ok(0U))">Clear Selection</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public ItemSelectionContext Context { get; set; } = null!;

    [Parameter] public LootListSubmissionModel LootList { get; set; } = null!;

    [Parameter] public HashSet<uint> DisallowedItems { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Context is null) throw new ArgumentNullException(nameof(Context));
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
        if (DisallowedItems is null) throw new ArgumentNullException(nameof(DisallowedItems));
    }
}