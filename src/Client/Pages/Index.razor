@page "/"
@inject Data.Containers.AzureContainerProvider AzureContainerProvider

<PageTitle />

<MudContainer Class="d-flex justify-center">
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudPaper Class="ma-1 pa-1" Width="75%">
            <MudCarousel ItemsSource="@progress" SelectedIndex="@progressIndex" ShowDelimiters="false" AutoCycleTime="@timespan" Style="height:600px;">
                <ItemTemplate>
                    <img src=@context.progressUrl height="600" style="grid-area: 1 / 1 / 2 / 2; object-fit: cover; width: 100%" />
                    <img src=@context.logoUrl height="150" style="position: absolute; bottom: 0; right: 0" />
                </ItemTemplate>
            </MudCarousel>
        </MudPaper>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudPaper Class="ma-1 pa-1" Width="25%">
            <MudCarousel ItemsSource="@selfies" SelectedIndex="@selfieIndex" ShowDelimiters="false" AutoCycleTime="@timespan" Style="height:600px;">
                <ItemTemplate>
                    <img src=@context.Url height="600" style="grid-area: 1 / 1 / 2 / 2; object-fit: cover; width: 100%" />
                    <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Style="position: absolute; top: 0; left: 0; right: 0; text-shadow: 0px 3px 3px #000000;">@context.Simple</MudText>
                </ItemTemplate>
            </MudCarousel>
        </MudPaper>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
        <MudPaper Class="ma-1 pa-1" Width="100%">
            <MudCarousel ItemsSource="@progress" SelectedIndex="@progressIndex" ShowDelimiters="false" AutoCycleTime="@timespan" Style="height:600px;">
                <ItemTemplate>
                    <img src=@context.progressUrl height="600" style="grid-area: 1 / 1 / 2 / 2; object-fit: cover; width: 100%" />
                    <img src=@context.logoUrl height="150" style="position: absolute; bottom: 0; right: 0" />
                </ItemTemplate>
            </MudCarousel>
        </MudPaper>
    </MudHidden>
</MudContainer>
<MudDivider Class="ma-4" />
<MudText Typo="Typo.h5" Color="Color.Primary">Our Motto</MudText>
<MudText Typo="Typo.body1">Valhalla aims to create a friendly and fair environment that strives to support players in their PVE endeavors while maintaining a steady progression path.</MudText>
<MudDivider Class="ma-4" />
<MudText Typo="Typo.h5" Color="Color.Primary">Who We Are</MudText>
<MudText Typo="Typo.body1">We are mainly veterans of World of Warcraft but we also accept newcomers or casual players. Our primary interest is in raiding and dungeons but our members also host a variety of events in-and-out of game.</MudText>
<MudText Typo="Typo.body1">We only have two rules:</MudText>
<MudExpansionPanels MultiExpansion="true" Class="ma-4">
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h6">1) Be respectful</MudText>
        </TitleContent>
        <ChildContent>
            <MudText Typo="Typo.body1">In the most general sense, don’t disrespect other players via name-calling or grief other players by ruining their gaming experience on purpose.</MudText>
            <MudDivider Class="ma-4" />
            <li>DON’T interfere with other players in a way that endangers them</li>
            <li>DON’T kite mobs outside of the zone they spawned in</li>
            <li>DON’T train mobs onto other players</li>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h6">2) No political, religious, or pornographic content in guild channels</MudText>
        </TitleContent>
        <ChildContent>
            <MudText Typo="Typo.body1">As a large guild with members of many different cultural backgrounds, controversial or sensitive topics are best left to private discussions.</MudText>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    class Progress
    {
        public string progressUrl;
        public string logoUrl;

        public Progress(string boss, string team)
        {
            this.progressUrl = "https://valhallalootliststorage.blob.core.windows.net/progress/" + boss + "-" + team + ".png";
            this.logoUrl = "https://valhallalootliststorage.blob.core.windows.net/logos/" + team + "AlphaCropped.png";
        }
    }

    private static Random random = new Random();
    private TimeSpan timespan = TimeSpan.FromSeconds(60);
    private static IList<Progress> progress = new List<Progress>()
{
        new Progress("Ragnaros", "Fenrir"),
        new Progress("Ragnaros", "Nidhogg"),
        new Progress("Ragnaros", "Sleipnir"),
        new Progress("Ragnaros", "Jormungand"),
        new Progress("Ragnaros", "Valkyrie"),
        new Progress("Onyxia", "Fenrir"),
        new Progress("Onyxia", "Nidhogg"),
        new Progress("Onyxia", "Sleipnir"),
        new Progress("Onyxia", "Jormungand"),
        new Progress("Onyxia", "Valkyrie"),
        new Progress("Nefarian", "Fenrir"),
        new Progress("Nefarian", "Nidhogg"),
        new Progress("Nefarian", "Sleipnir"),
        new Progress("Nefarian", "Jormungand"),
        new Progress("Nefarian", "Valkyrie"),
        new Progress("C'thun", "Fenrir"),
        new Progress("C'thun", "Nidhogg"),
        new Progress("C'thun", "Sleipnir"),
        new Progress("C'thun", "Jormungand"),
        new Progress("C'thun", "Valkyrie"),
        new Progress("Kel'Thuzad", "Nidhogg"),
        new Progress("Kel'Thuzad", "Sleipnir"),
        new Progress("Kel'Thuzad", "Jormungand"),

        new Progress("Vanilla1", "Vanilla"),
        new Progress("Vanilla2", "Vanilla"),
        new Progress("Vanilla3", "Vanilla")
    };
    private int progressIndex = random.Next(progress.Count);
    private static IList<Data.Containers.Blob> selfies = new List<Data.Containers.Blob>()
{
        new Data.Containers.Blob("Placeholder", "https://valhallalootliststorage.blob.core.windows.net/selfies/Lirah.png")
    };
    private int selfieIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        Data.Containers.AzureContainerResponse result = await AzureContainerProvider.GetContainerAsync("selfies");
        selfies.Clear();
        foreach (Data.Containers.Blob blob in result.Blobs)
        {
            selfies.Add(blob);
        }
        StateHasChanged();
        selfieIndex = random.Next(selfies.Count);
        StateHasChanged();
    }
}
