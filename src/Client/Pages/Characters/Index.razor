@page "/characters"
@using System.Globalization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject ApiClient Api

<h1>Characters</h1>

<div class="form-inline">
    <label class="sr-only" for="filter">Find Character</label>
    <input type="text"
           class="form-control mr-sm-2 mb-2"
           id="filter"
           placeholder="Find Character..."
           disabled="@(_characters is null)"
           @bind-value="_searchText"
           @bind-value:event="oninput" />

    <button class="btn btn-primary mr-sm-2 mb-2" type="button" @onclick="RefreshAsync">
        <span class="fas fa-sync" aria-hidden="true"></span>
        <span class="sr-only">Refresh</span>
    </button>

    <button class="btn btn-primary mr-sm-2 mb-2" type="button" disabled="@(_characters is null)" @onclick="CreateClicked">Create Character</button>
</div>

@if (_characters is null)
{
    <LoadingIndicator />
}
else
{
    <Modal @ref="_createCharacterModal">
        @if (_createRequested)
        {
            <ModalBackdrop />
            <Create ParentModal="_createCharacterModal" />
        }
    </Modal>

    <div class="list-group">
        @foreach (var ch in EnumerateCharacters())
        {
            <a href="/characters/@ch.Name" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                <span>@ch.Name</span>
                <span>
                    <RaceIcon Race="ch.Race" Gender="ch.Gender" Size="IconSize.Small" />
                    <ClassIcon PlayerClass="ch.Class" Size="IconSize.Small" />
                </span>
            </a>
        }
    </div>
}

@code {
    private Modal? _createCharacterModal;
    private CharacterDto[]? _characters;
    private string _searchText = string.Empty;
    private bool _createRequested;

    protected override Task OnInitializedAsync()
    {
        return RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        try
        {
            _characters = null;
            _characters = await Api.GetAsync<CharacterDto[]>("api/v1/characters");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private IEnumerable<CharacterDto> EnumerateCharacters()
    {
        if (_characters?.Length > 0)
        {
            IEnumerable<CharacterDto> en = _characters;

            if (_searchText?.Length > 0)
            {
                const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
                en = en.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
            }

            return en;
        }
        return Array.Empty<CharacterDto>();
    }

    private void CreateClicked()
    {
        _createRequested = true;
        _createCharacterModal?.Show();
    }
}
