@inject ApiClient Api

<ApiExecutor Operation="Api.GetPhaseConfiguration" Context="phaseConfig">
    <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
        @foreach (var phase in phaseConfig.Brackets.Keys.OrderBy(p => p))
        {
            <ul class="nav nav-pills">
                <li class="nav-item">
                    <a class="nav-link disabled" tabindex="-1">Phase @phase</a>
                </li>
                @foreach (var instance in instances.Where(i => i.Phase == phase).OrderBy(i => i.Name))
                {
                    var id = instance.Id;

                    <li class="nav-item">
                        <a class="@(id == SelectedInstanceId ? "nav-link active" : "nav-link")" type="button" @onclick="() => ChangeSelectedInstanceId(id)">@instance.Name</a>
                    </li>
                }
            </ul>
        }
        @if (instances.FirstOrDefault(i => i.Id == SelectedInstanceId) is InstanceDto selectedInstance)
        {
            <InstanceView Instance="selectedInstance" />
        }
    </ApiExecutor>
</ApiExecutor>

@code {
    [Parameter] public string? SelectedInstanceId { get; set; }
    [Parameter] public EventCallback<string?> SelectedInstanceIdChanged { get; set; }

    private Task ChangeSelectedInstanceId(string? id)
    {
        SelectedInstanceId = id;
        return SelectedInstanceIdChanged.InvokeAsync(id);
    }
} 