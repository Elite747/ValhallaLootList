@page "/characters"
@inject ApiClient Api
@inject IDialogService DialogService

<h1>Characters</h1>

<MudPaper>
    <ApiExecutor Operation="Api.Characters.GetAll" @ref="_executor" Context="characters">
        <MudList Clickable="true">
            <MudListSubheader Class="d-flex align-baseline">
                <MudTextField @bind-Value="_searchText"
                              Immediate="true"
                              Label="Find Character"
                              Variant="Variant.Text"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Filled.Search" />

                <MudTooltip Text="Refresh Characters">
                    <MudIconButton OnClick="() => _executor?.RestartAsync()" Icon="@Icons.Material.Filled.Refresh" />
                </MudTooltip>

                <MudTooltip Text="Add Character">
                    <MudFab OnClick="CreateClicked" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />
                </MudTooltip>
            </MudListSubheader>
            @foreach (var ch in EnumerateCharacters(characters))
            {
                <MudListItem Href="@("characters/" + ch.Name)">
                    <RaceIcon Race="ch.Race" Gender="ch.Gender" Size="IconSize.Small" />
                    <ClassIcon PlayerClass="ch.Class" Size="IconSize.Small" />
                    <span>@ch.Name</span>
                </MudListItem>
            }
        </MudList>
    </ApiExecutor>
</MudPaper>

@code {
    private ApiExecutor<IList<CharacterDto>>? _executor;
    private string _searchText = string.Empty;

    private IEnumerable<CharacterDto> EnumerateCharacters(IList<CharacterDto> characters)
    {
        if (characters.Count > 0 && _searchText?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            return characters.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
        }
        return characters;
    }

    private void CreateClicked()
    {
        DialogService.Show<Create>("Create Character");
    }
}
