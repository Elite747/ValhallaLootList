<MudChip DisableRipple="true" Size="Size.Small" Color="_color">
    <pre>@_text</pre>
</MudChip>

@code {
    private Color _color;
    private string? _text;

    [Parameter] public ICollection<RestrictionDto> Restrictions { get; set; } = null!;
    [Parameter] public Specializations MainSpec { get; set; }
    [Parameter] public Specializations OffSpec { get; set; }
    [Parameter] public bool AllowOffSpec { get; set; }

    protected override void OnParametersSet()
    {
        if (Restrictions is null) throw new ArgumentNullException(nameof(Restrictions));

        // get the highest restriction for each spec (restricted > review > allowed)
        int msLevel = 0, osLevel = 0;
        foreach (var restriction in Restrictions)
        {
            if ((restriction.Specs & MainSpec) != 0)
            {
                msLevel = Math.Max(msLevel, GetRestrictionLevelOrdered(restriction.Level));
            }
            if (AllowOffSpec && OffSpec != 0 && (restriction.Specs & OffSpec) != 0)
            {
                osLevel = Math.Max(osLevel, GetRestrictionLevelOrdered(restriction.Level));
            }
        }

        // gets the least restrictive of either spec (allowed > review > restricted)
        int level = AllowOffSpec ? Math.Min(msLevel, osLevel) : msLevel;

        (_color, _text) = level switch
        {
            0 => (Color.Success, "Allowed"),
            1 => (Color.Warning, "Review"),
            _ => (Color.Error, "Restricted")
        };

        if (AllowOffSpec)
        {
            _text += GetApplicableSpecSuffix(msLevel, osLevel);
        }
    }

    private static int GetRestrictionLevelOrdered(ItemRestrictionLevel level)
    {
        return level switch
        {
            ItemRestrictionLevel.Restricted => 2,
            ItemRestrictionLevel.ManualReview => 1,
            _ => 3
        };
    }

    private static string GetApplicableSpecSuffix(int ms, int os)
    {
        if (ms == os)
        {
            return " (MS/OS)";
        }
        else if (ms < os)
        {
            return " (MS)";
        }
        else
        {
            return " (OS)";
        }
    }
}
