@page "/teams"
@inject ApiClient Api
@inject IDialogService DialogService
@inject NavigationManager Nav
@inject TeamsSource TeamsSource
@implements IDisposable

<PageTitle Title="Teams" />
<div class="d-flex align-center mb-3">
    <MudText Typo="Typo.h4" GutterBottom="false">Raid Teams</MudText>

    <AuthorizeView Policy="@AppPolicies.Administrator">
        <MudTooltip Text="Add Team">
            <MudIconButton OnClick="CreateClicked" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />
        </MudTooltip>
    </AuthorizeView>

    <MudTooltip Text="Refresh">
        <MudIconButton OnClick="() => TeamsSource.RefreshAsync(Api)" Icon="@Icons.Material.Filled.Refresh" />
    </MudTooltip>
</div>

<MudPaper Elevation="5">
    <MudList Clickable="true">
        @foreach (var team in TeamsSource.Teams)
        {
            <MudListItem Href="@("teams/" + team.Name)">
                <MudText Typo="Typo.h6" Inline="false">@team.Name</MudText>
                @foreach (var schedule in team.Schedules.OrderBy(s => s.Day >= DayOfWeek.Tuesday ? s.Day : (s.Day + 7)))
                {
                    <ScheduleDisplay Schedule="schedule" Typo="Typo.caption" />
                }
            </MudListItem>
        }
    </MudList>
</MudPaper>


@code {
    private async Task CreateClicked()
    {
        var dto = await DialogService.ShowAsync<Create, TeamDto>("Create Team");

        if (dto is not null)
        {
            Nav.NavigateTo("teams/" + dto.Name);
            await TeamsSource.RefreshAsync(Api);
        }
    }

    protected override void OnInitialized()
    {
        TeamsSource.Updated += StateHasChanged;
        TeamsSource.EnsureStarted(Api);
    }

    public void Dispose() => TeamsSource.Updated -= StateHasChanged;
}
