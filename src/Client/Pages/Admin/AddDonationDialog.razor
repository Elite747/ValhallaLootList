@inject ApiClient Api
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm OnValidSubmit="OnSubmit" Model="_donation" id="createDonationForm">
            <DataAnnotationsValidator />

            <ApiExecutor Operation="() => Api.Characters.GetActive()" Context="characters">
                <MudSelect Label="Character"
                           @bind-Value="_donation.CharacterId"
                           For="() => _donation.CharacterId"
                           ToStringFunc="id => characters.FirstOrDefault(c => c.Id == id)?.Name ?? string.Empty"
                           Variant="Variant.Filled">
                    @foreach (var character in characters)
                    {
                        <MudSelectItem T="long" Value="character.Id">@character.Name</MudSelectItem>
                    }
                </MudSelect>
            </ApiExecutor>

            <MudTextField Label="Item Donated" @bind-Value="_donation.Unit" For="() => _donation.Unit" Variant="Variant.Filled" Class="mt-3" />
            <MudNumericField Label="Donated Amount" @bind-Value="_donation.Amount" For="() => _donation.Amount" Variant="Variant.Filled" Class="mt-3" />
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" form="createDonationForm">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private readonly DonationSubmissionDto _donation = new() { Unit = "gold" };

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public int TargetMonth { get; set; }
    [Parameter] public int TargetYear { get; set; }

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));

        _donation.TargetMonth = TargetMonth;
        _donation.TargetYear = TargetYear;
    }

    private Task OnSubmit()
    {
        return Api.Donations.Add(_donation)
            .OnSuccess((DonationDto donation) =>
            {
                Dialog.Close(DialogResult.Ok(donation));
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}
