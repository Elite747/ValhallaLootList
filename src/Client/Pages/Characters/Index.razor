@page "/characters"
@using System.Globalization
@inject ApiClient Api

<h1>Characters</h1>

<div class="form-inline">
    <label class="sr-only" for="filter">Find Character</label>
    <input type="text"
           class="form-control mr-sm-2 mb-2"
           id="filter"
           placeholder="Find Character..."
           @bind-value="_searchText"
           @bind-value:event="oninput" />

    <button class="btn btn-primary mr-sm-2 mb-2" type="button" @onclick="() => _executor?.RestartAsync()">
        <span class="fas fa-sync" aria-hidden="true"></span>
        <span class="sr-only">Refresh</span>
    </button>

    <button class="btn btn-primary mr-sm-2 mb-2" type="button" @onclick="CreateClicked">Create Character</button>
</div>
<ApiExecutor Operation="Api.Characters.GetAll" @ref="_executor" Context="characters">
    <Modal @ref="_createCharacterModal">
        @if (_createRequested)
        {
            <ModalBackdrop />
            <Create ParentModal="_createCharacterModal" />
        }
    </Modal>

    <div class="list-group">
        @foreach (var ch in EnumerateCharacters(characters))
        {
            <a href="/characters/@ch.Name" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                <span>@ch.Name</span>
                <span>
                    <RaceIcon Race="ch.Race" Gender="ch.Gender" Size="IconSize.Small" />
                    <ClassIcon PlayerClass="ch.Class" Size="IconSize.Small" />
                </span>
            </a>
        }
    </div>
</ApiExecutor>

@code {
    private Modal? _createCharacterModal;
    private ApiExecutor<IList<CharacterDto>>? _executor;
    private string _searchText = string.Empty;
    private bool _createRequested;

    private IEnumerable<CharacterDto> EnumerateCharacters(IList<CharacterDto> characters)
    {
        if (characters.Count > 0 && _searchText?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            return characters.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
        }
        return characters;
    }

    private void CreateClicked()
    {
        _createRequested = true;
        _createCharacterModal?.Show();
    }
}
