@inject ApiClient Api
@inject PermissionManager Permissions

<AuthorizeView Context="auth">
    <EditForm OnValidSubmit="OnSubmit" Model="_character">
        <DataAnnotationsValidator />
        <ProblemValidator @ref="_problemValidator" />

        <MudDialog>
            <DialogContent>
                <MudTextField Label="Name"
                              HelperText="Enter the name exactly as it is spelled in-game."
                              @bind-Value="_character.Name"
                              For="() => _character.Name"
                              Variant="Variant.Filled" />
                <MudSelect Label="Gender"
                           Class="mt-3"
                           @bind-Value="_character.Gender"
                           For="() => _character.Gender"
                           Variant="Variant.Filled">
                    <MudSelectItem T="Gender?" Value="@Gender.Male">
                        <div class="d-flex align-center">
                            <MudAvatar Rounded="true" Image="images/male.png" Size="Size.Small" Class="mr-2" />
                            <span>Male</span>
                        </div>
                    </MudSelectItem>
                    <MudSelectItem T="Gender?" Value="@Gender.Female">
                        <div class="d-flex align-center">
                            <MudAvatar Rounded="true" Image="images/female.png" Size="Size.Small" Class="mr-2" />
                            <span>Female</span>
                        </div>
                    </MudSelectItem>
                </MudSelect>
                <MudSelect Label="Race"
                           Class="mt-3"
                           ValueChanged="(PlayerRace? race) => RaceChanged(race)"
                           Value="@_character.Race"
                           For="() => _character.Race"
                           ToStringFunc="r => r.HasValue ? r.Value.GetDisplayName() : string.Empty"
                           Variant="Variant.Filled">
                    @foreach (var race in _allRaces)
                    {
                        <MudSelectItem T="PlayerRace?" Value="@race" Disabled="!_classRaces.Contains(race)">
                            <div class="d-flex align-center">
                                <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                                    <RaceIcon Race="race" Gender="_character.Gender ?? Gender.Male" Size="IconSize.Medium" Width="24" Height="24" />
                                </MudAvatar>
                                <span>@race.GetDisplayName()</span>
                            </div>
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Label="Class"
                           Class="mt-3"
                           @bind-Value="_character.Class"
                           For="() => _character.Class"
                           Disabled="EditingCharacter is not null"
                           ToStringFunc="pc => pc == default ? string.Empty : pc.GetDisplayName()"
                           Variant="Variant.Filled">
                    @foreach (var playerClass in _allClasses)
                    {
                        <MudSelectItem T="Classes" Value="@playerClass" Disabled="!_raceClasses.Contains(playerClass)">
                            <div class="d-flex align-center">
                                <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                                    <ClassIcon PlayerClass="playerClass" Size="IconSize.Medium" Width="24" Height="24" />
                                </MudAvatar>
                                <span>@playerClass.GetDisplayName()</span>
                            </div>
                        </MudSelectItem>
                    }
                </MudSelect>
                @if (AllowSubmitNonOwned)
                {
                    <MudTooltip Text="When checked, indicates that this character is owned by you. Uncheck this if you are adding a character on someone's behalf."
                                Class="mt-3">
                        <MudCheckBox @bind-Checked="_character.SenderIsOwner"
                                     Label="This character is mine"
                                     For="() => _character.SenderIsOwner" />
                    </MudTooltip>
                }
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Submit</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
</AuthorizeView>

@code {
    private readonly CharacterSubmissionDto _character = new();
    private ProblemValidator? _problemValidator;
    private Classes[] _raceClasses = _allClasses;
    private PlayerRace[] _classRaces = _allRaces;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public CharacterDto? EditingCharacter { get; set; }
    [Parameter] public bool AllowSubmitNonOwned { get; set; }
    [Parameter] public bool DefaultSenderIsOwner { get; set; } = true;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));

        if (EditingCharacter is not null)
        {
            _character.Class = EditingCharacter.Class;
            _character.Gender = EditingCharacter.Gender;
            _character.Name = EditingCharacter.Name;
            _character.Race = EditingCharacter.Race;
            if (_raceLookup.TryGetValue(EditingCharacter.Class, out var classRaces))
            {
                _classRaces = classRaces;
            }
        }

        _character.SenderIsOwner = DefaultSenderIsOwner;
    }
}
