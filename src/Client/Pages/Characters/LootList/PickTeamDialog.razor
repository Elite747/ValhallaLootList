@inject ApiClient Api  
@inject TeamsSource Teams
@using ValhallaLootList.Client.Pages.Teams;

<MudDialog DisableSidePadding="true">
    <TitleContent>
        Select Teams
    </TitleContent>
    <DialogContent>
        <MudList Dense="true" Clickable="true">
            @foreach (var team in Teams.Teams)
            {
                <MudListItem Icon="@(_selectedTeams.Contains(team.Id) ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" OnClick="() => Toggle(team.Id)">
                    <MudText Typo="Typo.h6" Inline="false">@team.Name</MudText>
                    @foreach (var schedule in team.Schedules.OrderBy(s => s.Day >= DayOfWeek.Tuesday ? s.Day : (s.Day + 7)))
                    {
                        <ScheduleDisplay Schedule="schedule" Typo="Typo.caption" />
                    }
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton OnClick="() => Dialog.Close(DialogResult.Ok(_selectedTeams))" Color="Color.Primary" Variant="Variant.Filled" Disabled="_selectedTeams.Count == 0">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private readonly List<long> _selectedTeams = new();

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    protected override Task OnParametersSetAsync()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        return Teams.EnsureStartedAsync(Api).AsTask();
    }

    private void Toggle(long id)
    {
        if (!_selectedTeams.Remove(id))
        {
            _selectedTeams.Add(id);
        }
    }
}
