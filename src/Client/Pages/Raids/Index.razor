@page "/raids"
@page "/raids/{Year:int}/{Month:int}"
@implements IDisposable
@inject ApiClient Api
@inject ISnackbar Snackbar
@inject UserTimeProvider TimeProvider
@inject TeamsSource TeamsSource
@inject NavigationManager Nav

<EventCalendar Date="_date" DateChanged="OnDateChanged" Culture="CultureInfo.CurrentCulture" Elevation="5">
    <ChildContent>
        <MudOverlay Visible="_raidsLoading" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </MudOverlay>
    </ChildContent>
    <EventContent Context="date">
        @if (!_raidsLoading)
        {
            if (date >= TimeProvider.Today)
            {
                var teamsAdded = _raids.Where(r => TimeProvider.Convert(r.StartedAt).Date == date).Select(r => r.TeamId).ToHashSet();
                @foreach (var team in TeamsSource.Teams.Where(team => !teamsAdded.Contains(team.Id)))
                {
                    foreach (var schedule in team.Schedules.Select(s => new { s.Day, s.Duration, Date = TimeProvider.FromServerTimeOfDay(date, s.RealmTimeStart) }).Where(s => s.Day == s.Date.DayOfWeek))
                    {
                        <MudTooltip>
                            <TooltipContent>
                                <p>Team @team.Name scheduled raid</p>
                                <p>
                                    @schedule.Date.ToString("t", CultureInfo.CurrentCulture)
                                    -
                                    @schedule.Date.Add(schedule.Duration).ToString("t", CultureInfo.CurrentCulture)
                                </p>
                            </TooltipContent>
                            <ChildContent>
                                <div style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap" class="mx-1">
                                    <a href="teams/@team.Name"><MudIcon Style="font-size: 1rem; margin-bottom: -0.15rem" Icon="@Icons.Material.Filled.Schedule" /> @team.Name</a>
                                </div>
                            </ChildContent>
                        </MudTooltip>
                    }
                }
            }
            @foreach (var raid in _raids.Where(r => TimeProvider.Convert(r.StartedAt).Date == date))
            {
                <MudTooltip @key="raid.Id">
                    <TooltipContent>
                        <p>Team @raid.TeamName phase @raid.Phase raid</p>
                        <p>Started at @TimeProvider.Convert(raid.StartedAt).ToString("t", CultureInfo.CurrentCulture)</p>
                    </TooltipContent>
                    <ChildContent>
                        <div style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap" class="mx-1">
                            <a href="raids/@raid.Id"><MudIcon Style="font-size: 1rem; margin-bottom: -0.15rem" Icon="@GetNumIcon(raid.Phase)" /> @raid.TeamName</a>
                        </div>
                    </ChildContent>
                </MudTooltip>
            }
        }
    </EventContent>
</EventCalendar>

@code {
    private readonly List<RaidDto> _raids = new();
    private DateTime _date;
    private bool _raidsLoading;

    [Parameter] public int Month { get; set; }
    [Parameter] public int Year { get; set; }

    protected override void OnInitialized()
    {
        TimeProvider.ModeChanged += StateHasChanged;
        TeamsSource.Updated += StateHasChanged;
        TeamsSource.EnsureStarted(Api);
    }

    protected override Task OnParametersSetAsync()
    {
        var newDate = new DateTime(
            year: Year is >= 1 and <= 9999 ? Year : TimeProvider.Today.Year,
            month: Month is >= 1 and <= 12 ? Month : TimeProvider.Today.Month,
            day: 1);

        if (newDate != _date)
        {
            _date = newDate;
            _raids.Clear();
            _raidsLoading = true;
            return Api.Raids.GetForMonth(newDate.Year, newDate.Month)
                .OnSuccess(raids =>
                {
                    _raids.AddRange(raids);
                    _raidsLoading = false;
                })
                .OnFailure(_ =>
                {
                    _raidsLoading = false;
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }

        return Task.CompletedTask;
    }

    private void OnDateChanged(DateTime date)
    {
        Nav.NavigateTo($"raids/{date.Year:D4}/{date.Month:D2}");
    }

    private string GetNumIcon(int phase)
    {
        return phase switch
        {
            1 => Icons.Material.Filled.LooksOne,
            2 => Icons.Material.Filled.LooksTwo,
            3 => Icons.Material.Filled.Looks3,
            4 => Icons.Material.Filled.Looks4,
            5 => Icons.Material.Filled.Looks5,
            6 => Icons.Material.Filled.Looks6,
            _ => string.Empty
        };
    }

    public void Dispose()
    {
        TimeProvider.ModeChanged -= StateHasChanged;
        TeamsSource.Updated -= StateHasChanged;
    }
}
