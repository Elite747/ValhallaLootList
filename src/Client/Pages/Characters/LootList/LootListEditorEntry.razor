@inject ApiClient Api  
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (_item is not null)
{
    <div class="d-flex align-center py-1">
        <CascadingItemContext Id="_item.Id">
            <MudAvatar Rounded
                       Size="Size.Small"
                       Class="mr-2"
                       draggable="@(!Entry.Won)"
                       ondragover="event.preventDefault();"
                       @ondragstart="OnDragStart"
                       @ondragend="OnDragEnd"
                       @ondrop="OnDropAsync"
                       @ondragenter="OnDragEnter"
                       @ondragleave="OnDragLeave"
                       Color="_over ? Entry.Won ? Color.Error : Color.Success : Color.Dark"
                       Style="@(Entry.Won ? null : "cursor: move")">
                @if (_over && Editor.DraggingEntry != Entry)
                {
                    <MudIcon Icon="@(_over && Editor.DraggingEntry != Entry ? Entry.Won ? Icons.Material.Filled.Clear : Icons.Material.Filled.ArrowDownward : (Entry.Heroic ? CustomIcons.Skull : null))" Style="pointer-events: none" />
                }
                else
                {
                    <ItemIcon Size="IconSize.Small" Width="24" Height="24" ondragstart="event.dataTransfer.clearData();event.dataTransfer.setData('', event.target.id);" />
                }
            </MudAvatar>
            <div class="mr-auto">
                <ItemLink LinkEnabled Colorize Bracketize PlaceholderText="@_item.Name" />
                @if (!Entry.Won)
                {
@*                    <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="SelectAsync">
                        Change Item
                    </MudButton>*@
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Size="Size.Small" OnClick="ClearAsync" />
                }
                else
                {
                    <MudTooltip>
                        <TooltipContent>
                            <p style="max-width: 150px">
                                You have won this item already and can't change it.
                            </p>
                        </TooltipContent>
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Outlined.Lock" Color="Color.Error" Size="Size.Small" />
                        </ChildContent>
                    </MudTooltip>
                }
            </div>
        </CascadingItemContext>
    </div>
    <ul>
        @foreach (var restriction in _item.GetRestrictions(Editor.LootList.MainSpec, Editor.LootList.OffSpec, Entry.BracketAllowsOffspec))
        {
            <li>
                <MudText Color="restriction.Level == ItemRestrictionLevel.ManualReview ? Color.Warning : Color.Error">
                    @restriction.Reason
                </MudText>
            </li>
        }
    </ul>
    @if (Entry.Justification?.Length > 0)
    {
        <div>
            Justification: @Entry.Justification
        </div>
    }
}
else if (!Entry.Won)
{
    <div class="d-flex align-center py-1">
        <MudAvatar Rounded
                   Size="Size.Small"
                   Class="mr-2"
                   ondragover="event.preventDefault();"
                   @ondrop="OnDropAsync"
                   @ondragenter="OnDragEnter"
                   @ondragleave="OnDragLeave"
                   Color="_over ? Entry.Won ? Color.Error : Color.Success : Color.Dark">
            <MudIcon Icon="@(_over && Editor.DraggingEntry != Entry ? Entry.Won ? Icons.Material.Filled.Clear : Icons.Material.Filled.ArrowDownward : (Entry.Heroic ? CustomIcons.Skull : null))" Style="pointer-events: none" />
        </MudAvatar>
        <div class="mr-2">
            <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" Class="py-0" OnClick="SelectAsync">
                Select Item
            </MudButton>
        </div>
        @if (Editor.LootList.Entries.Any(e => !e.Won && e.Bracket == Entry.Bracket && e.ItemId.HasValue && e.Rank < Entry.Rank))
        {
            <MudTooltip>
                <TooltipContent>
                    <p style="max-width: 150px">
                        You have items in this bracket with a lower rank which can be put here instead for a higher priority.
                    </p>
                </TooltipContent>
                <ChildContent>
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Color="Color.Secondary" Size="Size.Small" />
                </ChildContent>
            </MudTooltip>
        }
        <div class="mr-auto"></div>
    </div>
}

@code {
    private ItemDto? _item;
    private bool _over;

    [Parameter] public LootListEntryDto Entry { get; set; } = null!;
    [Parameter] public IList<ItemDto> Items { get; set; } = null!;
    [Parameter] public LootListEditor Editor { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Entry is null) throw new ArgumentNullException(nameof(Entry));
        if (Items is null) throw new ArgumentNullException(nameof(Items));
        if (Editor is null) throw new ArgumentNullException(nameof(Editor));
        UpdateItem();
    }

    private async Task SelectAsync()
    {
        var groupsInBracket = new HashSet<ItemGroup>();

        if (!Entry.BracketAllowsTypeDuplicates)
        {
            foreach (var entry in Editor.LootList.Entries)
            {
                if (entry.Id != Entry.Id && entry.Bracket == Entry.Bracket && entry.ItemId.HasValue)
                {
                    var item = Items.FirstOrDefault(item => item.Id == entry.ItemId.Value);

                    if (item is not null && item.Heroic == Entry.Heroic)
                    {
                        groupsInBracket.Add(new ItemGroup(item.Type, item.Slot));
                    }
                }
            }
        }

        var spec = Editor.LootList.MainSpec | Editor.LootList.OffSpec;

        var contextItems = Items.Where(item => item.Heroic == Entry.Heroic && !item.Restrictions.Any(r => r.Level == ItemRestrictionLevel.Unequippable && (r.Specs & spec) != 0));

        var selectedId = await DialogService.ShowAsync<SelectItemDialog, uint?>(
            "Select Item",
            new()
            {
                [nameof(SelectItemDialog.GroupsInBracket)] = groupsInBracket,
                [nameof(SelectItemDialog.Items)] = contextItems,
                [nameof(SelectItemDialog.MainSpec)] = Editor.LootList.MainSpec,
                [nameof(SelectItemDialog.OffSpec)] = Editor.LootList.MainSpec != Editor.LootList.OffSpec ? Editor.LootList.OffSpec : default,
                [nameof(SelectItemDialog.AlreadySelectedItems)] = Editor.LootList.Entries.Where(e => e.ItemId > 0 && e != Entry).Select(e => e.ItemId!.Value).ToHashSet(),
                [nameof(SelectItemDialog.AlreadySelectedQuests)] = Editor.LootList.Entries.Where(e => e.ItemId > 0 && e != Entry).Select(e => Items.FirstOrDefault(i => i.Id == e.ItemId)?.QuestId ?? 0U).Where(id => id > 0).ToHashSet(),
                [nameof(SelectItemDialog.AllowOffspec)] = Entry.BracketAllowsOffspec
            },
            new()
            {
                FullWidth = true,
                MaxWidth = MudBlazor.MaxWidth.Medium
            });

        if (selectedId.HasValue)
        {
            ItemDto? item;
            string? justification = null;
            if (selectedId == 0U)
            {
                item = null;
            }
            else
            {
                item = Items.First(i => i.Id == selectedId);
                var restrictions = item.GetRestrictions(Editor.LootList.MainSpec, Editor.LootList.OffSpec, Entry.BracketAllowsOffspec).ToList();

                if (restrictions.Count != 0)
                {
                    justification = await DialogService.ShowAsync<JustifyDialog, string?>(
                        string.Empty,
                        new()
                        {
                            [nameof(JustifyDialog.Restrictions)] = restrictions,
                            [nameof(JustifyDialog.Item)] = item
                        });

                    if (string.IsNullOrWhiteSpace(justification))
                    {
                        return;
                    }
                }
            }

            var dto = new LootListEntrySubmissionDto { EntryId = Entry.Id, ItemId = item?.Id, Justification = justification, RemoveIfInvalid = true };
            //if (item is not null)
            //{
            //    var sameItemEntries = Editor.LootList.Entries.FindAll(e => e.Id != Entry.Id && e.ItemId == item.Id);
            //    if (sameItemEntries.Count >= item.MaxCount)
            //    {
            //        var firstMovableEntry = sameItemEntries.Where(e => !e.Won).OrderBy(e => e.Rank).FirstOrDefault();

            //        if (firstMovableEntry is null)
            //        {
            //            // all added entries are already won.
            //            string msg = "You have already won this item";

            //            if (item.MaxCount > 1)
            //            {
            //                msg = $"{msg} {item.MaxCount:N0} times";
            //            }

            //            Snackbar.Add(msg, Severity.Error);
            //            return;
            //        }

            //        dto.SwapEntryId = firstMovableEntry.Id;
            //    }
            //}

            await Api.LootListEntries.Submit(Entry.Id, dto)
                .OnSuccess(HandleSuccessNotDragged)
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private void HandleSuccessNotDragged(LootListEntryUpdateDto update) => HandleSuccess(update, false);

    private void HandleSuccessDragged(LootListEntryUpdateDto update) => HandleSuccess(update, true);

    private void HandleSuccess(LootListEntryUpdateDto update, bool dragged)
    {
        Entry.ItemId = update.ItemId;
        Entry.Justification = update.EntryJustification;
        UpdateItem();
        if (update.SwapEntryId.HasValue)
        {
            var entry = Editor.LootList.Entries.Find(e => e.Id == update.SwapEntryId);
            if (entry is not null)
            {
                entry.ItemId = update.SwapItemId;
                entry.Justification = update.SwapEntryJustification;

                if (!dragged && !update.SwapItemId.HasValue && update.ItemId.HasValue)
                {
                    var item = Items.FirstOrDefault(i => i.Id == update.ItemId.Value)?.Name ?? "Item";
                    Snackbar.Add($"{item} was moved from rank {entry.Rank:N0}");
                }
            }
        }
        Editor.NotifyStateChanged();
    }

    private void UpdateItem()
    {
        _item = Entry.ItemId.HasValue ? Items.FirstOrDefault(item => item.Id == Entry.ItemId.Value) : null;
    }

    private void OnDragStart(DragEventArgs args)
    {
        Editor.DraggingEntry = Entry;
        args.DataTransfer.EffectAllowed = "move";
    }

    private void OnDragEnd()
    {
        Editor.DraggingEntry = null;
    }

    private void OnDragEnter(DragEventArgs args)
    {
        if (Editor.DraggingEntry is not null && Editor.DraggingEntry != Entry)
        {
            _over = true;
            args.DataTransfer.DropEffect = "move";
        }
        else
        {
            args.DataTransfer.DropEffect = "none";
        }
    }

    private void OnDragLeave()
    {
        _over = false;
    }

    private Task OnDropAsync()
    {
        _over = false;

        if (!Entry.Won && Editor.DraggingEntry is not null && Editor.DraggingEntry != Entry)
        {
            return Api.LootListEntries.Submit(
                Entry.Id,
                new()
                {
                    EntryId = Entry.Id,
                    ItemId = Editor.DraggingEntry.ItemId,
                    Justification = Editor.DraggingEntry.Justification,
                    SwapEntryId = Editor.DraggingEntry.Id
                })
                .OnSuccess(HandleSuccessDragged)
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }

        return Task.CompletedTask;
    }

    private Task ClearAsync()
    {
        return Api.LootListEntries.Submit(Entry.Id, new() { EntryId = Entry.Id, ItemId = null, Justification = null })
            .OnSuccess(HandleSuccessNotDragged)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}
