@using ValhallaLootList.Client.Data.Import
@inject ApiClient Api
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialogScrollFix FixedFooter="true" />
<WizardDialog Title="Start Raid" OnFinish="OnFinishAsync">
    <ApiView Operations="new IApiClientOperation[] { _phaseConfigOperation, _instancesOperation, _charactersOperation }">
        <WizardSection Name="Import" CanContinue="ImportValid">
            <MudTextField T="string"
                          Value="_importString"
                          ValueChanged="ImportOrClear"
                          FullWidth="true"
                          Immediate="true"
                          Label="Import Code"
                          Variant="Variant.Filled" />
            @if (_importString?.Length > 0 && ImportValid())
            {
                <MudAlert Severity="Severity.Success">Imported!</MudAlert>
            }

            @if (_importError?.Length > 0)
            {
                <MudAlert Severity="Severity.Error">Import failed. @_importError</MudAlert>
            }

            @if (_nonExistantCharacters.Count != 0)
            {
                <MudList Dense="true">
                    <MudListSubheader>
                        The following characters were imported but do not exist yet. Add or remove these characters to continue.
                    </MudListSubheader>
                    @foreach (var character in _nonExistantCharacters)
                    {
                        <MudListItem>
                            <div class="d-flex align-center">
                                <PlayerIcon Gender="character.Gender"
                                            PlayerClass="character.Class"
                                            Race="character.Race"
                                            ShowTooltip="true"
                                            Size="Size.Small" />
                                <MudText Class="mx-3">
                                    @character.Name
                                </MudText>
                                <MudTooltip Class="mr-1" Text="Add">
                                    <MudIconButton OnClick="() => AddNonExistantAsync(character)" Color="Color.Success" Icon="@Icons.Material.Filled.AddCircleOutline" />
                                </MudTooltip>
                                <MudTooltip Text="Remove">
                                    <MudIconButton OnClick="() => RemoveNonExistant(character)" Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircleOutline" />
                                </MudTooltip>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            }
        </WizardSection>
        <WizardSection Name="Select Phase" CanContinue="() => _phaseConfigOperation.GetResult().Phases.Contains(State.Phase)">
            <MudList Clickable="true" Dense="true">
                @foreach (var p in _phaseConfigOperation.GetResult().Phases)
                {
                    var phase = p;
                    <MudListItem Icon="@(phase == State.Phase ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"
                                    OnClick="() => State.Phase = phase">
                        Phase @phase (@string.Join(", ", _instancesOperation.GetResult().Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name)))
                    </MudListItem>
                }
            </MudList>
        </WizardSection>
        <WizardSection Name="Roster" CanContinue="() => State.Attendees.Any(a => a.Value.TeamId == Team.Id)">
            <div>
                @foreach (var roleGroup in Team.Roster.GroupBy(a => (a.LootLists.Find(ll => ll.Phase == State.Phase)?.MainSpec).GetValueOrDefault().GetRole()).OrderBy(g => g.Key))
                {
                    <MudText Typo="Typo.subtitle2" Class="mt-1">@roleGroup.Key.GetDisplayName()</MudText>
                    @foreach (var member in roleGroup.OrderBy(a => a.Character.Class.GetLowercaseName()).ThenBy(a => a.Character.Name))
                    {
                        <MemberChip Member="member"
                                    Spec="member.LootLists.Find(ll => ll.Phase == State.Phase)?.MainSpec ?? Specializations.None"
                                    IsSelected="State.Attendees.ContainsKey(member.Character.Id)"
                                    IsSelectedChanged="selected => SetAttending(member.Character, selected)" />
                    }
                }
            </div>
        </WizardSection>
        <WizardSection Name="Additional Attendees">
            <div>
                @foreach (var character in State.Attendees.Values.Where(c => c.TeamId != Team.Id).OrderBy(c => c.Name))
                {
                    <CharacterChip Character="character"
                                    Closeable="true"
                                    OnClose="() => SetAttending(character, false)" />
                }
                <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                Color="Color.Success"
                                Size="Size.Small"
                                OnClick="AddAttendeeAsync" />
            </div>
        </WizardSection>
    </ApiView>
</WizardDialog>

@code {
    private IApiClientOperation<PhaseConfigDto> _phaseConfigOperation = null!;
    private IApiClientOperation<IList<InstanceDto>> _instancesOperation = null!;
    private IApiClientOperation<IList<CharacterDto>> _charactersOperation = null!;
    private readonly List<ImportCharacter> _nonExistantCharacters = new();
    private string? _importString, _importError;

    [Parameter] public TeamDto Team { get; set; } = null!;
    private StartRaidState State { get; } = new();

    protected override void OnInitialized()
    {
        _phaseConfigOperation = Api.GetPhaseConfiguration();
        _instancesOperation = Api.Instances.GetAll();
        _charactersOperation = Api.Characters.GetActive();
        ResetState();
    }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
    }

    private void ResetState()
    {
        State.Attendees.Clear();
        State.Phase = 0;
        foreach (var attendee in Team.Roster)
        {
            State.Attendees[attendee.Character.Id] = attendee.Character;
        }
    }

    private bool ImportValid() => _nonExistantCharacters.Count == 0 && string.IsNullOrEmpty(_importError);

    private void ImportOrClear(string importString)
    {
        _importString = importString;
        _importError = null;
        _nonExistantCharacters.Clear();
        ResetState();

        if (importString?.Length > 0)
        {
            ImportRaidStartModel? model;
            try
            {
                model = System.Text.Json.JsonSerializer.Deserialize<ImportRaidStartModel>(importString);
            }
            catch (System.Text.Json.JsonException ex)
            {
                _importError = ex.Message;
                return;
            }
            if (model is not null)
            {
                if (model.InstanceId?.Length > 0)
                {
                    var instance = _instancesOperation.GetResult().FirstOrDefault(i => i.Id == model.InstanceId);
                    if (instance is null)
                    {
                        _importError = $"Instance with Id {model.InstanceId} does not exist.";
                        return;
                    }

                    State.Phase = instance.Phase;
                }

                if (model.Characters?.Count > 0)
                {
                    var allCharacters = _charactersOperation.GetResult();
                    State.Attendees.Clear();

                    foreach (var importCharacter in model.Characters)
                    {
                        if (string.IsNullOrEmpty(importCharacter.Name))
                        {
                            _importError = "One or more characters does not have a name specified.";
                            return;
                        }

                        if (importCharacter.Class == Classes.None || !Enum.IsDefined(importCharacter.Class))
                        {
                            _importError = $"One or more characters does not have a valid class.";
                            return;
                        }

                        if (!Enum.IsDefined(importCharacter.Gender))
                        {
                            _importError = $"One or more characters does not have a valid gender.";
                            return;
                        }

                        if (!Enum.IsDefined(importCharacter.Race))
                        {
                            _importError = $"One or more characters does not have a valid race.";
                            return;
                        }

                        var character = allCharacters.FirstOrDefault(c => c.Name == importCharacter.Name);

                        if (character is null)
                        {
                            _nonExistantCharacters.Add(importCharacter);
                        }
                        else if (importCharacter.Class != character.Class)
                        {
                            _importError = $"{character.Name} was imported with class {importCharacter.Class} which doesn't match the known class of {character.Class}.";
                            return;
                        }
                        else if (importCharacter.Gender != character.Gender)
                        {
                            _importError = $"{character.Name} was imported with gender {importCharacter.Gender} which doesn't match the known gender of {character.Gender}.";
                            return;
                        }
                        else if (importCharacter.Race != character.Race)
                        {
                            _importError = $"{character.Name} was imported with race {importCharacter.Race} which doesn't match the known race of {character.Race}.";
                            return;
                        }
                        else
                        {
                            State.Attendees[character.Id] = character;
                        }
                    }
                }
            }
            else
            {
                _importError = "Import text is not valid.";
            }
        }
    }

    private Task AddNonExistantAsync(ImportCharacter character)
    {
        return Api.Characters.Create(new() { Class = character.Class, Gender = character.Gender, Race = character.Race, Name = character.Name, SenderIsOwner = false })
            .OnSuccess(c =>
            {
                _nonExistantCharacters.Remove(character);
                _charactersOperation.GetResult().Add(c);
                State.Attendees[c.Id] = c;
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private void RemoveNonExistant(ImportCharacter character)
    {
        _nonExistantCharacters.Remove(character);
    }

    private void SetAttending(CharacterDto character, bool attending)
    {
        if (State.Attendees.ContainsKey(character.Id))
        {
            if (!attending)
            {
                State.Attendees.Remove(character.Id);
            }
        }
        else if (attending)
        {
            State.Attendees[character.Id] = character;
        }
    }

    private Task OnFinishAsync(System.ComponentModel.CancelEventArgs arg)
    {
        var dto = new RaidSubmissionDto
        {
            Attendees = State.Attendees.Values.Select(a => a.Id).ToList(),
            Phase = State.Phase,
            TeamId = Team.Id
        };
        return Api.Raids.Create(dto)
            .OnSuccess(raid => Nav.NavigateTo("/raids/" + raid.Id))
            .OnFailure(_ => arg.Cancel = true)
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private async Task AddAttendeeAsync()
    {
        var character = await DialogService.ShowAsync<Raids.PickCharacterDialog, CharacterDto>(
            string.Empty,
            new() {
                [nameof(Raids.PickCharacterDialog.Operation)] = _charactersOperation,
                [nameof(Raids.PickCharacterDialog.Filter)] = (Func<CharacterDto, bool>)(c => c.TeamId != Team.Id),
                [nameof(Raids.PickCharacterDialog.ShowAdd)] = true
            },
            new() { NoHeader = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (character is not null)
        {
            State.Attendees[character.Id] = character;
        }
    }
}
