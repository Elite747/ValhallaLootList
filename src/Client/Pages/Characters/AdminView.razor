@attribute [Authorize(AppRoles.Administrator)]
@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PermissionManager Permissions

<ApiExecutor Operation="() => Api.Characters.GetOwner(Character.Id)" Context="owner" @ref="_executor">
    <MudCard Class="mb-3">
        <MudCardContent>
            @if (owner.Owner is null)
            {
                <MudText Color="Color.Error">Unclaimed!</MudText>
            }
            else
            {
                <div>Owner: <GuildMemberDisplay Member="owner.Owner" /></div>
                @if (owner.VerifiedBy is null)
                {
                    <MudText Color="Color.Error">Unverified!</MudText>
                }
                else
                {
                    <div>Verified By: <GuildMemberDisplay Member="owner.VerifiedBy" /></div>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="() => SetOwnerAsync(owner.Owner)" Color="Color.Primary">@(owner.Owner is null ? "Set" : "Change") Owner</MudButton>

            @if (owner.VerifiedBy is null && owner.Owner is not null)
            {
                <MudButton OnClick="() => VerifyOwnerAsync(owner.Owner)" Color="Color.Primary">Verify Owner</MudButton>
            }
        </MudCardActions>
    </MudCard>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;

    [Parameter] public CharacterDto Character { get; set; } = null!;
    [Parameter] public System.Security.Claims.ClaimsPrincipal User { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Character is null) throw new ArgumentNullException(nameof(Character));
        if (User is null) throw new ArgumentNullException(nameof(User));
    }

    private async Task SetOwnerAsync(GuildMemberDto? oldOwner)
    {
        Func<IApiClientOperation<IList<GuildMemberDto>>> operation = Api.Members.GetAll;
        var result = await DialogService.ShowAsync<PickGuildMemberDialog, GuildMemberDto>(
            "Select Member",
            new()
            {
                [nameof(PickGuildMemberDialog.Operation)] = operation
            },
            new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (result is not null)
        {
            await Api.Characters.SetOwner(Character.Id, result.Id)
                .OnSuccess(async (_, ct) =>
                {
                    var currentUserId = User.GetDiscordIdFromClient();
                    if (oldOwner?.Id == currentUserId || result.Id == currentUserId)
                    {
                        await Permissions.RefreshAsync(ct);
                    }
                    if (_executor is not null)
                    {
                        await _executor.RestartAsync();
                    }
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task VerifyOwnerAsync(GuildMemberDto owner)
    {
        if (await DialogService.ShowAsync<VerifyOwnerDialog, bool>(
            "Verify Owner",
            parameters: new()
            {
                [nameof(VerifyOwnerDialog.Character)] = Character,
                [nameof(VerifyOwnerDialog.Owner)] = owner
            }))
        {
            bool success = false;
            await Api.Characters.VerifyOwner(Character.Id).OnSuccess(_ => success = true).SendErrorTo(Snackbar).ExecuteAsync();
            if (success && _executor is not null)
            {
                await _executor.RestartAsync();
            }
        }
    }
}
