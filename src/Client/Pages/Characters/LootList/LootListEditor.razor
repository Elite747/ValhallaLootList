@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<ApiExecutor Operation="() => Api.Items.Get(LootList.Phase)" Context="items">
    <CascadingValue Value="items" IsFixed="true">
        <CascadingValue Value="this" IsFixed="true">
            <MudList Dense="true">
                <MudListSubheader>
                    <MudButton OnClick="SubmitAsync" Color="Color.Primary" Variant="Variant.Filled" Class="ma-1">Submit Application</MudButton>
                    <MudButton OnClick="ChangeSpecAsync" Color="Color.Primary" Variant="Variant.Filled" Class="ma-1">Change Specialization</MudButton>
                    <MudButton OnClick="ResetAsync" Color="Color.Error" Variant="Variant.Filled" Class="ma-1">Reset</MudButton>
                </MudListSubheader>
                <MudListSubheader>
                    <div class="d-flex">
                        <MudText Typo="Typo.h6" Class="mx-auto">
                            Main Spec:
                            <SpecIcon Spec="LootList.MainSpec" Size="IconSize.Tiny" />
                            @LootList.MainSpec.GetDisplayName()
                        </MudText>
                        @if (LootList.OffSpec != LootList.MainSpec)
                        {
                            <MudDivider Vertical="true" FlexItem="true" />
                            <MudText Typo="Typo.h6" Class="mx-auto">
                                Off Spec:
                                <SpecIcon Spec="LootList.OffSpec" Size="IconSize.Tiny" />
                                @LootList.OffSpec.GetDisplayName()
                            </MudText>
                        }
                    </div>
                </MudListSubheader>
                <div class="mx-4">
                    @for (int i = 0; i < _brackets.Count; i++)
                    {
                        var bracket = _brackets[i];
                        <LootListEditorBracket Bracket="bracket.Key.Bracket"
                                               AllowOffSpec="bracket.Key.AllowsOffspec"
                                               AllowTypeDuplicates="bracket.Key.AllowsTypeDuplicates"
                                               IsHighest="i == 0"
                                               IsLowest="i == _brackets.Count - 1"
                                               BracketEntries="bracket" />
                    }
                </div>
            </MudList>
        </CascadingValue>
    </CascadingValue>
</ApiExecutor>

@code {
    private List<IGrouping<BracketInfo, LootListEntryDto>> _brackets = null!;

    [Parameter] public LootListDto LootList { get; set; } = null!;
    [Parameter] public EventCallback OnSubmit { get; set; }

    public LootListEntryDto? DraggingEntry { get; set; }

    public void NotifyStateChanged() => StateHasChanged();

    protected override void OnParametersSet()
    {
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
        _brackets = LootList.Entries.GroupBy(e => new BracketInfo(e)).OrderBy(b => b.Key.Bracket).ToList();
    }

    private struct BracketInfo
    {
        public BracketInfo(LootListEntryDto entry)
        {
            Bracket = entry.Bracket;
            AllowsOffspec = entry.BracketAllowsOffspec;
            AllowsTypeDuplicates = entry.BracketAllowsTypeDuplicates;
        }

        public int Bracket { get; }
        public bool AllowsOffspec { get; }
        public bool AllowsTypeDuplicates { get; }

        public override int GetHashCode() => Bracket;

        public override bool Equals(object? obj) => Bracket.Equals((obj as BracketInfo?)?.Bracket);
    }

    private async Task SubmitAsync()
    {
        var teams = await DialogService.ShowAsync<PickTeamDialog, List<long>?>(
            string.Empty,
            parameters: new()
            {
                [nameof(PickTeamDialog.SelectedTeams)] = LootList.SubmittedTo.ToList()
            });

        if (teams is not null)
        {
            await Api.LootLists.Submit(LootList, teams)
                .OnSuccess((_, _) =>
                {
                    return OnSubmit.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private Task ResetAsync()
    {
        return Api.LootLists.Reset(LootList.CharacterId, LootList.Phase)
            .OnSuccess(lootList =>
            {
                LootList.Entries.Clear();
                LootList.Entries.AddRange(lootList.Entries);
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task ChangeSpecAsync()
    {
        return Api.Characters.GetSpecs(LootList.CharacterId)
            .OnSuccess(async (specs, _) =>
            {
                if (specs.Count == 1)
                {
                    await DialogService.ShowMessageBox("Change Specialization", "Your class only has one role.");
                    return;
                }

                var response = await DialogService.ShowAsync<CreateListDialog, LootListSubmissionDto?>(
                    string.Empty,
                    new()
                    {
                        [nameof(CreateListDialog.CharacterId)] = LootList.CharacterId,
                        [nameof(CreateListDialog.Phase)] = LootList.Phase,
                        [nameof(CreateListDialog.Specializations)] = specs,
                        [nameof(CreateListDialog.UpdateExisting)] = true,
                        [nameof(CreateListDialog.DefaultMainSpec)] = LootList.MainSpec,
                        [nameof(CreateListDialog.DefaultOffSpec)] = LootList.MainSpec != LootList.OffSpec ? LootList.OffSpec : null,
                    });

                if (response is not null)
                {
                    LootList.MainSpec = response.MainSpec.GetValueOrDefault();
                    LootList.OffSpec = response.OffSpec ?? LootList.MainSpec;
                    StateHasChanged();
                }
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}