<MudDialogScrollFix FixedFooter="true" />
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudList Clickable="true" Dense="true">
            @foreach (var itemTypeGroup in Items.GroupBy(item => new ItemGroup(item.Type, item.Slot)).OrderBy(g => g.Key))
            {
                bool bracketContainsGroup = GroupsInBracket.Contains(itemTypeGroup.Key);
                <MudDivider />
                <MudListSubheader Class="pb-1">
                    <MudText Typo="Typo.h6">
                        @itemTypeGroup.Key.Name
                    </MudText>
                    @if (bracketContainsGroup)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Error">An item of this type is already in the bracket.</MudText>
                    }
                </MudListSubheader>
                @foreach (var item in itemTypeGroup.OrderBy(item => item.Name))
                {
                    var id = item.Id;
                    <MudListItem OnClick="() => LinkClicked(id)" Disabled="bracketContainsGroup">
                        <div class="d-flex align-center">
                            <CascadingItemContext Id="item.Id">
                                <MudAvatar Rounded="true" Class="mr-2" Size="Size.Small">
                                    <ItemIcon Size="IconSize.Medium" Width="24" Height="24" />
                                </MudAvatar>
                                <ItemLink PlaceholderText="@item.Name" Colorize="true" Bracketize="true" Class="mr-auto" />
                            </CascadingItemContext>
                            <RestrictionStatus Restrictions="item.Restrictions.Where(r => (r.Specs & MainSpec) != 0)"
                                                SpecPrefix="@(OffSpec.HasValue ? "MS" : null)" />

                            @if (OffSpec.HasValue)
                            {
                                <RestrictionStatus Restrictions="item.Restrictions.Where(r => (r.Specs & OffSpec.Value) != 0)"
                                                    SpecPrefix="OS" />
                            }
                        </div>
                    </MudListItem>
                }
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => Dialog.Close(DialogResult.Ok(0U))">Clear Selection</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public IEnumerable<ItemDto> Items { get; set; } = null!;

    [Parameter] public Specializations MainSpec { get; set; }

    [Parameter] public Specializations? OffSpec { get; set; }

    [Parameter] public HashSet<ItemGroup> GroupsInBracket { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Items is null) throw new ArgumentNullException(nameof(Items));
        if (GroupsInBracket is null) throw new ArgumentNullException(nameof(GroupsInBracket));
    }

    private void LinkClicked(uint itemId)
    {
        Dialog.Close(DialogResult.Ok(itemId));
    }
}