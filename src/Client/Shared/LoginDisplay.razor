@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <MudHidden Breakpoint="Breakpoint.Xs">
            @{
                var username = context.User.Identity?.Name;
                var discordName = context.User.GetDiscordUsername();
            }
            @if (username != discordName)
            {
                @username
            }
            else
            {
                @discordName<span class="font-weight-light text-muted">#@context.User.GetDiscordDiscriminator()</span>
            }
        </MudHidden>
        <MudAvatar Image="@context.User.GetDiscordAvatarUrl()?.OriginalString" Class="mx-1" Color="Color.Transparent" />
        <MudButton OnClick="BeginSignOut" Variant="Variant.Text" Color="Color.Inherit">Log out</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton OnClick="SignIn" Variant="Variant.Text" Color="Color.Inherit">Log in</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code{
    private async Task BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private void SignIn()
    {
        Navigation.NavigateTo("authentication/login?returnUrl=" + Navigation.Uri);
    }
}
