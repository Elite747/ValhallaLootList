@using ValhallaLootList.Client.Pages.Characters.LootList 
@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<LootListLayout LootList="LootList" Class="flex-grow-1">
    <HeaderContent>
        <MudText Typo="Typo.h6">
            @LootList.CharacterName
            <MudText Inline Typo="Typo.subtitle1">@_character?.Race.GetDisplayName() @LootList.MainSpec.GetDisplayName(includeClassName: true)</MudText>
        </MudText>
        <MudText Color="_messageColor" Inline="false">@_message</MudText>

        @if (_character is not null)
        {
            <AuthorizeView Context="auth">
                <ValhallaLootList.Client.Pages.Characters.AdminView User="auth.User" Character="_character" HideRemovals="true" @key="_character" />
            </AuthorizeView>
        }

        <AuthorizeView Policy="@AppPolicies.RaidLeaderOrAdmin" Resource="Team" Context="auth">
            <Authorized>
                @if (LootList.Status == LootListStatus.Locked && LootList.TeamId == Team.Id)
                {
                    if (auth.User.IsAdmin())
                    {
                        <MudTooltip Text="Revoking an approval will prevent this loot list from being eligible for rankings, but will not hide rankings.">
                            <MudButton OnClick="SetEditableAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Error">
                                Revoke Approval
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="Unlocking a loot list will hide rankings from non-leaders. If the list is unlocked and approval revoked, it becomes editable.">
                            <MudButton OnClick="UnlockAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LockOpen" Color="Color.Error" Class="ml-2">Unlock</MudButton>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">Loot list may only be unlocked by an officer.</MudText>
                    }
                }
                else if (LootList.Status == LootListStatus.Submitted || (!LootList.TeamId.HasValue && LootList.Status == LootListStatus.Locked))
                {
                    <MudTooltip Text="Approving a loot list is considered an acceptance onto the raid team.">
                        <MudButton OnClick="ApproveAndAddToRosterAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Primary">
                            Approve
                        </MudButton>
                    </MudTooltip>
                    <MudTooltip Text="Denying a loot list will allow it to be edited by the owner if the list is unlocked.">
                        <MudButton OnClick="DenyAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Error">
                            Deny
                        </MudButton>
                    </MudTooltip>
                }
                else if (LootList.Status == LootListStatus.Approved)
                {
                    <MudTooltip Text="Revoking an approval will allow it to be edited by the owner. This will not remove the player from the team.">
                        <MudButton OnClick="SetEditableAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Error">
                            Revoke Approval
                        </MudButton>
                    </MudTooltip>
                    <MudTooltip Text="Locking a loot list will make rankings visible to non-leaders and prevent editing. This should generally be done after approval of all loot lists on a team.">
                        <MudButton OnClick="LockAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Lock" Color="Color.Error" Class="ml-2">Lock</MudButton>
                    </MudTooltip>
                }
            </Authorized>
        </AuthorizeView>
    </HeaderContent>
    <EntryTemplate Context="entry">
        @if (Items.FirstOrDefault(item => item.Id == entry.ItemId) is ItemDto item)
        {
            <div class="d-flex align-center">
                <CascadingItemContext Id="entry.ItemId">
                    @if (entry.Won)
                    {
                        <MudBadge Icon="@Icons.Material.Filled.Check" Color="Color.Success" Overlap="true">
                            <MudAvatar Rounded="true" Class="mr-2">
                                <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                            </MudAvatar>
                        </MudBadge>
                    }
                    else
                    {
                        <MudAvatar Rounded="true" Class="mr-2">
                            <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                        </MudAvatar>
                    }
                    <ItemLink LinkEnabled="true" Colorize="true" Bracketize="true" PlaceholderText="@item.Name" />
                </CascadingItemContext>
            </div>
            <ul>
                @foreach (var restriction in GetRestrictions(item, entry))
                {
                    <li>
                        <MudText Color="restriction.Level == ItemRestrictionLevel.ManualReview ? Color.Warning : Color.Error">
                            @restriction.Reason
                        </MudText>
                    </li>
                }
            </ul>
            @if (entry.Justification?.Length > 0)
            {
                <div>
                    Justification: @entry.Justification
                </div>
            }
        }
        else
        {
            <div class="d-flex align-center">
                <MudAvatar Rounded="true" Class="mr-2" Color="Color.Dark" />
                <span class="q0">[Empty Slot]</span>
            </div>
        }
    </EntryTemplate>
</LootListLayout>

@code {
    private IEnumerable<IGrouping<int, LootListEntryDto>> _rows = Enumerable.Empty<IGrouping<int, LootListEntryDto>>();
    private int _rowSize;
    private Color _messageColor;
    private string? _message;
    private long _characterId;
    private CharacterDto? _character;

    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public LootListDto LootList { get; set; } = null!;
    [Parameter] public IList<ItemDto> Items { get; set; } = null!;
    [Parameter] public System.Security.Claims.ClaimsPrincipal User { get; set; } = null!;
    [Parameter] public EventCallback<LootListDto> StatusUpdated { get; set; }
    [Parameter] public EventCallback RosterChanged { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
        if (Items is null) throw new ArgumentNullException(nameof(Items));
        if (User is null) throw new ArgumentNullException(nameof(User));
        _rows = LootList.Entries.GroupBy(e => e.Rank);
        _rowSize = _rows.Select(row => row.Count()).Max();
        SetMessage();

        if (_characterId != LootList.CharacterId)
        {
            _characterId = LootList.CharacterId;
            _character = Team.Roster.Find(m => m.Character.Id == _characterId)?.Character;

            if (_character is null)
            {
                return Api.Characters.Get(_characterId)
                    .OnSuccess(c => _character = c)
                    .SendErrorTo(Snackbar)
                    .ExecuteAsync();
            }
        }

        return Task.CompletedTask;
    }

    private void SetMessage()
    {
        (_message, _messageColor) = LootList.Status switch
        {
            LootListStatus.Editing => ("Loot List is still being edited.", Color.Error),
            LootListStatus.Submitted => ("Loot List is submitted but awaiting approval.", Color.Warning),
            LootListStatus.Approved => ("Loot List has been approved, but still needs to be locked.", Color.Warning),
            LootListStatus.Locked when LootList.TeamId is null => ("Loot list is locked, but character is not on this team yet.", Color.Warning),
            LootListStatus.Locked => ("Loot List has been approved and locked!", Color.Success),
            _ => ("Unrecognized status!", Color.Error)
        };
    }

    private IEnumerable<RestrictionDto> GetRestrictions(ItemDto item, LootListEntryDto entry)
    {
        return item.GetRestrictions(LootList.MainSpec, LootList.OffSpec, entry.BracketAllowsOffspec);
    }

    private Task SetEditableAsync()
    {
        return Api.LootLists.SetEditable(LootList)
            .OnSuccess((_, _) =>
            {
                SetMessage();
                return StatusUpdated.InvokeAsync(LootList);
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task LockAsync()
    {
        return Api.LootLists.Lock(LootList)
            .OnSuccess((_, _) =>
            {
                SetMessage();
                return StatusUpdated.InvokeAsync(LootList);
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task UnlockAsync()
    {
        return Api.LootLists.Unlock(LootList)
            .OnSuccess((_, _) =>
            {
                SetMessage();
                return StatusUpdated.InvokeAsync(LootList);
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private async Task ApproveAndAddToRosterAsync()
    {
        var result = await DialogService.Show<SetMessageDialog>("Approve Loot List").Result;

        if (!result.Cancelled)
        {
            await Api.LootLists.Approve(LootList, Team.Id, (string?)result.Data)
                .OnSuccess(async (response, _) =>
                {
                    LootList.TeamId = Team.Id;
                    LootList.TeamName = Team.Name;
                    SetMessage();
                    StateHasChanged();
                    await StatusUpdated.InvokeAsync(LootList);

                    if (!Team.Roster.Any(m => m.Character.Id == LootList.CharacterId) && response.Member is not null)
                    {
                        Team.Roster.Add(response.Member);
                        await RosterChanged.InvokeAsync();
                    }
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task DenyAsync()
    {
        var result = await DialogService.Show<SetMessageDialog>("Deny Loot List").Result;

        if (!result.Cancelled)
        {
            await Api.LootLists.Reject(LootList, Team.Id, (string?)result.Data)
                .OnSuccess((_, _) =>
                {
                    SetMessage();
                    return StatusUpdated.InvokeAsync(LootList);
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }
}
