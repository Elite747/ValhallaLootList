@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Nav
@inject SignOutSessionStateManager SignOutManager
@inject IThemeProvider ThemeProvider

<MudMenu Direction="Direction.Left" OffsetX="true" OffsetY="true" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" IconColor="Color.Inherit" Class="ml-1">
    <MudListSubheader>
        Theme
    </MudListSubheader>
    @foreach ((Theme? theme, string themeName) in _themes)
    {
        <MudMenuItem OnClick="() => ThemeProvider.SelectedTheme = theme">
            <div class="d-flex align-center">
                <MudIcon Class="mr-2" Icon="@(theme == ThemeProvider.SelectedTheme ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
                <div>@themeName</div>
            </div>
        </MudMenuItem>
    }
    <MudDivider />
    <TimeZoneMenuItems />
    <AuthorizeView>
        <MudDivider />
        <MudMenuItem Link="https://github.com/Elite747/ValhallaLootList/issues/new" Target="_blank">
            <div class="d-flex align-center">
                <MudIcon Class="mr-2" Icon="@Icons.Custom.Brands.GitHub" />
                <div>Report Issue</div>
            </div>
        </MudMenuItem>
        <MudDivider />
        <MudMenuItem OnClick="BeginSignOut">Log out</MudMenuItem>
    </AuthorizeView>
</MudMenu>

@code {
    private static readonly List<(Theme?, string)> _themes = new()
    {
        (null, "System Default"),
        (Theme.Light, "Light"),
        (Theme.Dark, "Dark")
    };

    private async Task BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        Nav.NavigateTo("authentication/logout");
    }
}
