@namespace ValhallaLootList.Client.Shared

<MudTextField Label="Name"
              HelperText="Enter the name exactly as it is spelled in-game."
              @bind-Value="Character.Name"
              For="() => Character.Name"
              Variant="Variant.Filled" />

<MudSelect Label="Gender"
           Class="mt-3"
           @bind-Value="Character.Gender"
           For="() => Character.Gender"
           Variant="Variant.Filled">
    <MudSelectItem T="Gender?" Value="@Gender.Male">
        <div class="d-flex align-center">
            <MudAvatar Rounded="true" Image="images/male.png" Size="Size.Small" Class="mr-2" />
            <span>Male</span>
        </div>
    </MudSelectItem>
    <MudSelectItem T="Gender?" Value="@Gender.Female">
        <div class="d-flex align-center">
            <MudAvatar Rounded="true" Image="images/female.png" Size="Size.Small" Class="mr-2" />
            <span>Female</span>
        </div>
    </MudSelectItem>
</MudSelect>

<MudSelect Label="Race"
           Class="mt-3"
           ValueChanged="(PlayerRace? race) => RaceChanged(race)"
           Value="@Character.Race"
           For="() => Character.Race"
           ToStringFunc="r => r.HasValue ? r.Value.GetDisplayName() : string.Empty"
           Variant="Variant.Filled">
    @foreach (var race in PlayerRaceExtensions.GetAll())
    {
        <MudSelectItem T="PlayerRace?" Value="@race" Disabled="!_classRaces.Contains(race)">
            <div class="d-flex align-center">
                <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                    <RaceIcon Race="race" Gender="Character.Gender ?? Gender.Male" Size="IconSize.Medium" Width="24" Height="24" />
                </MudAvatar>
                <span>@race.GetDisplayName()</span>
            </div>
        </MudSelectItem>
    }
</MudSelect>

<MudSelect Label="Class"
           Class="mt-3"
           @bind-Value="Character.Class"
           For="() => Character.Class"
           Disabled="DisableClassChange"
           ToStringFunc="pc => pc == default ? string.Empty : pc.GetDisplayName()"
           Variant="Variant.Filled">
    @foreach (var playerClass in ClassesExtensions.GetAll())
    {
        <MudSelectItem T="Classes" Value="@playerClass" Disabled="!GetRaceClasses().Contains(playerClass)">
            <div class="d-flex align-center">
                <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                    <ClassIcon PlayerClass="playerClass" Size="IconSize.Medium" Width="24" Height="24" />
                </MudAvatar>
                <span>@playerClass.GetDisplayName()</span>
            </div>
        </MudSelectItem>
    }
</MudSelect>

@if (AllowSubmitNonOwned)
{
    <MudTooltip Text="When checked, indicates that this character is owned by you. Uncheck this if you are adding a character on someone's behalf."
                Class="mt-3">
        <MudCheckBox @bind-Checked="Character.SenderIsOwner"
                     Label="This character is mine"
                     For="() => Character.SenderIsOwner" />
    </MudTooltip>
}

@code {
    private CharacterSubmissionDto? _character;
    private IEnumerable<PlayerRace> _classRaces = PlayerRaceExtensions.GetAll();

#pragma warning disable BL0007 // Component parameters should be auto properties
    [Parameter] public CharacterSubmissionDto Character
#pragma warning restore BL0007 // Component parameters should be auto properties
    {
        get => _character ??= new();
        set
        {
            _character = value;
            if (_character.Class.TryGetRaces(out var classRaces))
            {
                _classRaces = classRaces;
            }
        }
    }

    [Parameter] public bool AllowSubmitNonOwned { get; set; }

    [Parameter] public bool DisableClassChange { get; set; }

    private IEnumerable<Classes> GetRaceClasses()
    {
        return Character.Race?.TryGetClasses(out var raceClasses) == true ? raceClasses : ClassesExtensions.GetAll();
    }

    private void RaceChanged(PlayerRace? newValue)
    {
        Character.Race = newValue;

        if (!GetRaceClasses().Contains(Character.Class))
        {
            Character.Class = default;
        }
    }
}
