@inject ApiClient Api

<EditForm OnValidSubmit="OnSubmitAsync" Model="_model">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />

    <MudDialog>
        <DialogContent>
            <MudCheckBox @bind-Checked="_model.IgnoreAttendance" For="() => _model.IgnoreAttendance">
                Ignore Attendance
            </MudCheckBox>

            <MudTextField Label="Ignore Reason"
                          For="() =>_model.IgnoreReason"
                          @bind-Value="_model.IgnoreReason"
                          Disabled="!_model.IgnoreAttendance"
                          Variant="Variant.Filled"
                          Lines="3" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private ProblemValidator? _problemValidator;
    private UpdateAttendanceSubmissionDto _model = new();

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public AttendanceDto Attendance { get; set; } = null!;
    [Parameter] public RaidDto Raid { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Attendance is null) throw new ArgumentNullException(nameof(Attendance));
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));

        _model.IgnoreAttendance = Attendance.IgnoreAttendance;
        _model.IgnoreReason = Attendance.IgnoreReason;
    }

    private Task OnSubmitAsync()
    {
        if (!_model.IgnoreAttendance)
        {
            _model.IgnoreReason = null;
        }

        return Api.Raids.UpdateAttendee(Raid.Id, Attendance.Character!.Id, _model)
            .OnSuccess(attendance =>
            {
                Attendance.IgnoreAttendance = attendance.IgnoreAttendance;
                Attendance.IgnoreReason = attendance.IgnoreReason;
                Dialog.Close(DialogResult.Ok(attendance));
            })
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}