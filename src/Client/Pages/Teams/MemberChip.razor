<CharacterChip Character="Member.Character"
               Spec="_spec"
               OnClick="ToggleSelected"
               Disabled="Disabled"
               EndIcon="@_icon"
               EndIconColor="_color" />

@code {
    private Specializations _spec = Specializations.None;
    private string? _icon;
    private Color _color;

    [Parameter] public MemberDto Member { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public MemberSelectionState SelectionState { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback<MemberSelectionState> SelectionStateChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Member is null) throw new ArgumentNullException(nameof(Member));

        var lootList = Member.LootLists.Find(ll => ll.Phase == Phase) ??
            Member.LootLists.Where(ll => ll.Status == LootListStatus.Locked).OrderByDescending(ll => ll.Phase).FirstOrDefault() ??
            Member.LootLists.OrderByDescending(ll => ll.Phase).FirstOrDefault();

        _spec = lootList?.MainSpec ?? Specializations.None;

        if (SelectionState == MemberSelectionState.Selected)
        {
            _icon = Icons.Material.Filled.CheckCircleOutline;
            _color = Color.Success;
        }
        else if (SelectionState == MemberSelectionState.Standby)
        {
            _icon = Icons.Material.Filled.ModeStandby;
            _color = Color.Info;
        }
        else
        {
            _icon = null;
        }
    }

    private Task ToggleSelected()
    {
        SelectionState = SelectionState switch
        {
            MemberSelectionState.Selected => MemberSelectionState.Standby,
            MemberSelectionState.Standby => MemberSelectionState.Unselected,
            _ => MemberSelectionState.Selected
        };
        return SelectionStateChanged.InvokeAsync(SelectionState);
    }
}
