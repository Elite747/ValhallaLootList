@inject ApiClient Api

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Attendance.Character.Name</MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex">
            <PlayerIcon Race="Attendance.Character.Race"
                        Gender="Attendance.Character.Gender"
                        PlayerClass="Attendance.Character.Class"
                        Spec="Attendance.MainSpec"
                        Class="mr-5" />
            <div class="flex-grow-1">
                @if (Attendance.MainSpec != default)
                {
                    <div>
                        <MudText Typo="Typo.caption">
                            @Attendance.MainSpec.GetDisplayName(includeClassName: true)
                        </MudText>
                    </div>
                }
                @if (_editing)
                {
                    <EditForm OnValidSubmit="OnSubmitAsync" Model="_model" id="attendanceForm">
                        <ProblemValidator @ref="_problemValidator" />
                        <MudCheckBox T="bool" @bind-Checked="_model.Standby">
                            Standby
                        </MudCheckBox>
                    </EditForm>
                }
                else if (Attendance.Standby)
                {
                    <MudText Typo="Typo.caption" Inline="false" Color="Color.Info">Standby</MudText>
                }
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        @if (_editing)
        {
            <MudButton OnClick="() => _editing = false" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" form="attendanceForm">Save</MudButton>
        }
        else
        {
            <AuthorizeView Policy="@AppPolicies.LootMasterOrAdmin" Context="auth">
                @if (Raid.LocksAt > DateTimeOffset.UtcNow && !Raid.Kills.Any(kill => kill.Characters.Contains(Attendance.Character.Id)))
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="OnRemoveClickedAsync">Remove</MudButton>
                }
                @if (Raid.LocksAt > DateTimeOffset.UtcNow || auth.User.IsAdmin())
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Inherit" OnClick="BeginEdit">Edit</MudButton>
                }
            </AuthorizeView>
            <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="() => Dialog.Cancel()">Close</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private bool _editing;
    private ProblemValidator? _problemValidator;
    private readonly UpdateAttendanceSubmissionDto _model = new();

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public RaidDto Raid { get; set; } = null!;
    [Parameter] public AttendanceDto Attendance { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
        if (Attendance is null) throw new ArgumentNullException(nameof(Attendance));
    }

    private Task OnRemoveClickedAsync()
    {
        return Api.Raids.RemoveAttendee(Raid.Id, Attendance.Character.Id)
            .OnSuccess(_ =>
            {
                Raid.Attendees.RemoveAll(c => c.Character.Id == Attendance.Character.Id);
                Dialog.Close(DialogResult.Ok(true));
            })
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }

    private void BeginEdit()
    {
        _model.Standby = Attendance.Standby;
        _editing = true;
    }

    private Task OnSubmitAsync()
    {
        return Api.Raids.UpdateAttendee(Raid.Id, Attendance.Character.Id, _model)
            .OnSuccess(attendance =>
            {
                Attendance.Standby = attendance.Standby;
                Dialog.Close(DialogResult.Ok(false));
            })
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}
