@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="Team">
    <ValhallaLootList.Client.Pages.Characters.AdminView User="context.User" Character="Member.Character" HideRemovals="true" />
</AuthorizeView>

<MudText Typo="Typo.body1">
    Joined <DateTimeDisplay Date="Member.JoinedAt" Format="d" />
</MudText>

<AuthorizeView Policy="@AppPolicies.Recruiter" Resource="Team">
    <Authorized>
        <MudSelect T="RaidMemberStatus"
                   Value="Member.Status"
                   ValueChanged="OnStatusChangedAsync"
                   Label="Status"
                   ToStringFunc="GetDisplayString"
                   FullWidth="true"
                   Variant="Variant.Filled">
            <MudSelectItem T="RaidMemberStatus" Value="RaidMemberStatus.FullTrial">@GetDisplayString(RaidMemberStatus.FullTrial)</MudSelectItem>
            <MudSelectItem T="RaidMemberStatus" Value="RaidMemberStatus.HalfTrial">@GetDisplayString(RaidMemberStatus.HalfTrial)</MudSelectItem>
            <MudSelectItem T="RaidMemberStatus" Value="RaidMemberStatus.Member">@GetDisplayString(RaidMemberStatus.Member)</MudSelectItem>
        </MudSelect>
    </Authorized>
    <NotAuthorized>
        <MudText Color="Member.Status == RaidMemberStatus.Member ? Color.Inherit : Color.Warning" Inline="false">Status: @GetDisplayString(Member.Status)</MudText>
    </NotAuthorized>
</AuthorizeView>

<MudText Inline="false">
    Attended @Member.Attended of the last @Member.ObservedAttendances raids.
</MudText>

<MudText Inline="false">
    <MudIcon Class="text-icon" Icon="@CustomIcons.Diamond" />
    Gem &amp; Enchant Bonus:
    <MudText Inline Color="Member.Enchanted ? Color.Success : Color.Warning">
        @(Member.Enchanted ? "Awarded" : "Not Awarded")
    </MudText>
    <AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="Team">
        <MudIconButton OnClick="ToggleEnchantedAsync"
                       Icon="@(Member.Enchanted ? Icons.Material.Filled.RemoveCircle : Icons.Material.Filled.AddCircle)"
                       Size="Size.Small"
                       Color="Member.Enchanted ? Color.Error : Color.Success"
                       Class="ml-2" />
    </AuthorizeView>
</MudText>

<DonationSummary Member="Member">
    <AuthorizeView Policy="@AppPolicies.LootMasterOrAdmin" Resource="Team">
        <MudIconButton OnClick="() => ChangeDonationAsync(isRemove: false, allowCurrentMonth: context.User.IsAdmin())"
                       Icon="@Icons.Material.Filled.AddCircle"
                       Size="Size.Small"
                       Color="Color.Success"
                       Class="mx-2" />
        <MudIconButton OnClick="() => ChangeDonationAsync(isRemove: true, allowCurrentMonth: context.User.IsAdmin())"
                       Icon="@Icons.Material.Filled.RemoveCircle"
                       Size="Size.Small"
                       Color="Color.Error" />
    </AuthorizeView>
</DonationSummary>

<MudButton Link="@("characters/" + Member.Character.Name)" Color="Color.Primary" Variant="Variant.Text">View List</MudButton>

<AuthorizeView Policy="@AppPolicies.RaidLeaderOrAdmin" Resource="Team">
    <Authorized>
        <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Remove Member</MudButton>
    </Authorized>
    <NotAuthorized>
        <AuthorizeView Policy="@AppPolicies.CharacterOwner" Resource="Member.Character" Context="_">
            <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Leave Team</MudButton>
        </AuthorizeView>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public MemberDto Member { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public EventCallback MemberUpdated { get; set; }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (Member is null) throw new ArgumentNullException(nameof(Member));
    }

    private Task OnStatusChangedAsync(RaidMemberStatus status)
    {
        return Api.Teams.UpdateMember(Team.Id, Member.Character.Id, new() { MemberStatus = status })
            .OnSuccess((_, _) =>
            {
                Member.Status = status;
                return MemberUpdated.InvokeAsync();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private async Task RemoveAsync()
    {
        if (await DialogService.ShowAsync<RemoveMemberDialog, bool>("Remove Member", new() { [nameof(RemoveMemberDialog.CharacterName)] = Member.Character.Name }))
        {
            await Api.Teams.RemoveMember(Team.Id, Member.Character.Id)
                .OnSuccess((_, _) =>
                {
                    Team.Roster.Remove(Member);
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task ChangeDonationAsync(bool isRemove, bool allowCurrentMonth)
    {
        var result = await DialogService.ShowAsync<GameCurrencyDialog, GameCurrencyResult>(
            $"{(isRemove ? "Remove" : "Add")} Donation ({Member.Character.Name})", 
            parameters: new() { [nameof(GameCurrencyDialog.AllowCurrentMonth)] = allowCurrentMonth });
        if (result is not null)
        {
            var actualAmount = result.GetAmount();

            if (isRemove)
            {
                actualAmount = -actualAmount;
            }

            await Api.Donations.Add(new() { CopperAmount = actualAmount, CharacterId = Member.Character.Id, ApplyThisMonth = result.ApplyThisMonth })
                .OnSuccess((_, _) =>
                {
                    if (result.ApplyThisMonth)
                    {
                        Member.DonatedThisMonth += actualAmount;
                    }
                    else
                    {
                        Member.DonatedNextMonth += actualAmount;
                    }
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task ToggleEnchantedAsync()
    {
        var result = await DialogService.Show<SetMessageDialog>(Member.Enchanted ? "Remove Enchanted Bonus" : "Add Enchanted Bonus").Result;

        if (!result.Cancelled)
        {
            var dto = new UpdateEnchantedDto
            {
                Enchanted = !Member.Enchanted,
                Message = (string?)result.Data
            };

            await Api.Teams.UpdateMemberEnchanted(Team.Id, Member.Character.Id, dto)
                .OnSuccess((_, _) =>
                {
                    Member.Enchanted = dto.Enchanted;
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private static string GetDisplayString(RaidMemberStatus status)
    {
        return status switch
        {
            RaidMemberStatus.FullTrial => "Full Trial (-18 prio)",
            RaidMemberStatus.HalfTrial => "Half Trial (-9 prio)",
            RaidMemberStatus.Member => "Member (no penalty)",
            _ => "Not Selected"
        };
    }
}
