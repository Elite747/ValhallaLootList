@inject ApiClient Api

@if (_createList)
{
    <EditList Character="@Character" Phase="@Phase" OnLootListCreated="OnLootListCreated" ExistingList="_lootList" />
    <button class="btn btn-secondary mb-4" @onclick="() => _createList = false">Cancel</button>
}
else if (_lootList is not null)
{
    <div class="card mb-4">
        <div class="card-body">
            @if (_lootList.Locked)
            {
                <AuthorizeView Roles="@AppRoles.Administrator">
                    <button class="btn btn-danger btn-sm" type="button" @onclick="UnlockAsync">Unlock List</button>
                </AuthorizeView>
            }
            else
            {
                if (_lootList.Owned)
                {
                    <button class="btn btn-primary btn-sm" type="button" @onclick="() => _createList = true">Edit</button>
                }
                <AuthorizeView Roles="@AppRoles.RaidLeader">
                    <button class="btn btn-danger btn-sm" type="button" @onclick="LockAsync">Lock List</button>
                </AuthorizeView>
            }
        </div>
        <ul class="list-group list-group-flush">
            @if (_lootList.Owned || _lootList.Locked)
            {
                @foreach (var row in _lootList.Entries.GroupBy(e => e.Rank).OrderByDescending(g => g.Key))
                {
                    <li class="list-group-item p-1">
                        <div class="row mx-0">
                            <div class="col-md-3 col-lg-2 font-weight-bold">Rank @row.Key</div>
                            @foreach (var entry in row)
                            {
                                <div class="col-md">
                                    @if (entry.ItemId > 0)
                                    {
                                        <ItemLink Id="entry.ItemId" LinkEnabled="true" Colorize="true" Bracketize="true" OverrideText="@entry.ItemName" />
                                    }
                                    @if (entry.Prio.HasValue)
                                    {
                                        @: Prio: @entry.Prio
                                    }
                                    else if (entry.Won)
                                    {
                                        <span class="fas fa-check text-success" aria-hidden="true"></span>
                                        <span class="sr-only">Won</span>
                                    }
                                </div>
                            }
                        </div>
                    </li>
                }
            }
            else
            {
                @foreach (var entry in _lootList.Entries.OrderBy(e => e.ItemName))
                {
                    <li class="list-group-item p-1">
                        <ItemLink Id="entry.ItemId" LinkEnabled="true" Colorize="true" Bracketize="true" OverrideText="@entry.ItemName" />
                        @if (entry.Won)
                        {
                            <span class="fas fa-check text-success" aria-hidden="true"></span>
                            <span class="sr-only">Won</span>
                        }
                    </li>
                }
            }
        </ul>
    </div>
}
else
{
    <p>No Phase @Phase loot list was created.</p>
    @if (Character?.Editable == true)
    {
        <button class="btn btn-primary mb-4" @onclick="() => _createList = true">Create List</button>
    }
}

@code {
    [Parameter] public byte Phase { get; set; }
    [Parameter] public CharacterDto? Character { get; set; }
    [Parameter] public IList<LootListDto> LootLists { get; set; } = null!;
    [CascadingParameter] public IErrorHandler? ErrorHandler { get; set; }
    private LootListDto? _lootList;
    private bool _createList;

    protected override void OnParametersSet()
    {
        if (LootLists is null) throw new ArgumentNullException(nameof(LootLists));
        _lootList = LootLists.FirstOrDefault(ll => ll.Phase == Phase);
    }

    private void OnLootListCreated(LootListDto lootList)
    {
        if (_lootList is not null)
        {
            LootLists.Remove(_lootList);
        }
        LootLists.Add(lootList);
        _lootList = lootList;
        _createList = false;
        StateHasChanged();
    }

    private Task LockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Lock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess(_ => _lootList.Locked = true)
            .SendErrorTo(ErrorHandler)
            .ExecuteAsync();
    }

    private Task UnlockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Unlock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess(_ => _lootList.Locked = false)
            .SendErrorTo(ErrorHandler)
            .ExecuteAsync();
    }
}