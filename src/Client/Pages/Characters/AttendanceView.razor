@inject ApiClient Api

<MudList Dense="true" Clickable="true">
    <MudListSubheader>
        <MudButton OnClick="() => _executor?.RestartAsync() ?? Task.CompletedTask"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Refresh"
                   Color="Color.Primary"
                   Class="mr-2">
            Refresh
        </MudButton>
    </MudListSubheader>
    <ApiExecutor Operation="() => Api.Characters.GetAttendances(Character.Id)" Context="attendances" @ref="_executor">
        @if (attendances.Count > 0)
        {
            <MudList Dense="true" Clickable="true">
                @foreach (var attendance in attendances)
                {
                    <MudDivider />
                    <MudListItem Href="@("raids/" + attendance.RaidId)"
                                 IconColor="Color.Error"
                                 Icon="@(attendance.IgnoreAttendance ? Icons.Material.Filled.Error : null)"
                                 @key="attendance.RaidId">
                        <MudText Typo="Typo.h6">@attendance.TeamName</MudText>
                        <MudText Typo="Typo.caption"><DateTimeDisplay Date="attendance.StartedAt" Format="f" /></MudText>
                        <MudText Typo="Typo.body1" Color="Color.Error">@attendance.IgnoreReason</MudText>
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudListSubheader>
                <p>@Character.Name has not attended any raids yet.</p>
            </MudListSubheader>
        }
    </ApiExecutor>
</MudList>


@code {
    private IApiExecutor? _executor;

    [Parameter] public CharacterDto Character { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Character is null) throw new ArgumentNullException(nameof(Character));
    }
}
