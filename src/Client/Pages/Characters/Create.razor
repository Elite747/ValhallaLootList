@attribute [Authorize]
@inject ApiClient Api

<EditForm OnValidSubmit="OnSubmit" Model="_character">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />

    <MudDialog>
        <DialogContent>
            <MudTextField Label="Name"
                          HelperText="Enter the name exactly as it is spelled in-game."
                          @bind-Value="_character.Name"
                          For="() => _character.Name" />
            <MudSelect Label="Gender"
                       Class="mt-3"
                       @bind-Value="_character.Gender"
                       For="() => _character.Gender">
                <MudSelectItem T="Gender?" Value="@Gender.Male">Male</MudSelectItem>
                <MudSelectItem T="Gender?" Value="@Gender.Female">Female</MudSelectItem>
            </MudSelect>
            <MudSelect Label="Race"
                       Class="mt-3"
                       ValueChanged="(PlayerRace? race) => RaceChanged(race)"
                       Value="@_character.Race"
                       For="() => _character.Race">
                @foreach (var race in Enum.GetValues<PlayerRace>())
                {
                    <MudSelectItem T="PlayerRace?" Value="@race">@race.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Label="Class"
                       Class="mt-3"
                       @bind-Value="_character.Class"
                       For="() => _character.Class"
                       Disabled="EditingCharacter is not null">
                @foreach (var playerClass in _raceClasses)
                {
                    <MudSelectItem T="Classes?" Value="@playerClass">@playerClass</MudSelectItem>
                }
            </MudSelect>
            @if (AllowSubmitNonOwned)
            {
                <MudTooltip Text="When unchecked, this indicates that this character is not owned by you. Uncheck this if you are adding a character on someone's behalf."
                            Class="mt-3">
                    <MudCheckBox @bind-Checked="_character.SenderIsOwner"
                                 Label="This character is mine"
                                 For="() => _character.SenderIsOwner" />
                </MudTooltip>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private ProblemValidator? _problemValidator;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public CharacterDto? EditingCharacter { get; set; }
    [Parameter] public bool AllowSubmitNonOwned { get; set; }
    [Parameter] public bool DefaultSenderIsOwner { get; set; } = true;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));

        if (EditingCharacter is not null)
        {
            _character.Class = EditingCharacter.Class;
            _character.Gender = EditingCharacter.Gender;
            _character.Name = EditingCharacter.Name;
            _character.Race = EditingCharacter.Race;
        }

        _character.SenderIsOwner = DefaultSenderIsOwner;
    }
}
