@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="Team">
    <ValhallaLootList.Client.Pages.Characters.AdminView User="context.User" Character="Member.Character" HideRemovals="true" />
</AuthorizeView>

<MudText Typo="Typo.body1">
    Joined <DateTimeDisplay Date="Member.JoinedAt" Format="d" />
</MudText>

<MudText Color="Member.Status == RaidMemberStatus.Member ? Color.Inherit : Color.Warning" Inline="false">Status: @GetDisplayString(Member.Status)</MudText>

<MudText Inline="false">
    Missed @(Member.Absences == 1 ? "1 raid" : Member.Absences + " raids") this phase.
</MudText>

@if (Team.Size != 10)
{
    <MudText Inline="false">
        <MudIcon Class="text-icon" Icon="@CustomIcons.Diamond" />
        Gem &amp; Enchant Bonus:
        <MudText Inline Color="Member.Enchanted ? Color.Success : Color.Warning">
            @(Member.Enchanted ? "Awarded" : "Not Awarded")
        </MudText>
        <AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="Team">
            <MudIconButton OnClick="ToggleEnchantedAsync"
                           Icon="@(Member.Enchanted ? Icons.Material.Filled.RemoveCircle : Icons.Material.Filled.AddCircle)"
                           Size="Size.Small"
                           Color="Member.Enchanted ? Color.Error : Color.Success"
                           Class="ml-2" />
        </AuthorizeView>
    </MudText>

    <MudText Inline="false">
        <MudIcon Class="text-icon" Icon="@CustomIcons.Illidan" />
        Prepared Bonus:
        <MudText Inline Color="Member.Prepared ? Color.Success : Color.Warning">
            @(Member.Prepared ? "Awarded" : "Not Awarded")
        </MudText>
        <AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin" Resource="Team">
            <MudIconButton OnClick="TogglePreparedAsync"
                           Icon="@(Member.Enchanted ? Icons.Material.Filled.RemoveCircle : Icons.Material.Filled.AddCircle)"
                           Size="Size.Small"
                           Color="Member.Prepared ? Color.Error : Color.Success"
                           Class="ml-2" />
        </AuthorizeView>
    </MudText>

    <DonationSummary Member="Member" />
}

<AuthorizeView Policy="@AppPolicies.LootMasterOrAdmin" Resource="Team">
    <MudCheckBox T="bool" Label="Disenchanter" Checked="Member.Disenchanter" CheckedChanged="ToggleDisenchanterAsync" />
    <br />
</AuthorizeView>

<MudButton Link="@("characters/" + Member.Character.Name)" Color="Color.Primary" Variant="Variant.Text">View List</MudButton>

<AuthorizeView Policy="@AppPolicies.RaidLeaderOrAdmin" Resource="Team">
    <Authorized>
        <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Remove Member</MudButton>
    </Authorized>
    <NotAuthorized>
        <AuthorizeView Policy="@AppPolicies.CharacterOwner" Resource="Member.Character" Context="_">
            <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Leave Team</MudButton>
        </AuthorizeView>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public MemberDto Member { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public EventCallback MemberUpdated { get; set; }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (Member is null) throw new ArgumentNullException(nameof(Member));
    }

    private async Task RemoveAsync()
    {
        if (await DialogService.ShowAsync<RemoveMemberDialog, bool>("Remove Member", new() { [nameof(RemoveMemberDialog.CharacterName)] = Member.Character.Name }))
        {
            await Api.Teams.RemoveMember(Team.Id, Member.Character.Id)
                .OnSuccess((_, _) =>
                {
                    Team.Roster.Remove(Member);
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task ToggleEnchantedAsync()
    {
        var result = await DialogService.Show<SetMessageDialog>(Member.Enchanted ? "Remove Enchanted Bonus" : "Add Enchanted Bonus").Result;

        if (!result.Cancelled)
        {
            var dto = new UpdateEnchantedDto
            {
                Enchanted = !Member.Enchanted,
                Message = (string?)result.Data
            };

            await Api.Teams.UpdateMemberEnchanted(Team.Id, Member.Character.Id, dto)
                .OnSuccess((_, _) =>
                {
                    Member.Enchanted = dto.Enchanted;
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task TogglePreparedAsync()
    {
        var result = await DialogService.Show<SetMessageDialog>(Member.Prepared ? "Remove Prepared Bonus" : "Add Prepared Bonus").Result;

        if (!result.Cancelled)
        {
            var dto = new UpdatePreparedDto
            {
                Prepared = !Member.Prepared,
                Message = (string?)result.Data
            };

            await Api.Teams.UpdateMemberPrepared(Team.Id, Member.Character.Id, dto)
                .OnSuccess((_, _) =>
                {
                    Member.Prepared = dto.Prepared;
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task ToggleDisenchanterAsync(bool disenchanter)
    {
        await Api.Teams.UpdateMemberDisenchanter(Team.Id, Member.Character.Id, disenchanter)
            .OnSuccess((_, _) =>
            {
                Member.Disenchanter = disenchanter;
                return MemberUpdated.InvokeAsync();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private static string GetDisplayString(RaidMemberStatus status)
    {
        return status switch
        {
            RaidMemberStatus.FullTrial => "Full Trial (-24 prio)",
            RaidMemberStatus.HalfTrial => "Half Trial (-12 prio)",
            RaidMemberStatus.Member => "Member (no penalty)",
            _ => "Not Selected"
        };
    }
}
