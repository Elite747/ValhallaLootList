@using MudBlazor.Extensions;

<MudChip OnClick="OnClick" OnClose="OnClose" Class="@Class" Style="@ChipStyle" Variant="Variant.Outlined" Size="Size">
    <AvatarContent>
        @if (!HideIcon)
        {
            <MudAvatar Size="Size">
                @if (Spec != Specializations.None)
                {
                    <SpecIcon Spec="Spec" Size="IconSize.Medium" Width="24" Height="24" />
                }
                else
                {
                    <ClassIcon PlayerClass="Character.Class" Size="IconSize.Medium" Width="24" Height="24" />
                }
            </MudAvatar>
        }
    </AvatarContent>
    <ChildContent>
        @if (ChildContent is null)
        {
            @Character.Name
        }
        else
        {
            @ChildContent
        }
        @if (EndIcon?.Length > 0)
        {
            <MudIcon Size="Size.Small" Icon="@EndIcon" Color="EndIconColor" Class="mud-chip-end-icon" />
        }
    </ChildContent>
</MudChip>

@code {
    [Parameter] public CharacterDto Character { get; set; } = null!;
    [Parameter] public Size Size { get; set; }
    [Parameter] public Specializations Spec { get; set; }
    [Parameter] public string? EndIcon { get; set; }
    [Parameter] public Color EndIconColor { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public bool Clickable { get; set; }
    [Parameter] public bool HideIcon { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected string ChipStyle => new MudBlazor.Utilities.StyleBuilder()
        .AddStyle(Style)
        .AddStyle("--mud-palette-lines-inputs", $"var(--classcolor-{Character.Class.GetLowercaseName()})", Character.Class != Classes.Priest)
        .Build();

    protected override void OnParametersSet()
    {
        if (Character is null) throw new ArgumentNullException(nameof(Character));
        base.OnParametersSet();
    }
}
