@inject Data.Instances.InstanceProvider Instances
@inject PhaseConfigProvider PhaseConfig

@if (Instances.RequiresLoading)
{
    <LoadingIndicator />
}
else
{
    InstanceDto? selectedInstance = null;
    foreach (var phaseInstances in _instances)
    {
        <ul class="nav nav-pills">
            <li class="nav-item">
                <a class="nav-link disabled" tabindex="-1">Phase @phaseInstances.Phase</a>
            </li>
            @foreach (var instance in phaseInstances.Instances)
            {
                var id = instance.Id;
                bool active = false;

                if (instance.Id == SelectedInstanceId)
                {
                    active = true;
                    selectedInstance = instance;
                }

                <li class="nav-item">
                    <a class="@(active ? "nav-link active" : "nav-link")" type="button" @onclick="() => ChangeSelectedInstanceId(id)">@instance.Name</a>
                </li>
            }
        </ul>
    }
    @if (selectedInstance is not null)
    {
        <InstanceView Instance="selectedInstance" />
    }
}

@code {
    [Parameter] public string? SelectedInstanceId { get; set; }
    [Parameter] public EventCallback<string?> SelectedInstanceIdChanged { get; set; }

    private Task ChangeSelectedInstanceId(string? id)
    {
        SelectedInstanceId = id;
        return SelectedInstanceIdChanged.InvokeAsync(id);
    }
} 