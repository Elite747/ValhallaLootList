@inject ApiClient Api

<MudDialog>
    <TitleContent>
        Select Your Specialization
    </TitleContent>
    <DialogContent>
        <EditForm OnSubmit="OnSubmitAsync" Model="_model" id="createListForm">
            <DataAnnotationsValidator />
            <ProblemValidator @ref="_problemValidator" />
            <MudSelect Label="Main Spec"
                       For="() => _model.MainSpec"
                       @bind-Value="@_model.MainSpec"
                       ToStringFunc="spec => spec == default ? string.Empty : spec.GetDisplayName()"
                       Variant="Variant.Filled"
                       Class="mb-2">
                @foreach (var spec in Specializations)
                {
                    <MudSelectItem T="Specializations" Value="spec">
                        <div class="d-flex align-center">
                            <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                                <SpecIcon Spec="spec" Size="IconSize.Medium" Width="24" Height="24" />
                            </MudAvatar>
                            <span>@spec.GetDisplayName()</span>
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudSelect Label="Off Spec"
                       For="() => _model.OffSpec"
                       @bind-Value="@_model.OffSpec"
                       ToStringFunc='spec => spec == default ? "None" : spec.GetDisplayName()'
                       Variant="Variant.Filled"
                       Disabled="Specializations.Count == 1"
                       HelperText="@(Specializations.Count == 1 ? "Off spec disabled. Your class only has one role." : null)">
                <MudSelectItem Value="ValhallaLootList.Specializations.None">None</MudSelectItem>
                @foreach (var spec in Specializations)
                {
                    <MudSelectItem T="Specializations" Value="spec" Disabled="spec == _model.MainSpec">
                        <div class="d-flex align-center">
                            <MudAvatar Rounded="true" Size="Size.Small" Class="mr-2">
                                <SpecIcon Spec="spec" Size="IconSize.Medium" Width="24" Height="24" />
                            </MudAvatar>
                            <span>@spec.GetDisplayName()</span>
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" form="createListForm">Save</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private readonly LootListSubmissionDto _model = new();
    private ProblemValidator? _problemValidator;

    [Parameter] public long CharacterId { get; set; }
    [Parameter] public byte Phase { get; set; }
    [Parameter] public byte TeamSize { get; set; }
    [Parameter] public bool UpdateExisting { get; set; }
    [Parameter] public IList<Specializations> Specializations { get; set; } = null!;
    [Parameter] public Specializations DefaultMainSpec { get; set; }
    [Parameter] public Specializations DefaultOffSpec { get; set; }
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Specializations is null) throw new ArgumentNullException(nameof(Specializations));
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));

        _model.MainSpec = DefaultMainSpec;
        _model.OffSpec = DefaultOffSpec;
        _model.Size = TeamSize;
        _model.Phase = Phase;
        _model.CharacterId = CharacterId;
    }

    private Task OnSubmitAsync()
    {
        if (UpdateExisting)
        {
            return Api.LootLists.SetSpec(_model)
                .OnSuccess(_ => Dialog.Close(DialogResult.Ok(_model)))
                .ValidateWith(_problemValidator)
                .ExecuteAsync();
        }

        return Api.LootLists.Create(_model)
            .OnSuccess(lootList => Dialog.Close(DialogResult.Ok(lootList)))
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}
