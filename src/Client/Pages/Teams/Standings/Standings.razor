@inject ApiClient Api
@inject ISnackbar Snackbar  

<MudCard Elevation="5">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Standings</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (ShowExternalLink)
            {
                <MudTooltip Text="Standings Permalink">
                    <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" Link="@($"teams/{Team.Name}/standings/{SelectedEncounterId}")" />
                </MudTooltip>
            }
            <MudTooltip Text="Refresh">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="RefreshAsync" />
            </MudTooltip>
        </CardHeaderActions>
    </MudCardHeader>
    <div class="d-flex">
        <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
            <ApiExecutor Operation="Api.GetPhaseConfiguration" Context="phaseConfig">
                @{
                    var (selectedEncounter, selectedInstance) = GetSelected(instances);
                    var selectedPhase = selectedInstance?.Phase ?? phaseConfig.CurrentPhase;
                }
                <MudList Clickable="true">
                    @foreach (var phase in phaseConfig.Brackets.Keys.OrderBy(p => p))
                    {
                        <MudListItem InitiallyExpanded="phase == selectedPhase">
                            <ChildContent>
                                Phase @phase
                            </ChildContent>
                            <NestedList>
                                @foreach (var instance in instances.Where(i => i.Phase == phase).OrderBy(i => i.Name))
                                {
                                    <MudListItem InitiallyExpanded="selectedInstance?.Id == instance.Id" Text="@instance.Name">
                                        <NestedList>
                                            @foreach (var encounter in instance.Encounters)
                                            {
                                                <MudListItem Class="@(encounter.Id == selectedEncounter?.Id ? "mud-selected-item" : null)" OnClick="() => SelectEncounterAsync(encounter.Id)">
                                                    <div class="ml-2">
                                                        @encounter.Name
                                                    </div>
                                                </MudListItem>
                                            }
                                        </NestedList>
                                    </MudListItem>
                                }
                            </NestedList>
                        </MudListItem>
                    }
                </MudList>
                <MudDivider Vertical="true" FlexItem="true" />
                @if (selectedEncounter is not null)
                {
                    <EncounterView Standings="_standings" Encounter="selectedEncounter" />
                }
            </ApiExecutor>
        </ApiExecutor>
    </div>
</MudCard>

@code {
    private readonly Dictionary<uint, List<(string name, int? prio, bool won)>> _standings = new();
    private bool _teamChanged;
    private TeamDto? _team;

    [Parameter] public TeamDto Team
    {
        get => _team ?? throw new InvalidOperationException("Team parameter is required.");
        set
        {
            if (_team != value)
            {
                _team = value;
                _teamChanged = true;
            }
        }
    }

    [Parameter] public bool ShowExternalLink { get; set; }
    [Parameter] public string? SelectedEncounterId { get; set; }
    [Parameter] public EventCallback<string?> SelectedEncounterIdChanged { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));

        if (_teamChanged)
        {
            return RefreshAsync();
        }
        return Task.CompletedTask;
    }

    private Task RefreshAsync()
    {
        _teamChanged = false;
        return Api.LootLists.GetForTeam(Team.Id)
            .OnSuccess(lootLists =>
            {
                _standings.Clear();
                foreach (var lootList in lootLists)
                {
                    foreach (var entry in lootList.Entries)
                    {
                        var itemId = entry.RewardFromId ?? entry.ItemId;
                        if (itemId.HasValue)
                        {
                            if (!_standings.TryGetValue(itemId.Value, out var itemStandings))
                            {
                                _standings[itemId.Value] = itemStandings = new();
                            }

                            itemStandings.Add((lootList.CharacterName!, entry.Prio, entry.Won));
                        }
                    }
                }
                StateHasChanged();
            })
        .SendErrorTo(Snackbar)
        .ExecuteAsync();
    }

    private (EncounterDto?, InstanceDto?) GetSelected(IEnumerable<InstanceDto> instances)
    {
        foreach (var instance in instances)
        {
            foreach (var encounter in instance.Encounters)
            {
                if (string.Equals(encounter.Id, SelectedEncounterId, StringComparison.OrdinalIgnoreCase))
                {
                    return (encounter, instance);
                }
            }
        }
        return (null, null);
    }

    private Task SelectEncounterAsync(string? encounterId)
    {
        SelectedEncounterId = encounterId;
        return SelectedEncounterIdChanged.InvokeAsync(encounterId);
    }
}
