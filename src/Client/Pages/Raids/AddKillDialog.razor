@inject ApiClient Api  

<EditForm OnValidSubmit="OnSubmitAsync" Model="Input">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <MudDialog>
        <DialogContent>
            <div class="form-group">
                <label for="encounterId">Encounter</label>
                <InputSelect @bind-Value="Input.EncounterId" class="form-control" id="encounterId">
                    <option>-- Select Encounter --</option>
                    @foreach (var instance in Input.Instances)
                    {
                        <optgroup label="@instance.Name">
                            @foreach (var encounter in instance.Encounters)
                            {
                                <option value="@encounter.Id">@encounter.Name</option>
                            }
                        </optgroup>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Drops</label>
                @foreach (var itemId in Input.Drops.Keys)
                {
                    var localItemId = itemId;
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">
                                <ItemLink Id="localItemId" Bracketize="true" Colorize="true" IconSize="IconSize.Small" />
                            </span>
                            <button class="btn btn-outline-success"
                                    type="button"
                                    disabled="@(Input.Drops[localItemId].Value == 5)"
                                    @onclick="() => Input.Drops[localItemId].Value++">
                                <span class="fas fa-plus"></span>
                                <span class="sr-only" aria-hidden="true">Add Drop</span>
                            </button>
                            <button class="btn btn-outline-danger"
                                    type="button"
                                    disabled="@(Input.Drops[localItemId].Value == 0)"
                                    @onclick="() => Input.Drops[localItemId].Value--">
                                <span class="fas fa-minus"></span>
                                <span class="sr-only" aria-hidden="true">Remove Drop</span>
                            </button>
                        </div>
                        <InputNumber class="form-control" id="@itemId" min="0" max="5" @bind-Value="Input.Drops[localItemId].Value" />
                    </div>
                }
            </div>

            <div class="form-group">
                <label>Present Raiders</label>
                @foreach (var character in Input.Attendees.Keys)
                {
                    var localCharacter = character;
                    <div class="custom-control custom-checkbox">
                        <InputCheckbox class="custom-control-input" id="@character.Id" @bind-Value="Input.Attendees[localCharacter].Checked" />
                        <label class="custom-control-label" for="@character.Id">@character.Name</label>
                    </div>
                }
            </div>

            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private ProblemValidator? _problemValidator;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public AddKillInputModel Input { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Input is null) throw new ArgumentNullException(nameof(Input));
    }

    private async Task OnSubmitAsync()
    {
        var kill = new KillSubmissionDto
        {
            Characters = Input.Attendees.Where(pair => pair.Value.Checked).Select(pair => pair.Key.Id!).ToList(),
            EncounterId = Input.EncounterId
        };

        foreach (var (id, count) in Input.Drops)
        {
            for (int i = 0; i < count.Value; i++)
            {
                kill.Drops.Add(id);
            }
        }

        await Api.Raids
            .AddKill(Input.Raid.Id, kill)
            .OnSuccess(kill =>
            {
                Input.Raid.Kills.Add(kill);
                Dialog.Close();
            })
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}