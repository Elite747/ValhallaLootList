@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<MudCard Elevation="3" Class="content layout-container ma-3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Drops</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudList Class="content">
        @foreach (var kill in Raid.Kills)
        {
            <MudDivider />
            <MudListSubheader @key="kill">
                <MudText Typo="Typo.h6">@kill.EncounterName</MudText>
                <MudText Typo="Typo.subtitle1" GutterBottom="true">Recorded at <DateTimeDisplay Date="kill.KilledAt" Format="t" /></MudText>
                @if (kill.Characters.Count != Raid.Attendees.Count)
                {
                    <MudText Typo="Typo.subtitle1" Color="Color.Warning">
                        Not eligible for loot or bonuses: @string.Join(", ", GetIneligible(kill))
                    </MudText>
                }
                @if (Raid.LocksAt > DateTimeOffset.UtcNow)
                {
                    <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                        <MudButton Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => ShowKillWizard(kill)">Edit</MudButton>
                        @if (kill.Drops.All(drop => drop.WinnerId is null))
                        {
                            <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => DeleteAsync(kill.EncounterId, kill.TrashIndex)">Delete</MudButton>
                        }
                    </AuthorizeView>
                }
            </MudListSubheader>
            @foreach (var drop in kill.Drops)
            {
                <MudListItem Class="mud-list-item-clickable" Style="cursor: auto" @key="drop.Id">
                    <div class="d-flex">
                        <CascadingItemContext Id="drop.ItemId">
                            <MudAvatar Class="mr-5" Rounded="true">
                                <ItemIcon Size="IconSize.Medium" Width="40" Height="40" />
                            </MudAvatar>
                            <div class="mr-auto">
                                <ItemLink LinkEnabled="true" Colorize="true" Bracketize="true" />
                                <MudText Color="drop.WinnerId is null ? Color.Error : drop.Disenchanted ? Color.Info : Color.Success" Inline="false">
                                    @if (drop.Disenchanted)
                                    {
                                        <text>Disenchanted by @GetWinnerName(drop.WinnerId)</text>
                                    }
                                    else
                                    {
                                        <text>Awarded to @GetWinnerName(drop.WinnerId)</text>
                                    }
                                </MudText>
                            </div>
                        </CascadingItemContext>
                        @if (Raid.LocksAt > DateTimeOffset.UtcNow)
                        {
                            <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                                @if (drop.WinnerId is null)
                                {
                                    <MudButton OnClick="() => BeginAssignAsync(drop)" Variant="Variant.Text" Color="Color.Primary">Assign</MudButton>
                                }
                                else
                                {
                                    <MudButton OnClick="() => AssignAsync(drop, null, false)" Variant="Variant.Text" Color="Color.Error">Unassign</MudButton>
                                }
                            </AuthorizeView>
                        }
                    </div>
                </MudListItem>
            }
        }
        <MudDivider />
    </MudList>
    <MudCardActions>
        @if (Raid.LocksAt > DateTimeOffset.UtcNow)
        {
            <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                <MudButton OnClick="() => ShowKillWizard(null)"
                           StartIcon="@Icons.Material.Filled.Add"
                           Variant="Variant.Text"
                           Color="Color.Primary">
                    Add Kill
                </MudButton>

                @if (Raid.Kills.Count == 0)
                {
                    <MudButton OnClick="DeleteRaidAsync"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Variant="Variant.Text"
                               Color="Color.Error"
                               Class="ml-2">
                        Delete Raid
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="ExportAsync"
                               StartIcon="@Icons.Material.Filled.ImportExport"
                               Variant="Variant.Text"
                               Color="Color.Secondary"
                               Class="ml-2">
                        Export Standings
                    </MudButton>
                }
            </AuthorizeView>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public RaidDto Raid { get; set; } = null!;
}
