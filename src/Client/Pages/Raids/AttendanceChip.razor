@inject ApiClient Api
@inject IDialogService DialogService

<CharacterChip Character="Attendance.Character" Spec="Attendance.MainSpec" OnClick="OpenDetailsAsync">
    <div class="d-flex align-center">
        @Attendance.Character.Name
        @if (Attendance.IgnoreAttendance)
        {
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Error" Color="Color.Error" Style="margin-left: 4px; margin-right: -12px" />
        }
        else if (Attendance.Rto)
        {
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Color="Color.Info" Style="margin-left: 4px; margin-right: -12px" />
        }
    </div>
</CharacterChip>

@code {
    [Parameter] public RaidDto Raid { get; set; } = null!;
    [Parameter] public AttendanceDto Attendance { get; set; } = null!;
    [Parameter] public EventCallback OnChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
        if (Attendance is null) throw new ArgumentNullException(nameof(Attendance));
    }

    private async Task OpenDetailsAsync()
    {
        bool? removed = await DialogService.ShowAsync<AttendanceDialog, bool?>(
            string.Empty,
            new()
            {
                [nameof(AttendanceDialog.Attendance)] = Attendance,
                [nameof(AttendanceDialog.Raid)] = Raid
            });

        // removed value is currently unused. If the dialog returns a not-null result, the attendance state has changed.
        if (removed.HasValue)
        {
            await OnChanged.InvokeAsync();
        }
    }
}
