@inject ApiClient Api
@inject NavigationManager Nav 

<MudDialogScrollFix FixedFooter="true" />
<EditForm OnValidSubmit="SubmitAsync" Model="_model">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <MudDialog>
        <DialogContent>
            <ApiExecutor Operation="Api.GetPhaseConfiguration" Context="config">
                <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
                    @if (_model.Phase is < byte.MinValue or > byte.MaxValue || !config.Phases.Contains((byte)_model.Phase))
                    {
                        _model.Phase = config.CurrentPhase;
                    }
                    <MudSelect @bind-Value="_model.Phase" Label="Phase" Variant="Variant.Filled">
                        @foreach (var phase in config.Phases.OrderBy(p => p))
                        {
                            <MudSelectItem Value="(int)phase">
                                Phase @phase (@string.Join(", ", instances.Where(i => i.Phase == phase).OrderBy(i => i.Name).Select(i => i.Name)))
                            </MudSelectItem>
                        }
                    </MudSelect>
                </ApiExecutor>
            </ApiExecutor>

            <MudList Clickable="true" Dense="true">
                @foreach (var member in Team.Roster)
                {
                    <MudListItem Icon="@(_model.Attendees.Contains(member.Character.Id) ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)"
                                 OnClick="() => ToggleAttendee(member.Character.Id)">
                        @if (member.LootLists.Find(ll => ll.Phase == _model.Phase)?.MainSpec is Specializations spec)
                        {
                            <SpecIcon Size="IconSize.Tiny" Spec="spec" />
                        }
                        else
                        {
                            <ClassIcon Size="IconSize.Tiny" PlayerClass="member.Character.Class" />
                        }
                        <span class="ml-2">@member.Character.Name</span>
                    </MudListItem>
                }
            </MudList>
            <MudValidationSummary />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Start</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private ProblemValidator? _problemValidator;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public TeamDto Team { get; set; } = null!;
}
