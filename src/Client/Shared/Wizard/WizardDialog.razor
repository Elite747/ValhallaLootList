@namespace ValhallaLootList.Client.Shared

<MudDialog>
    <TitleContent>
        @Title
    </TitleContent>
    <DialogContent>
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
            <ul class="mud-breadcrumbs mud-typography-body1 mx-auto">
                @for (int i = 0; i < Sections.Count; i++)
                {
                    var section = Sections[i];
                    if (i != 0)
                    {
                        <li class="mud-breadcrumb-separator">/</li>
                    }
                    <li class="mud-breadcrumb-item">
                        <MudButton OnClick="() => GoTo(section)" Disabled="!CanGoTo(section)" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small">
                            @section.Name
                        </MudButton>
                    </li>
                }
            </ul>
            @CurrentSection?.ChildContent
        </CascadingValue>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton OnClick="GoToNextAsync" Disabled="!CanGoNext()" Color="Color.Primary" Variant="Variant.Filled">
            @(IsLastStep() ? "Finish" : "Next")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    internal List<WizardSection> Sections { get; } = new();
    internal WizardSection? CurrentSection { get; set; }

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public object? State { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public EventCallback<System.ComponentModel.CancelEventArgs> OnFinish { get; set; }

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
    }

    public void AddSection(WizardSection section)
    {
        if (!Sections.Contains(section))
        {
            Sections.Add(section);
            if (CurrentSection is null)
            {
                CurrentSection = section;
            }
            StateHasChanged();
        }
    }

    public void GoToStart()
    {
        if (Sections.Count != 0)
        {
            GoTo(Sections[0]);
        }
    }

    public bool CanGoTo(WizardSection? section)
    {
        if (section is null || section == CurrentSection)
        {
            return false;
        }

        if (CurrentSection?.CanLeave?.Invoke() == false)
        {
            return false;
        }

        return section.CanEnter?.Invoke() != false;
    }

    public bool CanGoTo(string sectionName)
    {
        return CanGoTo(Sections.Find(s => s.Name == sectionName));
    }

    public bool CanGoNext()
    {
        if (CurrentSection is not null)
        {
            if (CurrentSection.NextStep?.Length > 0)
            {
                return CanGoTo(CurrentSection.NextStep);
            }
            else
            {
                var index = Sections.IndexOf(CurrentSection) + 1;
                if (index == Sections.Count)
                {
                    return CurrentSection.CanLeave?.Invoke() != false;
                }
                else
                {
                    return CanGoTo(Sections[index]);
                }
            }
        }
        else
        {
            return false;
        }
    }

    [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, nameof(CurrentSection))]
    public bool IsLastStep() => Sections[^1] == CurrentSection;

    public void GoTo(WizardSection? section)
    {
        if (section is not null && section != CurrentSection && CanGoTo(section))
        {
            CurrentSection = section;
            StateHasChanged();
        }
    }

    public void GoTo(string sectionName)
    {
        GoTo(Sections.Find(s => s.Name == sectionName));
    }

    public Task GoToNextAsync()
    {
        if (CurrentSection is not null)
        {
            if (CurrentSection.NextStep?.Length > 0)
            {
                GoTo(CurrentSection.NextStep);
            }
            else
            {
                var index = Sections.IndexOf(CurrentSection) + 1;
                if (index == Sections.Count)
                {
                    return FinishAsync();
                }
                else
                {
                    GoTo(Sections[index]);
                }
            }
        }

        return Task.CompletedTask;
    }

    public async Task FinishAsync()
    {
        var arg = new System.ComponentModel.CancelEventArgs();
        await OnFinish.InvokeAsync(arg);
        if (!arg.Cancel)
        {
            Dialog.Close(DialogResult.Ok(State));
        }
    }
}
