@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudList Dense="true">
    @if (LootList is null)
    {
        <AuthorizeView Policy="@AppPolicies.CharacterOwnerOrAdmin" Resource="Character.Id">
            <MudListSubheader>
                <MudButton OnClick="CreateListAsync" Color="Color.Primary" Variant="Variant.Filled">Create</MudButton>
            </MudListSubheader>
        </AuthorizeView>
        <MudListSubheader>
            <p>@Character.Name does not have a loot list for Phase @Phase.</p>
        </MudListSubheader>
    }
    else
    {
        <MudListSubheader>
            <MudButton OnClick="RefreshAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Class="mr-2">Refresh</MudButton>
            @if (LootList.Status == LootListStatus.Submitted)
            {
                <AuthorizeView Policy="@AppPolicies.CharacterOwnerOrAdmin" Resource="LootList.CharacterId">
                    <MudButton OnClick="RevokeAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Color="Color.Error" Class="mr-2">Revoke Submission</MudButton>
                </AuthorizeView>
            }
        </MudListSubheader>
        <MudListSubheader>
            @if (LootList.Status == LootListStatus.Submitted)
            {
                <MudText Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.LockClock" Size="Size.Small" /> Loot List has been submitted awaiting approval.</MudText>
            }
            else if (LootList.Status == LootListStatus.Approved)
            {
                <MudText Typo="Typo.body1"><MudIcon Icon="@Icons.Custom.Uncategorized.AlertSuccess" Size="Size.Small" /> Loot List has been approved!</MudText>
            }
            else if (LootList.Status == LootListStatus.Locked)
            {
                <MudText Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" /> Loot List is locked.</MudText>
            }
            @if (!LootList.Entries.Any(e => e.Rank > 0))
            {
                <MudText Typo="Typo.body1">Rankings will not be shown until the loot list has been locked.</MudText>
            }
        </MudListSubheader>

        @if (LootList.Status == LootListStatus.Locked || LootList.Entries.Any(e => e.Rank > 0))
        {
            var rows = LootList.Entries.GroupBy(e => e.Rank);
            var rowSize = rows.Select(row => row.Count()).Max();
            @foreach (var row in rows.OrderByDescending(g => g.Key))
            {
                <MudDivider />
                <MudListItem Class="mud-list-item-clickable" Style="cursor: auto">
                    <MudGrid>
                        <MudItem xs="12" md="3" lg="2">
                            <MudText Typo="Typo.h6" GutterBottom="false">Rank @row.Key</MudText>
                        </MudItem>
                        @foreach (var entry in row.Where(e => e.ItemId > 0))
                        {
                            <MudItem xs="12" md="9 / rowSize" lg="10 / rowSize">
                                <LootListViewerEntry LootList="LootList" Entry="entry" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudListItem>
            }
        }
        else
        {
            @foreach (var entry in LootList.Entries.Where(e => e.ItemId > 0).OrderBy(e => e.ItemName))
            {
                <MudListItem>
                    <LootListViewerEntry Entry="entry" LootList="LootList" />
                </MudListItem>
            }
        }
    }
</MudList>

@code {
    [Parameter] public byte Phase { get; set; }
    [Parameter] public CharacterDto Character { get; set; } = null!;
    [Parameter] public LootListDto? LootList { get; set; }
    [Parameter] public EventCallback<LootListDto> OnListUpdated { get; set; }

    public Task RefreshAsync()
    {
        return Api.LootLists.GetForCharacter(Character.Id, Phase)
            .OnSuccess(lists => ChangeListRef(lists.SingleOrDefault()))
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    protected override void OnParametersSet()
    {
        if (Character is null) throw new ArgumentNullException(nameof(Character));
    }

    private Task RevokeAsync()
    {
        System.Diagnostics.Debug.Assert(LootList?.Status == LootListStatus.Submitted);
        return Api.LootLists.SetStatus(LootList, LootListStatus.Editing)
            .OnSuccess((_, _) =>
            {
                LootList.SubmittedToId = null;
                LootList.SubmittedToName = null;
                return OnListUpdated.InvokeAsync(LootList);
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task ChangeListRef(LootListDto? lootList)
    {
        LootList = lootList;
        return OnListUpdated.InvokeAsync(lootList);
    }

    private Task CreateListAsync()
    {
        System.Diagnostics.Debug.Assert(LootList is null);

        return Api.Characters.GetSpecs(Character.Id)
            .OnSuccess(async (specs, _) =>
            {
                if (specs.Count == 1)
                {
                    await Api.LootLists.Create(Character.Id, Phase, new() { MainSpec = specs[0] })
                        .OnSuccess((list, _) => ChangeListRef(list))
                        .SendErrorTo(Snackbar)
                        .ExecuteAsync();
                }
                else
                {
                    var response = await DialogService.ShowAsync<CreateListDialog, LootListDto?>(
                        string.Empty,
                        new()
                        {
                            [nameof(CreateListDialog.CharacterId)] = Character.Id,
                            [nameof(CreateListDialog.Phase)] = Phase,
                            [nameof(CreateListDialog.Specializations)] = specs,
                        });

                    if (response is not null)
                    {
                        await ChangeListRef(response);
                    }
                }
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}
