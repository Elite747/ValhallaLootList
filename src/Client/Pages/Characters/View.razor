@page "/Characters/{characterName}"
@using ValhallaLootList.Client.Pages.Characters.LootList;
@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Nav 

<ApiView Operation="_characterOperation" @key="CharacterName">
    @{
        var character = _characterOperation.GetResult(); 
    }
    <AppPageTitle Title="@character.Name" />
    <div class="d-flex align-center mb-3">
        <PlayerIcon Race="character.Race"
                    PlayerClass="character.Class"
                    Size="Size.Medium"
                    ShowTooltip="true"
                    Class="mr-2" />
        <MudText Typo="Typo.h4" GutterBottom="false" Class="mr-2">@character.Name</MudText>
        @foreach (var teamId in character.Teams)
        {
            <TeamLink TeamId="teamId" />
        }
        @if (character.Deactivated)
        {
            <MudTooltip Class="ml-1" Text="Deactivated">
                <MudIcon Icon="@Icons.Material.Outlined.Warning" Color="Color.Error" Size="Size.Medium" />
            </MudTooltip>
        }
        <AuthorizeView Policy="@AppPolicies.Administrator">
            <MudTooltip Text="Edit">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Edit" OnClick="() => EditAsync(character)" />
            </MudTooltip>
            <MudTooltip Text="@(character.Deactivated ? "Reactivate" : "Deactivate")">
                <MudIconButton Class="ml-2"
                               Color="character.Deactivated ? Color.Success : Color.Error"
                               Icon="@(character.Deactivated ? Icons.Material.Filled.AddCircleOutline : Icons.Material.Filled.RemoveCircleOutline)"
                               OnClick="() => ToggleActivatedAsync(character)" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Class="ml-2"
                               Color="Color.Error"
                               Icon="@Icons.Material.Filled.DeleteForever"
                               OnClick="() => DeleteAsync(character)" />
            </MudTooltip>
        </AuthorizeView>
    </div>

    <AuthorizeView Policy="@AppPolicies.CharacterOwnerOrAdmin" Resource="character">
        <ApiExecutor Operation="() => Api.Characters.GetDonationSummary(character.Id)" Context="donations">
            <ValhallaLootList.Client.Pages.Teams.DonationSummary Donations="donations" />
        </ApiExecutor>
    </AuthorizeView>

    <AuthorizeView Policy="@AppPolicies.LeadershipOrAdmin">
        <AdminView Character="character" User="context.User" />
    </AuthorizeView>

    <ApiView Operations="_lootListsAndPhaseConfigOperations">
        <MudTabs Elevation="5" Rounded ApplyEffectsToContainer>
            @foreach (var size in _sizes)
            {
                var listsForSize = _lootListsOperation!.GetResult().FindAll(ll => ll.Size == size);
                <MudTabPanel Text="@($"{size}-Man")" ID="size">
                    @if (!character.Deactivated && listsForSize.Any(ll => ll.TeamId is null))
                    {
                        <AuthorizeView Policy="@AppPolicies.CharacterOwnerOrAdmin" Resource="character">
                            <div class="mx-4 my-2">
                                @if (listsForSize.Any(ll => ll.SubmittedTo.Count != 0))
                                {
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Error"
                                               Size="Size.Medium"
                                               Class="ma-1"
                                               OnClick="() => RevokeAsync(size)">
                                        Cancel Team Applications
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               Size="Size.Medium"
                                               Class="ma-1"
                                               OnClick="() => ApplyAsync(size)">
                                        Apply to a Team
                                    </MudButton>
                                }
                            </div>
                        </AuthorizeView>
                    }
                    <MudTabs Elevation="0" ApplyEffectsToContainer @bind-ActivePanelIndex="_panelIndex">
                        @foreach (var phase in _phaseConfigOperation.GetResult().Phases.OrderByDescending(p => p))
                        {
                            <MudTabPanel Text="@($"Phase {phase}")" ID="phase">
                                <LootListPhase Character="character" Phase="phase" Size="size" LootLists="_lootListsOperation!.GetResult()" OnSubmit="StateHasChanged" OnListUpdated="StateHasChanged" />
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudTabPanel>
            }
            <MudTabPanel Text="Won Items" ID="_wonId">
                <WonItemsView Character="character" />
            </MudTabPanel>
            <MudTabPanel Text="Attendance" ID="_attendanceId">
                <AttendanceView Character="character" />
            </MudTabPanel>
        </MudTabs>
    </ApiView>
</ApiView>

@code {
    private static readonly byte[] _sizes = { 25, 10 };
    private int _panelIndex;
    private object _wonId = new(), _attendanceId = new();
    private IApiClientOperation<CharacterDto> _characterOperation = null!;
    private IApiClientOperation<PhaseConfigDto> _phaseConfigOperation = null!;
    private IApiClientOperation<List<LootListDto>>? _lootListsOperation;
    private IApiClientOperation[] _lootListsAndPhaseConfigOperations = Array.Empty<IApiClientOperation>();

    [Parameter] public string? CharacterName { get; set; }

    protected override void OnInitialized()
    {
        _phaseConfigOperation = Api.GetPhaseConfiguration().OnSuccess(config => _panelIndex = config.Phases.Count(phase => phase > config.CurrentPhase));
    }

    protected override async Task OnParametersSetAsync()
    {
        _characterOperation = Api.Characters.Get(CharacterName ?? string.Empty);
        _lootListsOperation = null;
        _lootListsAndPhaseConfigOperations = Array.Empty<IApiClientOperation>();
        await _characterOperation.ExecuteAsync();
        StateHasChanged();
        if (_characterOperation.HasResult())
        {
            await RefreshLootListsAsync();
        }
    }

    private async Task EditAsync(CharacterDto character)
    {
        var updatedCharacter = await DialogService.ShowAsync<Create, CharacterDto>(
            "Edit Character",
            parameters: new() { [nameof(Create.EditingCharacter)] = character },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (updatedCharacter is not null)
        {
            character.Name = updatedCharacter.Name;
            character.Race = updatedCharacter.Race;
        }
    }

    private async Task ToggleActivatedAsync(CharacterDto character)
    {
        string title, message;

        if (character.Deactivated)
        {
            title = "Re-Activate Character";
            message = "Reactivating will make this character available for new raid attendances. Are you sure you want to reactivate this character?";
        }
        else
        {
            title = "Deactivate Character";
            message = "Deactivating will make this character hidden from the characters page and new raid attendances. Are you sure you want to deactivate this character?";
        }

        if (await DialogService.ShowMessageBox(title, message, "Yes", "No") == true)
        {
            await Api.Characters.ToggleActivated(character.Id)
                .OnSuccess(_ => Nav.NavigateTo("characters"))
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task DeleteAsync(CharacterDto character)
    {
        if (await DialogService.ShowMessageBox(
            "Delete Character",
            "Deleting a character can only be done if they have not won any loot or attended any raids yet. This action is irreversible! Are you sure you want to delete this character?",
            "Yes",
            "No") == true)
        {
            await Api.Characters.Delete(character.Id)
                .OnSuccess(_ => Nav.NavigateTo("characters"))
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task RevokeAsync(byte size)
    {
        System.Diagnostics.Debug.Assert(_lootListsOperation?.HasResult() == true);
        System.Diagnostics.Debug.Assert(_phaseConfigOperation?.HasResult() == true);
        System.Diagnostics.Debug.Assert(_characterOperation?.HasResult() == true);

        var currentPhases = GetCurrentPhasesInDescendingOrder();
        await Api.LootLists.RevokeAll(_lootListsOperation.GetResult().Where(ll => currentPhases.Contains(ll.Phase) && ll.Size == size).ToList(), size)
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        await RefreshLootListsAsync();
    }

    private async Task ApplyAsync(byte size)
    {
        System.Diagnostics.Debug.Assert(_lootListsOperation?.HasResult() == true);
        System.Diagnostics.Debug.Assert(_phaseConfigOperation?.HasResult() == true);
        System.Diagnostics.Debug.Assert(_characterOperation?.HasResult() == true);

        var phasesWithCollapsibleBrackets = new Dictionary<byte, int>();
        var currentPhases = GetCurrentPhasesInDescendingOrder();

        foreach (byte phase in currentPhases)
        {
            if (_lootListsOperation.GetResult().Find(ll => ll.Phase == phase && ll.Size == size) is not { } lootList)
            {
                await DialogService.ShowMessageBox(new MessageBoxOptions
                {
                    Title = $"No Phase {phase} loot list",
                    Message = "You must create a loot list for all current phases.",
                    YesText = "Close"
                });
                return;
            }
            else
            {
                int? collapsibleBracket = lootList.GetCollapsibleBracket();
                if (collapsibleBracket.HasValue)
                {
                    phasesWithCollapsibleBrackets[phase] = collapsibleBracket.Value;
                }
            }
        }

        if (phasesWithCollapsibleBrackets.Count != 0)
        {
            if (await DialogService.ShowMessageBox(new MessageBoxOptions
            {
                Title = "Unfilled Ranks",
                Message = "The following loot brackets have higher ranks available that could be used for items within it:" +
                Environment.NewLine +
                string.Join(Environment.NewLine, phasesWithCollapsibleBrackets.OrderBy(x => x.Key).Select(x => $"Phase {x.Key}: Bracket {x.Value}")) +
                Environment.NewLine +
                "Submitting this list would be voluntarily accepting lower priority on these items with no benefit. Are you sure you want to submit these lists?",
                YesText = "Continue",
                NoText = "Cancel"
            }) != true)
            {
                return;
            }
        }

        var teams = await DialogService.ShowAsync<PickTeamDialog, List<long>?>(
            string.Empty,
            parameters: new()
            {
                [nameof(PickTeamDialog.SelectedTeams)] = _lootListsOperation.GetResult().Where(ll => ll.Size == size).SelectMany(ll => ll.SubmittedTo).Distinct().ToList(),
                [nameof(PickTeamDialog.CurrentPhases)] = currentPhases,
                [nameof(PickTeamDialog.Size)] = size
            });

        if (teams is not null)
        {
            await Api.LootLists.SubmitAll(_lootListsOperation.GetResult().Where(ll => ll.Size == size && currentPhases.Contains(ll.Phase)).ToList(), teams, size)
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
            await RefreshLootListsAsync();
        }
    }

    private async Task RefreshLootListsAsync()
    {
        _lootListsOperation = Api.LootLists.GetForCharacter(_characterOperation.GetResult().Id);
        _lootListsAndPhaseConfigOperations = new IApiClientOperation[] { _phaseConfigOperation, _lootListsOperation };
        await Task.WhenAll(_lootListsAndPhaseConfigOperations.Select(op => op.ExecuteOrWaitAsync()));
        StateHasChanged();
    }

    private List<byte> GetCurrentPhasesInDescendingOrder()
    {
        var config = _phaseConfigOperation.GetResult();

        var phases = new List<byte>(config.CurrentPhase);

        for (byte phase = config.CurrentPhase; phase > 0; phase--)
        {
            // Since a phase can have no raids, don't just assume every phase before the current is valid.
            if (config.Phases.Contains(phase))
            {
                phases.Add(phase);
            }
        }

        return phases;
    }
}
