@attribute [Authorize(AppRoles.Administrator)]
@inject ApiClient Api
@inject IDialogService DialogService 

<ApiExecutor Operation="() => Api.Characters.GetOwner(Character.Id)" Context="owner" @ref="_executor">
    <div class="card my-3">
        <div class="card-body">
            @if (owner.Owner is null)
            {
                <div class="text-danger">Unclaimed!</div>
            }
            else
            {
                <div>Owner: <GuildMemberDisplay Member="owner.Owner" /></div>
                @if (owner.VerifiedBy is null)
                {
                    <div class="text-danger">Unverified!</div>
                }
                else
                {
                    <div>Verified By: <GuildMemberDisplay Member="owner.VerifiedBy" /></div>
                }
            }
        </div>
        <div class="card-footer">
            <MudButton OnClick="SetOwnerAsync" Color="Color.Primary">@(owner.Owner is null ? "Set" : "Change") Owner</MudButton>

            @if (owner.VerifiedBy is null && owner.Owner is not null)
            {
                <MudButton OnClick="() => VerifyOwnerAsync(owner.Owner)" Color="Color.Primary">Verify Owner</MudButton>
            }
        </div>
    </div>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;

    [Parameter] public CharacterDto Character { get; set; } = null!;
    [CascadingParameter] public IErrorHandler? ErrorHandler { get; set; }

    protected override void OnParametersSet()
    {
        if (Character is null) throw new ArgumentNullException(nameof(Character));
    }

    private async Task SetOwnerAsync()
    {
        if (await DialogService.ShowAsync<SetOwnerDialog, bool>(
            "Verify Owner",
            parameters: new()
            {
                [nameof(SetOwnerDialog.Character)] = Character
            }))
        {
            // TODO
        }
    }

    private async Task VerifyOwnerAsync(GuildMemberDto owner)
    {
        if (await DialogService.ShowAsync<VerifyOwnerDialog, bool>(
            "Verify Owner",
            parameters: new()
            {
                [nameof(VerifyOwnerDialog.Character)] = Character,
                [nameof(VerifyOwnerDialog.Owner)] = owner
            }))
        {
            bool success = false;
            await Api.Characters.VerifyOwner(Character.Id).OnSuccess(_ => success = true).SendErrorTo(ErrorHandler).ExecuteAsync();
            if (success && _executor is not null)
            {
                await _executor.RestartAsync();
            }
        }
    }
}
