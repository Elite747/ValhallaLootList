@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudCard Elevation="3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Attendees</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="py-0">
        <div>
            @foreach (var roleGroup in Raid.Attendees.GroupBy(a => a.MainSpec.GetValueOrDefault().GetRole()).OrderBy(g => g.Key))
            {
                <MudText Typo="Typo.subtitle2" Class="mt-1">@roleGroup.Key.GetDisplayName()</MudText>
                @foreach (var attendance in roleGroup.OrderBy(a => a.Character.Class.GetLowercaseName()).ThenBy(a => a.Character.Name))
                {
                    <AttendanceChip Attendance="attendance" Raid="Raid" OnRemoved="StateHasChanged" />
                }
            }
        </div>
    </MudCardContent>
    <MudCardActions>
        @if (Raid.LocksAt > DateTimeOffset.UtcNow)
        {
            <AuthorizeView Policy="@AppPolicies.LootMaster" Resource="@Raid.TeamId">
                <MudButton OnClick="AddRosteredAsync" Variant="Variant.Text" Color="Color.Primary" Class="mr-2">Add Rostered Member</MudButton>
                <MudButton OnClick="AddUnrosteredAsync" Variant="Variant.Text" Color="Color.Primary">Add Unrostered Member</MudButton>
            </AuthorizeView>
        }
    </MudCardActions>
</MudCard>


@code {
    [Parameter] public RaidDto Raid { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
    }

    private Task OnRemoveClickedAsync(CharacterDto character)
    {
        return Api.Raids.RemoveAttendee(Raid.Id, character.Id)
            .OnSuccess(_ =>
            {
                Raid.Attendees.RemoveAll(c => c.Character.Id == character.Id);
                StateHasChanged();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task AddRosteredAsync()
    {
        return AddAttendeeAsync(() => Api.Characters.GetByTeam(Raid.TeamId), FilterCharacters, showAdd: false);
    }

    private Task AddUnrosteredAsync()
    {
        return AddAttendeeAsync(Api.Characters.GetAll, c => c.TeamId != Raid.TeamId && FilterCharacters(c), showAdd: true);
    }

    private async Task AddAttendeeAsync(Func<IApiClientOperation<IList<CharacterDto>>> operation, Func<CharacterDto, bool> filter, bool showAdd)
    {
        var character = await DialogService.ShowAsync<PickCharacterDialog, CharacterDto>(
            string.Empty,
            new() { [nameof(PickCharacterDialog.Operation)] = operation, [nameof(PickCharacterDialog.Filter)] = filter, [nameof(PickCharacterDialog.ShowAdd)] = showAdd },
            new() { NoHeader = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (character is not null)
        {
            await Api.Raids.AddAttendee(Raid.Id, character.Id)
                .OnSuccess(attendance =>
                {
                    attendance.Character = character;
                    Raid.Attendees.Add(attendance);
                    StateHasChanged();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private bool FilterCharacters(CharacterDto character)
    {
        return Raid.Attendees.Find(a => a.Character.Id == character.Id) is null;
    }
}
