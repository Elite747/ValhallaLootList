@page "/raids/{RaidId:long}"
@inject ApiClient Api

<ApiExecutor Operation="() => Api.Raids.Get(RaidId)" Context="raid" @ref="_executor" BackgroundRefresh="true">
    <MudText Typo="Typo.h4" Inline="false">Team @raid.TeamName Raid</MudText>
    <MudText Typo="Typo.h6" Inline="false">Phase @raid.Phase</MudText>
    <MudText Typo="Typo.subtitle1" Inline="false">@raid.StartedAt.ToLocalTime().ToString("f", CultureInfo.CurrentCulture)</MudText>
    <AuthorizeView Resource="raid.TeamId" Policy="@AppRoles.LootMaster">
        @if (raid.LocksAt > DateTimeOffset.UtcNow)
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Warning">
                Locks @raid.LocksAt.ToLocalTime().ToString("f", CultureInfo.CurrentCulture)
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">Locked</MudText>
        }
    </AuthorizeView>

    <AttendeesView Raid="raid" />
    <KillsView Raid="raid" />

    <div class="fab-container-fixed">
        <MudFabProgress Icon="@Icons.Material.Filled.Refresh"
                        Color="Color.Primary"
                        OnClick="() => _executor?.RestartAsync() ?? Task.CompletedTask" />
    </div>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;

    [Parameter] public long RaidId { get; set; }
}
