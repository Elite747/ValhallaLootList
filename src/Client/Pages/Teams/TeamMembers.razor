@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudExpansionPanels Elevation="5" Dense="true">
    <div class="mud-expand-panel mud-elevation-5 mud-expand-panel-border">
        <div class="mud-expand-panel-text">
            <div class="mud-card-header">
                <div class="mud-card-header-content">
                    <MudText Typo="Typo.h6">Roster</MudText>
                </div>
                <div class="mud-card-header-actions">
                    <AuthorizeView Policy="@AppPolicies.RaidLeader" Resource="@Team.Id">
                        <MudTooltip Text="Add Member">
                            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Success" OnClick="AddMemberAsync" />
                        </MudTooltip>
                    </AuthorizeView>
                    <MudTooltip Text="Refresh">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="OnRefreshClicked" />
                    </MudTooltip>
                </div>
            </div>
        </div>
    </div>
    @foreach (var m in Team.Roster.OrderByRoleThenClassThenName(_phase))
    {
        var member = m;
        var selected = member.Character.Id == _selectedMemberId;
        var phaseLootList = member.LootLists.Find(ll => ll.Phase == _phase);
        <MudExpansionPanel IsExpanded="selected" IsExpandedChanged="expanded => _selectedMemberId = expanded ? member.Character.Id : null" @key="member.Character.Id">
            <TitleContent>
                <div class="d-flex align-center">
                    <PlayerIcon Race="member.Character.Race"
                                Gender="member.Character.Gender"
                                PlayerClass="member.Character.Class"
                                Spec="phaseLootList?.MainSpec ?? Specializations.None"
                                ShowTooltip="true"
                                Class="mr-5" />
                    <MudText Inline="true" Typo="Typo.h5" Class="mr-2">@member.Character.Name</MudText>
                    @if (phaseLootList is null || phaseLootList.Approved == false || member.Verified == false)
                    {
                        <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
                    }
                    @if (member.Status != RaidMemberStatus.Member)
                    {
                        <MudText Inline="true" Color="Color.Warning">Trial (@(member.Status == RaidMemberStatus.HalfTrial ? -9 : -18))</MudText>
                    }
                </div>
            </TitleContent>
            <ChildContent>
                <MemberView Team="Team" Member="member" Phase="_phase" MemberUpdated="StateHasChanged" />
            </ChildContent>
        </MudExpansionPanel>
    }
</MudExpansionPanels>

@code {
    private byte _phase;
    private long? _selectedMemberId;

    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public string? SelectedMemberName { get; set; }
    [Parameter] public byte? SelectedPhase { get; set; }
    [Parameter] public byte CurrentPhase { get; set; }
    [Parameter] public EventCallback OnRefreshClicked { get; set; }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        _phase = SelectedPhase ?? CurrentPhase;
    }

    private async Task AddMemberAsync()
    {
        var result = await DialogService.ShowAsync<MemberAdder, MemberDto>(
            "Add Member",
            new() { [nameof(MemberAdder.Team)] = Team },
            new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (result is not null)
        {
            Team.Roster.Add(result);
        }
    }
}