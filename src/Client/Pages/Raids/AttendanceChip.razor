@inject ApiClient Api
@inject IDialogService DialogService

<CharacterChip Character="Attendance.Character"
               Spec="Attendance.MainSpec"
               OnClick="OpenDetailsAsync"
               EndIcon="@_icon"
               EndIconColor="_color" />

@code {
    private string? _icon;
    private Color _color;

    [Parameter] public RaidDto Raid { get; set; } = null!;
    [Parameter] public AttendanceDto Attendance { get; set; } = null!;
    [Parameter] public EventCallback OnChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Raid is null) throw new ArgumentNullException(nameof(Raid));
        if (Attendance is null) throw new ArgumentNullException(nameof(Attendance));

        @if (!Attendance.Character.Teams.Contains(Raid.TeamId) || Attendance.IgnoreAttendance)
        {
            _icon = Icons.Material.Filled.Error;
            _color = Color.Error;
        }
        else if (Attendance.Standby)
        {
            _icon = Icons.Material.Filled.Info;
            _color = Color.Info;
        }
        else
        {
            _icon = null;
        }
    }

    private async Task OpenDetailsAsync()
    {
        bool? removed = await DialogService.ShowAsync<AttendanceDialog, bool?>(
            string.Empty,
            new()
            {
                [nameof(AttendanceDialog.Attendance)] = Attendance,
                [nameof(AttendanceDialog.Raid)] = Raid
            });

        // removed value is currently unused. If the dialog returns a not-null result, the attendance state has changed.
        if (removed.HasValue)
        {
            await OnChanged.InvokeAsync();
        }
    }
}
