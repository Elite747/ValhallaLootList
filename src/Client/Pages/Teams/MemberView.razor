@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<AuthorizeView Policy="@AppPolicies.RaidLeader" Resource="Team.Id">
    <Authorized>
        <MudSelect T="RaidMemberStatus"
                   Value="Member.Status"
                   ValueChanged="OnStatusChangedAsync"
                   Label="Status"
                   ToStringFunc="GetDisplayString"
                   FullWidth="true"
                   Variant="Variant.Filled">
            <MudSelectItem T="RaidMemberStatus" Value="RaidMemberStatus.FullTrial">@GetDisplayString(RaidMemberStatus.FullTrial)</MudSelectItem>
            <MudSelectItem T="RaidMemberStatus" Value="RaidMemberStatus.HalfTrial">@GetDisplayString(RaidMemberStatus.HalfTrial)</MudSelectItem>
            <MudSelectItem T="RaidMemberStatus" Value="RaidMemberStatus.Member">@GetDisplayString(RaidMemberStatus.Member)</MudSelectItem>
        </MudSelect>

        @if (Member.Verified == true)
        {
            <MudText Color="Color.Success">Character is verified!</MudText>
        }
        else if (context.User.IsAdmin())
        {
            <ValhallaLootList.Client.Pages.Characters.AdminView User="context.User" Character="Member.Character" />
        }
        else
        {
            <MudText Color="Color.Warning">Character is unverified! Have an officer verify the owner of this character to clear this message.</MudText>
        }

        @if (Member.LootLists.Find(ll => ll.Phase == Phase) is MemberLootListDto lootList)
        {
            if (lootList.Approved == true)
            {
                <MudText Color="Color.Success">
                    Loot list for phase @Phase was approved!
                </MudText>
            }
            else
            {
                <MudText Color="Color.Warning">
                    Loot list for phase @Phase has not been approved yet!
                </MudText>
            }
        }
        else
        {
            <MudText Color="Color.Warning">
                Character does not have a loot list! Have the owner create one or create it on their behalf by going to their <a href="characters/@Member.Character.Name">character page</a>.
            </MudText>
        }

        <DonationSummary Member="Member">
            <MudIconButton OnClick="() => AddDonationAsync(false)"
                           Icon="@Icons.Material.Filled.AddCircle"
                           Size="Size.Small"
                           Color="Color.Success"
                           Class="mx-2" />
            <MudIconButton OnClick="() => AddDonationAsync(true)"
                           Icon="@Icons.Material.Filled.RemoveCircle"
                           Size="Size.Small"
                           Color="Color.Error" />
        </DonationSummary>
        <AttendanceSummary Member="Member" />

        <MudButton Link="@("characters/" + Member.Character.Name + "/phase/" + Phase)" Color="Color.Primary" Variant="Variant.Text">View List</MudButton>
        <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Remove Member</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudText Color="Member.Status == RaidMemberStatus.Member ? Color.Inherit : Color.Warning" Inline="false">Status: @GetDisplayString(Member.Status)</MudText>
        <DonationSummary Member="Member" />
        <AttendanceSummary Member="Member" />

        <MudButton Link="@("characters/" + Member.Character.Name + "/phase/" + Phase)" Color="Color.Primary" Variant="Variant.Text">View List</MudButton>

        <AuthorizeView Policy="@AppPolicies.CharacterOwner" Resource="Member.Character.Id" Context="_">
            <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Remove Member</MudButton>
        </AuthorizeView>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public MemberDto Member { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public EventCallback MemberUpdated { get; set; }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (Member is null) throw new ArgumentNullException(nameof(Member));
    }

    private Task OnStatusChangedAsync(RaidMemberStatus status)
    {
        return Api.Teams.UpdateMember(Team.Id, Member.Character.Id, new() { MemberStatus = status })
            .OnSuccess((_, _) =>
            {
                Member.Status = status;
                return MemberUpdated.InvokeAsync();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private async Task RemoveAsync()
    {
        if (await DialogService.ShowAsync<RemoveMemberDialog, bool>("Remove Member", new() { [nameof(RemoveMemberDialog.CharacterName)] = Member.Character.Name }))
        {
            await Api.Teams.RemoveMember(Team.Id, Member.Character.Id)
                .OnSuccess((_, _) =>
                {
                    Team.Roster.Remove(Member);
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task AddDonationAsync(bool isRemove)
    {
        var amount = await DialogService.ShowAsync<GameCurrencyDialog, int?>($"{(isRemove ? "Remove" : "Add")} Donation ({Member.Character.Name})");
        if (amount.HasValue)
        {
            var actualAmount = amount.Value;

            if (isRemove)
            {
                actualAmount = -actualAmount;
            }

            await Api.Donations.Add(new(){ CopperAmount = actualAmount, CharacterId = Member.Character.Id })
                .OnSuccess(_ =>
                {
                    Member.DonatedNextMonth += actualAmount;
                    StateHasChanged();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }

    }

    private static string GetDisplayString(RaidMemberStatus status)
    {
        return status switch
        {
            RaidMemberStatus.FullTrial =>"Full Trial (-18 prio)",
            RaidMemberStatus.HalfTrial =>"Half Trial (-9 prio)",
            RaidMemberStatus.Member =>"Member (no penalty)",
            _ => "Not Selected"
        };
    }
}
