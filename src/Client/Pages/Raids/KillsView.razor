@inject ApiClient Api
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@foreach (var kill in Raid.Kills)
{
    var localKill = kill;
    <MudCard Class="my-4" Elevation="3">
        <MudCardContent>
            <MudText Typo="Typo.h6">@kill.EncounterName</MudText>
            <MudText Typo="Typo.subtitle1">Killed by: @string.Join(", ", kill.Characters.Select(id => Raid.Attendees.Find(a => a.Id == id)?.Name).Where(str => str?.Length > 0).OrderBy(str => str))</MudText>
            <MudText Typo="Typo.subtitle1" GutterBottom="true">Recorded at @kill.KilledAt.ToOffset(TimeZoneInfo.Local.GetUtcOffset(DateTime.Now)).ToString("t", CultureInfo.CurrentCulture)</MudText>
            @if (kill.Drops.All(drop => drop.WinnerId is null))
            {
                var encounterId = kill.EncounterId;
                <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => DeleteAsync(encounterId)">Delete</MudButton>
            }
        </MudCardContent>
        <MudList>
            @foreach (var d in kill.Drops)
            {
                var drop = d;
                <MudDivider />
                <MudListItem Class="d-flex jusify-content-between align-items-center">
                    <div class="d-flex">
                        <div class="mr-5">
                            <ItemLink LinkEnabled="true" Id="drop.ItemId" Colorize="true" Bracketize="true" OverrideText="@drop.ItemName" />
                            <MudText Color="drop.WinnerId is null ? Color.Error : Color.Success" Inline="false">Awarded to @(drop.WinnerName ?? "nobody").</MudText>
                        </div>
                        <AuthorizeView Roles="@AppRoles.LootMaster">
                            @if (drop.WinnerId is null)
                            {
                                <MudButton OnClick="() => BeginAssignAsync(drop)" Variant="Variant.Text" Color="Color.Primary">Assign</MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="() => AssignAsync(drop, null)" Variant="Variant.Text" Color="Color.Error">Unassign</MudButton>
                            }
                        </AuthorizeView>
                    </div>
                </MudListItem>
            }
        </MudList>
    </MudCard>
}

<AuthorizeView Roles="@AppRoles.LootMaster">
    <MudButton OnClick="AddClickedAsync" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">
        Add Kill
    </MudButton>
</AuthorizeView>

@code {
    [Parameter] public RaidDto Raid { get; set; } = null!;
}
