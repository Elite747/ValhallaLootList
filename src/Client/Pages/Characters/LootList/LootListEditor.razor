@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<ApiExecutor Operation="() => Api.Items.Get(LootList.Phase)" Context="items">
    <CascadingValue Value="items" IsFixed="true">
        <CascadingValue Value="this" IsFixed="true">
            <div class="ma-4">
                <MudText Typo="Typo.h6">
                    Main Spec: @LootList.MainSpec.GetDisplayName()
                </MudText>
                @if (LootList.OffSpec != LootList.MainSpec)
                {
                    <MudText Typo="Typo.h6">
                        Off Spec: @LootList.OffSpec.GetDisplayName()
                    </MudText>
                }

            <div>
                <MudButton OnClick="SubmitAsync" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">Submit</MudButton>
                <MudButton OnClick="ChangeSpecAsync" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">Change Specialization</MudButton>
                <MudButton OnClick="ResetAsync" Color="Color.Error" Variant="Variant.Filled" Class="mr-2">Reset</MudButton>
            </div>

                @foreach (var bracket in LootList.Entries.GroupBy(e => new { e.Bracket, e.BracketAllowsOffspec, e.BracketAllowsTypeDuplicates }).OrderBy(b => b.Key.Bracket))
                {
                    <LootListEditorBracket Bracket="bracket.Key.Bracket"
                                           AllowOffSpec="bracket.Key.BracketAllowsOffspec"
                                           AllowTypeDuplicates="bracket.Key.BracketAllowsTypeDuplicates"
                                           BracketEntries="bracket" />
                }

            </div>
        </CascadingValue>
    </CascadingValue>
</ApiExecutor>

@code {
    [Parameter] public LootListDto LootList { get; set; } = null!;
    [Parameter] public EventCallback OnSubmit { get; set; }

    public void NotifyStateChanged() => StateHasChanged();

    protected override void OnParametersSet()
    {
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
    }

    private async Task SubmitAsync()
    {
        var team = await DialogService.ShowAsync<PickTeamDialog, TeamNameDto?>(string.Empty);

        if (team is not null)
        {
            await Api.LootLists.SetStatus(LootList.CharacterId, LootList.Phase, new() { Status = LootListStatus.Submitted, SubmitTo = team.Id })
                .OnSuccess((_, _) =>
                {
                    LootList.Status = LootListStatus.Submitted;
                    LootList.SubmittedToId = team.Id;
                    LootList.SubmittedToName = team.Name;
                    return OnSubmit.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private Task ResetAsync()
    {
        return Api.LootLists.Reset(LootList.CharacterId, LootList.Phase)
            .OnSuccess(lootList =>
            {
                LootList.Entries.Clear();
                LootList.Entries.AddRange(lootList.Entries);
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task ChangeSpecAsync()
    {
        return Api.Characters.GetSpecs(LootList.CharacterId)
            .OnSuccess(async (specs, _) =>
            {
                if (specs.Count == 1)
                {
                    await DialogService.ShowMessageBox("Change Specialization", "Your class only has one role.");
                    return;
                }

                var response = await DialogService.ShowAsync<CreateListDialog, LootListSubmissionDto?>(
                    string.Empty,
                    new()
                    {
                        [nameof(CreateListDialog.CharacterId)] = LootList.CharacterId,
                        [nameof(CreateListDialog.Phase)] = LootList.Phase,
                        [nameof(CreateListDialog.Specializations)] = specs,
                        [nameof(CreateListDialog.UpdateExisting)] = true,
                        [nameof(CreateListDialog.DefaultMainSpec)] = LootList.MainSpec,
                        [nameof(CreateListDialog.DefaultOffSpec)] = LootList.MainSpec != LootList.OffSpec ? LootList.OffSpec : null,
                    });

                if (response is not null)
                {
                    LootList.MainSpec = response.MainSpec.GetValueOrDefault();
                    LootList.OffSpec = response.OffSpec ?? LootList.MainSpec;
                    StateHasChanged();
                }
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}