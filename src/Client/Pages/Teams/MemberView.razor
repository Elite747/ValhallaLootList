@inject ApiClient Api
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<AuthorizeView Policy="@AppPolicies.RaidLeader" Resource="Team.Id">
    <Authorized>
        <MudSelect T="RaidMemberStatus?"
                   Value="Member.Status"
                   ValueChanged="OnStatusChangedAsync"
                   Label="Status"
                   ToStringFunc="GetDisplayString"
                   FullWidth="true">
            <MudSelectItem T="RaidMemberStatus?" Value="RaidMemberStatus.FullTrial">@GetDisplayString(RaidMemberStatus.FullTrial)</MudSelectItem>
            <MudSelectItem T="RaidMemberStatus?" Value="RaidMemberStatus.HalfTrial">@GetDisplayString(RaidMemberStatus.HalfTrial)</MudSelectItem>
            <MudSelectItem T="RaidMemberStatus?" Value="RaidMemberStatus.Member">@GetDisplayString(RaidMemberStatus.Member)</MudSelectItem>
        </MudSelect>

        @if (Member.Verified == true)
        {
            <MudText Color="Color.Success">Character is verified!</MudText>
        }
        else if (context.User.IsAdmin())
        {
            <ValhallaLootList.Client.Pages.Characters.AdminView User="context.User" Character="Member.Character" />
        }
        else
        {
            <MudText Color="Color.Warning">Character is unverified! Have an admin verify the owner of this character to clear this message.</MudText>
        }

        @if (Member.LootLists.Find(ll => ll.Phase == Phase) is MemberLootListDto lootList)
        {
            if (lootList.Approved == true)
            {
                <MudText Color="Color.Success">Loot list for phase @Phase was approved!</MudText>
                @if (lootList.ApprovedBy is not null)
                {
                    <MudText>
                        Approved by <GuildMemberDisplay Member="lootList.ApprovedBy" />
                    </MudText>
                }
            }
            else
            {
                <MudText Color="Color.Warning">
                    Loot list for phase @Phase has not been approved yet! Switch to the loot list view by clicking the <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ListAlt" /> button above to review and approve loot lists.
                </MudText>
            }
        }
        else
        {
            <MudText Color="Color.Warning">
                Character does not have a loot list! Have the owner create one or create it on their behalf by going to their <a href="characters/@Member.Character.Name">character page</a>.
            </MudText>
        }

        <DonationSummary Member="Member" />
        <AttendanceSummary Member="Member" />

        <MudButton OnClick="AddDonationAsync" Color="Color.Primary" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AttachMoney">Add Donation</MudButton>

        <MudButton OnClick="RemoveAsync" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.DeleteForever">Remove Member</MudButton>
    </Authorized>
    <NotAuthorized>
        @if (Member.Status.HasValue)
        {
            <MudText Color="Member.Status == RaidMemberStatus.Member ? Color.Inherit : Color.Warning" Inline="false">Status: @GetDisplayString(Member.Status.Value)</MudText>
        }
        <DonationSummary Member="Member" />
        <AttendanceSummary Member="Member" />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public TeamDto Team { get; set; } = null!;
    [Parameter] public MemberDto Member { get; set; } = null!;
    [Parameter] public byte Phase { get; set; }
    [Parameter] public EventCallback MemberUpdated { get; set; }

    protected override void OnParametersSet()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));
        if (Member is null) throw new ArgumentNullException(nameof(Member));
    }

    private Task OnStatusChangedAsync(RaidMemberStatus? status)
    {
        if (status.HasValue)
        {
            return Api.Teams.UpdateMember(Team.Id, Member.Character.Id, new() { MemberStatus = status.Value })
                .OnSuccess((_, _) =>
                {
                    Member.Status = status;
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }

        return Task.CompletedTask;
    }

    private async Task UpdateAsync()
    {
        var result = await DialogService.ShowAsync<UpdateMemberDialog, RaidMemberStatus?>(
            "Update Member",
            new() { [nameof(UpdateMemberDialog.Team)] = Team, [nameof(UpdateMemberDialog.Member)] = Member },
            new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });

        if (result.HasValue)
        {
            Member.Status = result.Value;
            await MemberUpdated.InvokeAsync();
        }
    }

    private async Task RemoveAsync()
    {
        if (await DialogService.ShowAsync<RemoveMemberDialog, bool>("Remove Member", new() { [nameof(RemoveMemberDialog.CharacterName)] = Member.Character.Name }))
        {
            await Api.Teams.RemoveMember(Team.Id, Member.Character.Id)
                .OnSuccess((_, _) =>
                {
                    Team.Roster.Remove(Member);
                    return MemberUpdated.InvokeAsync();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private async Task AddDonationAsync()
    {
        var amount = await DialogService.ShowAsync<GameCurrencyDialog, int?>($"Add Donation ({Member.Character.Name})");
        if (amount.HasValue)
        {
            await Api.Donations.Add(new(){ CopperAmount = amount.Value, CharacterId = Member.Character.Id })
                .OnSuccess(_ =>
                {
                    Member.DonatedNextMonth += amount.Value;
                    StateHasChanged();
                })
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }

    }

    private static string GetDisplayString(RaidMemberStatus? status)
    {
        return status switch
        {
            RaidMemberStatus.FullTrial =>"Full Trial (-18 prio)",
            RaidMemberStatus.HalfTrial =>"Half Trial (-9 prio)",
            RaidMemberStatus.Member =>"Member (no penalty)",
            _ => "Not Selected"
        };
    }
}
