@page "/raids"
@inject ApiClient Api
@inject ISnackbar Snackbar
@{
    var firstDayOfWeek = (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
    var firstCalendarDay = _date.AddDays(firstDayOfWeek - (int)_date.DayOfWeek);
}

<MudCard Elevation="5">
    <div class="d-flex justify-space-between align-center">
        <MudIconButton OnClick="() => ChangeMonth(-1)" Icon="@Icons.Material.Filled.ChevronLeft" />
        <MudText Typo="Typo.h4">@_date.ToString("MMMM", CultureInfo.CurrentCulture)</MudText>
        <MudIconButton OnClick="() => ChangeMonth(1)" Icon="@Icons.Material.Filled.ChevronRight" />
    </div>
    <MudOverlay Visible="_raidsLoading" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
    <SimpleTableEx Bordered="true" FixedLayout="true" Class="ma-0" Outlined="false">
        <thead>
            <tr>
                @foreach (var day in ValhallaLootList.Helpers.DayOfWeekHelpers.EnumerateDaysByCulture(CultureInfo.CurrentCulture))
                {
                    <th>@CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(day)</th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int week = 0; week < 6; week++)
            {
                DateTime firstDayThisWeek = firstCalendarDay.AddDays(week * 7);

                if (firstDayThisWeek.Month > _date.Month || firstDayThisWeek.Year > _date.Year)
                {
                    break;
                }

                <tr>
                    @for (int day = 0; day < 7; day++)
                    {
                        DateTime current = firstDayThisWeek.AddDays(day);

                        @if (current.Month == _date.Month)
                        {
                            <td class="pa-1 ma-0 @(current == DateTime.Today ? "mud-theme-secondary" : "")">
                                <div style="float: right">
                                    @current.Day
                                </div>
                                <div style="min-height: 6rem">
                                    @foreach (var raid in _raids.Where(r => r.StartedAt.ToLocalTime().Date == current).OrderBy(r => r.StartedAt))
                                    {
                                        <MudTooltip Text="@($"{raid.TeamName} Phase {raid.Phase} raid on {raid.StartedAt.ToLocalTime().ToString("f", CultureInfo.CurrentCulture)}")">
                                            <div>
                                                <MudLink Href="@("raids/" + raid.Id)" Color="Color.Inherit">
                                                    @raid.TeamName (P.@raid.Phase)
                                                </MudLink>
                                            </div>
                                        </MudTooltip>
                                    }
                                </div>
                            </td>
                        }
                        else
                        {
                            <td class="pa-0 ma-0 mud-theme-dark"></td>
                        }
                    }
                </tr>
            }
        </tbody>
    </SimpleTableEx>
</MudCard>

@code {
    private readonly List<RaidDto> _raids = new();
    private DateTime _date;
    private bool _raidsLoading;

    protected override Task OnInitializedAsync()
    {
        _date = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
        return ChangeMonth(0);
    }

    private Task ChangeMonth(int months)
    {
        _date = _date.AddMonths(months);
        _raids.Clear();
        _raidsLoading = true;
        StateHasChanged();
        return Api.Raids.GetForMonth(_date.Year, _date.Month)
            .OnSuccess(raids =>
            {
                _raids.AddRange(raids);
                _raidsLoading = false;
                StateHasChanged();
            })
            .OnFailure(_ =>
            {
                _raidsLoading = false;
                StateHasChanged();
            })
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}
