@inject ApiClient Api  

<EditForm OnValidSubmit="OnSubmitAsync" Model="Input">
    <DataAnnotationsValidator />
    <ProblemValidator @ref="_problemValidator" />
    <MudDialog DisableSidePadding="true">
        <DialogContent>
            <MudContainer Style="max-height: 70vh; overflow-y: scroll; min-width: 60vw;">
                <MudSelect Label="Encounter"
                           @bind-Value="Input.EncounterId"
                           For="() => Input.EncounterId">
                    @foreach (var instance in Input.Instances)
                    {
                        <MudText Typo="Typo.h6">@instance.Name</MudText>
                        @foreach (var encounter in instance.Encounters)
                        {
                            <MudSelectItem Value="encounter.Id">@encounter.Name</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudGrid Class="mt-3">
                    <MudItem xs="12" md="6">
                        <label>Drops</label>
                        @foreach (var itemId in Input.Drops.Keys)
                        {
                            var localItemId = itemId;
                            <ItemLink Id="localItemId" Bracketize="true" Colorize="true" IconSize="IconSize.Small" />
                            <MudChipSet SelectedChipChanged="chip => Input.Drops[localItemId].Value = ((int?)chip?.Tag) ?? 0">
                                <MudChip Tag="@(0)" Default="true">0</MudChip>
                                <MudChip Tag="@(1)">1</MudChip>
                                <MudChip Tag="@(2)">2</MudChip>
                                <MudChip Tag="@(3)">3</MudChip>
                            </MudChipSet>
                        }
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <label>Present Raiders</label>
                        <MudList Clickable="true" Dense="true">
                            @foreach (var ch in Input.Attendees.Keys)
                            {
                                var character = ch;
                                <MudListItem Icon="@(Input.Attendees[character].Checked ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)"
                                             OnClick="() => Input.Attendees[character].Checked = !Input.Attendees[character].Checked"
                                             Text="@character.Name" />
                            }
                        </MudList>
                    </MudItem>
                </MudGrid>

                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private ProblemValidator? _problemValidator;

    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public AddKillInputModel Input { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Input is null) throw new ArgumentNullException(nameof(Input));
    }

    private async Task OnSubmitAsync()
    {
        var kill = new KillSubmissionDto
        {
            Characters = Input.Attendees.Where(pair => pair.Value.Checked).Select(pair => pair.Key.Id!).ToList(),
            EncounterId = Input.EncounterId
        };

        foreach (var (id, count) in Input.Drops)
        {
            for (int i = 0; i < count.Value; i++)
            {
                kill.Drops.Add(id);
            }
        }

        await Api.Raids
            .AddKill(Input.Raid.Id, kill)
            .OnSuccess(kill =>
            {
                Input.Raid.Kills.Add(kill);
                Dialog.Close();
            })
            .ValidateWith(_problemValidator)
            .ExecuteAsync();
    }
}