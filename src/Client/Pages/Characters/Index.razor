@page "/characters"
@inject ApiClient Api
@inject NavigationManager Nav
@inject IDialogService DialogService

<h1>Characters</h1>

<MudPaper>
    <ApiExecutor Operation="Api.Characters.GetAll" @ref="_executor" Context="characters">
        <MudList Clickable="true">
            <MudListSubheader Class="d-flex align-baseline">
                <MudTextField @bind-Value="_searchText"
                              Immediate="true"
                              Label="Find Character"
                              Variant="Variant.Text"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Filled.Search" />

                <MudTooltip Text="Refresh Characters">
                    <MudIconButton OnClick="() => _executor?.RestartAsync() ?? Task.CompletedTask" Icon="@Icons.Material.Filled.Refresh" />
                </MudTooltip>

                <AuthorizeView Context="auth">
                    <MudTooltip Text="Add Character">
                        <MudFab OnClick="() => CreateClickedAsync(auth)" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </AuthorizeView>
            </MudListSubheader>
            @foreach (var ch in EnumerateCharacters(characters))
            {
                <MudListItem Href="@("characters/" + ch.Name)">
                    <div class="d-flex">
                        <MudAvatar Class="mr-1" Size="Size.Small">
                            <RaceIcon Race="ch.Race" Gender="ch.Gender" Size="IconSize.Medium" Width="24" Height="24" />
                        </MudAvatar>
                        <MudAvatar Class="mr-1" Size="Size.Small">
                            <ClassIcon PlayerClass="ch.Class" Size="IconSize.Medium" Width="24" Height="24" />
                        </MudAvatar>
                        <MudText Inline="false">@ch.Name</MudText>
                    </div>
                </MudListItem>
            }
        </MudList>
    </ApiExecutor>
</MudPaper>

@code {
    private ApiExecutor<IList<CharacterDto>>? _executor;
    private string _searchText = string.Empty;

    private IEnumerable<CharacterDto> EnumerateCharacters(IList<CharacterDto> characters)
    {
        if (characters.Count > 0 && _searchText?.Length > 0)
        {
            const CompareOptions compareOptions = CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase;
            return characters.Where(ch => ch.Name?.Length > 0 && CultureInfo.CurrentCulture.CompareInfo.IndexOf(ch.Name, _searchText, compareOptions) >= 0);
        }
        return characters;
    }

    private async Task CreateClickedAsync(AuthenticationState auth)
    {
        var character = await DialogService.ShowAsync<Create, CharacterDto>(
            "Create Character",
            parameters: new()
            {
                [nameof(Create.AllowSubmitNonOwned)] = auth.User.IsAdmin(),
                [nameof(Create.DefaultSenderIsOwner)] = true
            },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (character is not null)
        {
            Nav.NavigateTo("/characters/" + character.Name);
        }
    }
}
