@inject ApiClient Api
@inject ISnackbar Snackbar

@if (_createList)
{
    <EditList Character="@Character" Phase="@Phase" OnLootListCreated="OnLootListCreated" ExistingList="_lootList" OnCancel="() => _createList = false" />
}
else
{
    <MudList Dense="true">
        @if (_lootList is not null)
        {
            <MudListSubheader>
                <MudButton OnClick="RefreshAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Class="mr-2">Refresh</MudButton>
                @if (_lootList.Locked)
                {
                    <AuthorizeView Policy="@AppPolicies.Administrator">
                        <MudButton OnClick="UnlockAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LockOpen" Color="Color.Error" Class="mr-2">Unlock</MudButton>
                    </AuthorizeView>
                }
                else
                {
                    <AuthorizeView Policy="@AppPolicies.RaidLeader" Resource="@_lootList.TeamId">
                        <MudButton OnClick="LockAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Lock" Color="Color.Error" Class="mr-2">Lock</MudButton>
                    </AuthorizeView>
                    <AuthorizeView Policy="@AppPolicies.CharacterOwnerOrAdmin" Resource="_lootList.CharacterId">
                        <MudButton OnClick="() => _createList = true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                    </AuthorizeView>
                }
            </MudListSubheader>

            @if (_lootList.Locked || _lootList.Entries.Any(e => e.Rank > 0))
            {
                <PrioListView LootList="_lootList" />
            }
            else
            {
                <NoPrioListView LootList="_lootList" />
            }
        }
        else
        {
            <AuthorizeView Policy="@AppPolicies.CharacterOwnerOrAdmin" Resource="Character.Id">
                <MudListSubheader>
                    <MudButton OnClick="() => _createList = true" Color="Color.Primary" Variant="Variant.Filled">Create</MudButton>
                </MudListSubheader>
            </AuthorizeView>
            <MudListSubheader>
                <p>@Character.Name does not have a loot list for Phase @Phase.</p>
            </MudListSubheader>
        }
    </MudList>
}

@code {
    [Parameter] public byte Phase { get; set; }
    [Parameter] public CharacterDto Character { get; set; } = null!;
    [Parameter] public IList<LootListDto> LootLists { get; set; } = null!;
    private LootListDto? _lootList;
    private bool _createList;

    public Task RefreshAsync()
    {
        return Api.LootLists.GetForCharacter(Character.Id, Phase)
            .OnSuccess(lists => ChangeListRef(lists.SingleOrDefault()))
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    protected override void OnParametersSet()
    {
        if (LootLists is null) throw new ArgumentNullException(nameof(LootLists));
        if (Character is null) throw new ArgumentNullException(nameof(Character));
        _lootList = LootLists.FirstOrDefault(ll => ll.Phase == Phase);
    }

    private void OnLootListCreated(LootListDto lootList)
    {
        ChangeListRef(lootList);
    }

    private void ChangeListRef(LootListDto? lootList)
    {
        if (_lootList is not null)
        {
            LootLists.Remove(_lootList);
        }
        if (lootList is not null)
        {
            LootLists.Add(lootList);
        }
        _lootList = lootList;
        _createList = false;
        StateHasChanged();
    }

    private Task LockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Lock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess((_, _) => RefreshAsync())
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }

    private Task UnlockAsync()
    {
        System.Diagnostics.Debug.Assert(_lootList is not null);
        return Api.LootLists.Unlock(_lootList.CharacterId, _lootList.Phase)
            .OnSuccess((_, _) => RefreshAsync())
            .SendErrorTo(Snackbar)
            .ExecuteAsync();
    }
}