<MudDialogScrollFix />
<MudDialog DisableSidePadding="true">
    <DialogContent>
        @if (Context.Items is not null)
        {
            <MudList Clickable="true" Dense="true">
                @foreach (var itemTypeGroup in Context.Items.Where(item => !DisallowedItems.Contains(item.Id)).GroupBy(item => new ItemGroup(item.Type, item.Slot)).OrderBy(g => g.Key))
                {
                    <MudDivider />
                    <MudListSubheader Class="pb-1"><b>@itemTypeGroup.Key.Name</b></MudListSubheader>
                    @foreach (var item in itemTypeGroup.OrderBy(item => item.Name))
                    {
                        <ItemLink Id="item.Id"
                                  @onclick="() => Dialog.Close(DialogResult.Ok(item.Id))"
                                  class="mud-list-item mud-list-item-gutters mud-list-item-clickable mud-ripple d-flex align-center">
                            <MudAvatar Rounded="true" Class="mr-2" Size="Size.Small">
                                <ItemLinkIcon Size="IconSize.Small" Width="24" Height="24" />
                            </MudAvatar>
                            <ItemLinkText OverrideText="@item.Name" Colorize="true" Class="mr-auto" />
                            @if (LootList.MainSpec.HasValue)
                            {
                                <RestrictionStatus Restrictions="item.Restrictions.Where(r => (r.Specs & LootList.MainSpec.Value) != 0)"
                                                   SpecPrefix="@(LootList.OffSpec.HasValue ? "mainspec" : null)" />
                            }

                            @if (LootList.OffSpec.HasValue)
                            {
                                <RestrictionStatus Restrictions="item.Restrictions.Where(r => (r.Specs & LootList.OffSpec.Value) != 0)"
                                                   SpecPrefix="offspec" />
                            }
                        </ItemLink>
                    }
                }

            </MudList>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => Dialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => Dialog.Close(DialogResult.Ok(0U))">Clear Selection</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public ItemSelectionContext Context { get; set; } = null!;

    [Parameter] public LootListSubmissionModel LootList { get; set; } = null!;

    [Parameter] public HashSet<uint> DisallowedItems { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Dialog is null) throw new ArgumentNullException(nameof(Dialog));
        if (Context is null) throw new ArgumentNullException(nameof(Context));
        if (LootList is null) throw new ArgumentNullException(nameof(LootList));
        if (DisallowedItems is null) throw new ArgumentNullException(nameof(DisallowedItems));
    }
}