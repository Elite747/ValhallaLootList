@page "/Characters/{characterName}"
@page "/Characters/{characterName}/{tab}"
@page "/Characters/{characterName}/{tab}/{phase:int}"
@using ValhallaLootList.Client.Pages.Characters.LootList;
@inject ApiClient Api
@inject IDialogService DialogService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<ApiExecutor Operation="() => Api.Characters.Get(CharacterName)" Context="character" @ref="_executor">
    <div class="d-flex align-center mb-3">
        <PlayerIcon Race="character.Race"
                    Gender="character.Gender"
                    PlayerClass="character.Class"
                    Size="Size.Medium"
                    ShowTooltip="true"
                    Class="mr-2" />
        <MudText Typo="Typo.h4" GutterBottom="false" Class="mr-2">@character.Name</MudText>
        @if (character.TeamName?.Length > 0)
        {
            <MudLink Href="@("teams/" + character.TeamName)" Typo="Typo.h5">&lt;@character.TeamName&gt;</MudLink>
        }
        <AuthorizeView Policy="@AppPolicies.Administrator">
            <MudTooltip Text="Edit">
                <MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Edit" OnClick="() => EditAsync(character)" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Class="ml-2" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteForever" OnClick="() => DeleteAsync(character)" />
            </MudTooltip>
        </AuthorizeView>
    </div>

    <AuthorizeView Policy="@AppPolicies.Administrator">
        <AdminView Character="character" User="context.User" />
    </AuthorizeView>

    <ApiExecutor Operation="() => Api.LootLists.GetForCharacter(character.Id)" Context="lootLists">
        <MudTabs Elevation="5" Rounded="true" ApplyEffectsToContainer="true" ActivePanelIndex="_tabIndex" ActivePanelIndexChanged="OnTabChanged" @ref="_tabs">
            @foreach (var phase in (_phaseConfig?.Phases ?? lootLists.Select(ll => ll.Phase).Distinct()).OrderBy(p => p))
            {
                <MudTabPanel Text="@($"Phase {phase}")" ID="phase">
                    <LootListPhase Character="character" Phase="phase" LootLists="lootLists" />
                </MudTabPanel>
            }
            <MudTabPanel Text="Won Items" ID="_wonId">
                <WonItemsView Character="character" />
            </MudTabPanel>
            <MudTabPanel Text="Attendance" ID="_attendanceId">
                <AttendanceView Character="character" />
            </MudTabPanel>
        </MudTabs>
    </ApiExecutor>
</ApiExecutor>

@code {
    private IApiExecutor? _executor;
    private MudTabs? _tabs;
    private PhaseConfigDto? _phaseConfig;
    private bool _characterChanged;
    private string _characterName = string.Empty;
    private object _wonId = new(), _attendanceId = new();
    private int _tabIndex;

    [Parameter] public string CharacterName
    {
        get => _characterName;
        set
        {
            if (_characterName != value)
            {
                _characterName = value;
                _characterChanged = true;
            }
        }
    }

    [Parameter] public string? Tab { get; set; }
    [Parameter] public int? Phase { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_characterChanged)
        {
            _characterChanged = false;
            if (_executor is not null)
            {
                await _executor.RestartAsync();
            }
        }
        
        _tabs?.ActivatePanel(GetPanelId());
    }

    protected override Task OnInitializedAsync()
    {
        return Api.GetPhaseConfiguration().OnSuccess(config => _phaseConfig = config).ExecuteAsync();
    }

    private async Task EditAsync(CharacterDto character)
    {
        var updatedCharacter = await DialogService.ShowAsync<Create, CharacterDto>(
            "Edit Character",
            parameters: new() { [nameof(Create.EditingCharacter)] = character },
            options: new() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        if (updatedCharacter is not null)
        {
            character.Name = updatedCharacter.Name;
            character.Race = updatedCharacter.Race;
            character.Gender = updatedCharacter.Gender;
        }
    }

    private async Task DeleteAsync(CharacterDto character)
    {
        if (await DialogService.ShowMessageBox(
            "Delete Character",
            "Are you sure you want to delete this character?",
            "Yes",
            "No") == true)
        {
            await Api.Characters.Delete(character.Id)
                .OnSuccess(_ => Nav.NavigateTo("characters"))
                .SendErrorTo(Snackbar)
                .ExecuteAsync();
        }
    }

    private object? GetPanelId()
    {
        if (string.Equals(Tab, "Won", StringComparison.OrdinalIgnoreCase))
        {
            return _wonId;
        }
        if (string.Equals(Tab, "Attendance", StringComparison.OrdinalIgnoreCase))
        {
            return _attendanceId;
        }
        if (string.Equals(Tab, "Phase", StringComparison.OrdinalIgnoreCase))
        {
            if (!Phase.HasValue || Phase < byte.MinValue || Phase > byte.MaxValue)
            {
                return _phaseConfig?.CurrentPhase;
            }
            return Phase.Value;
        }
        return _phaseConfig?.CurrentPhase;
    }

    private void OnTabChanged(int index)
    {
        _tabIndex = index;
        var panel = _tabs?.Panels.ElementAt(index);
        string? tab = null;
        byte? phase = null;

        if (panel is not null)
        {
            if (panel.ID == _wonId)
            {
                tab = "won";
            }
            else if (panel.ID == _attendanceId)
            {
                tab = "attendance";
            }
            else if (panel.ID is byte b)
            {
                tab = "phase";
                phase = b;
            }
        }

        string format = phase.HasValue ? "characters/{0}/{1}/{2}" : "characters/{0}/{1}";

        Nav.NavigateTo(string.Format(format, CharacterName, tab, phase));
    }
}
