@inject ApiClient Api
@inject ISnackbar Snackbar

<MudExpansionPanels Elevation="5">
    <ApiExecutor Operation="Api.Instances.GetAll" Context="instances">
        <MudExpansionPanelHeader DisableGutters="true" IsExpanded="!GroupByEncounter">
            <TitleContent>
                <MudText Typo="Typo.h6">Standings</MudText>
            </TitleContent>
            <ActionsContent>
                <MudTooltip Text="@(GroupByEncounter ? "Ungroup Items" : "Group Items by Encounter")">
                    <MudToggleIconButton Toggled="GroupByEncounter"
                                         ToggledChanged="OnSetGroupByEncounter"
                                         Icon="@CustomIcons.SetMerge"
                                         ToggledIcon="@CustomIcons.SetSplit" />
                </MudTooltip>
                @if (ShowExternalLink)
                {
                    <MudTooltip Text="Open standings in a new tab">
                        <MudIconButton Icon="@Icons.Material.Filled.OpenInNew"
                                       Color="Color.Default"
                                       Target="_blank"
                                       Link="@GetLink()" />
                    </MudTooltip>
                }
                <MudTooltip Text="@(_showWon ? "Hide Won Items" : "Show Won Items")">
                    <MudToggleIconButton @bind-Toggled="_showWon"
                                         Icon="@Icons.Material.Filled.RemoveRedEye"
                                         ToggledIcon="@CustomIcons.EyeOff" />
                </MudTooltip>
                <MudTooltip Text="Refresh">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="RefreshAsync" />
                </MudTooltip>
            </ActionsContent>
            <ChildContent>
                @if (!GroupByEncounter)
                {
                    <ItemsView Items="instances.Where(i => i.Phase == Phase).OrderBy(i => i.Name).SelectMany(i => i.Encounters.OrderBy(e => e.Name)).SelectMany(e => e.Items)"
                               ShowWon="_showWon"
                               Standings="_standings" />
                }
            </ChildContent>
        </MudExpansionPanelHeader>
        @if (GroupByEncounter)
        {
            foreach (var instance in instances.Where(i => i.Phase == Phase))
            {
                foreach (var e in instance.Encounters)
                {
                    var encounter = e;
                    <MudExpansionPanelEx IsExpanded="string.Equals(encounter.Id, SelectedEncounterId, StringComparison.OrdinalIgnoreCase)"
                                         IsExpandedChanged="b => OnExpandedChanged(b, encounter)"
                                         DisableGutters="true"
                                         DenseHeader="true">
                        <TitleContent>
                            <MudText Typo="Typo.h6">@encounter.Name</MudText>
                            <MudText Typo="Typo.caption">@instance.Name</MudText>
                        </TitleContent>
                        <ChildContent>
                            <ItemsView Items="encounter.Items" ShowWon="_showWon" Standings="_standings" />
                        </ChildContent>
                    </MudExpansionPanelEx>
                }
            }
        }
    </ApiExecutor>
</MudExpansionPanels>

@code {
    private readonly Dictionary<uint, List<StandingContext>> _standings = new();
    private bool _teamOrPhaseChanged, _showWon;
    private byte _phase;
    private TeamDto _team = null!;

    [Parameter] public TeamDto Team
    {
        get => _team;
        set
        {
            if (_team != value)
            {
                _team = value;
                _teamOrPhaseChanged = true;
            }
        }
    }

    [Parameter] public byte Phase
    {
        get => _phase;
        set
        {
            if (_phase != value)
            {
                _phase = value;
                _teamOrPhaseChanged = true;
            }
        }
    }

    [Parameter] public bool ShowExternalLink { get; set; }
    [Parameter] public string? SelectedEncounterId { get; set; }
    [Parameter] public EventCallback<string?> SelectedEncounterIdChanged { get; set; }

    private bool GroupByEncounter => !string.Equals(SelectedEncounterId, "@all", StringComparison.OrdinalIgnoreCase);

    protected override Task OnParametersSetAsync()
    {
        if (Team is null) throw new ArgumentNullException(nameof(Team));

        if (_teamOrPhaseChanged)
        {
            return RefreshAsync();
        }
        return Task.CompletedTask;
    }

    private Task RefreshAsync()
    {
        _teamOrPhaseChanged = false;
        return Api.LootLists.GetForTeam(Team.Id, Phase, includeApplicants: false)
            .OnSuccess((IList<LootListDto> lootLists) =>
            {
                _standings.Clear();
                foreach (var lootList in lootLists)
                {
                    foreach (var entry in lootList.Entries)
                    {
                        var itemId = entry.RewardFromId ?? entry.ItemId;
                        if (itemId.HasValue)
                        {
                            if (!_standings.TryGetValue(itemId.Value, out var itemStandings))
                            {
                                _standings[itemId.Value] = itemStandings = new();
                            }

                            itemStandings.Add(new(lootList, entry));
                        }
                    }
                }
                StateHasChanged();
            })
        .SendErrorTo(Snackbar)
        .ExecuteAsync();
    }

    private Task OnExpandedChanged(bool expanded, EncounterDto encounter)
    {
        if (GroupByEncounter)
        {
            return OnSelectedEncounterIdChanged(expanded ? encounter.Id : null);
        }
        return Task.CompletedTask;
    }

    private Task OnSetGroupByEncounter(bool groupByEncounter)
    {
        return OnSelectedEncounterIdChanged(groupByEncounter ? null : "@all");
    }

    private Task OnSelectedEncounterIdChanged(string? encounterId)
    {
        SelectedEncounterId = encounterId;
        return SelectedEncounterIdChanged.InvokeAsync(encounterId);
    }

    private string GetLink()
    {
        return $"teams/{Team.Name}/standings/phase/{Phase}/{SelectedEncounterId}";
    }
}
